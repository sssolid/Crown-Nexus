app.core.cache.backends
=======================

.. py:module:: app.core.cache.backends


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/app/core/cache/backends/memory/index
   /autoapi/app/core/cache/backends/null/index
   /autoapi/app/core/cache/backends/redis/index


Classes
-------

.. autoapisummary::

   app.core.cache.backends.MemoryCacheBackend
   app.core.cache.backends.NullCacheBackend
   app.core.cache.backends.RedisCacheBackend


Functions
---------

.. autoapisummary::

   app.core.cache.backends.get_backend


Package Contents
----------------

.. py:class:: MemoryCacheBackend(max_size = 1000, clean_interval = 60)

   Bases: :py:obj:`app.core.cache.base.CacheBackend`\ [\ :py:obj:`T`\ ]


   In-memory cache backend implementation.

   This backend stores cached values in memory, with optional TTL expiration.
   It's suitable for development and testing environments, or for small-scale
   production use where persistence is not required.


   .. py:attribute:: cache
      :type:  Dict[str, Any]


   .. py:attribute:: expiry
      :type:  Dict[str, float]


   .. py:attribute:: max_size
      :value: 1000



   .. py:attribute:: clean_interval
      :value: 60



   .. py:attribute:: lock


   .. py:attribute:: last_cleanup


   .. py:method:: initialize()
      :async:


      Initialize the memory cache backend.

      This is a no-op for the memory backend since it doesn't require
      external connections, but implemented for interface consistency.



   .. py:method:: shutdown()
      :async:


      Shut down the memory cache backend.

      Clears all cached data and performs cleanup.



   .. py:method:: get(key)
      :async:


      Get a value from the cache.

      Args:
          key: Cache key

      Returns:
          Optional[T]: Cached value or None if not found or expired



   .. py:method:: set(key, value, ttl = None)
      :async:


      Set a value in the cache.

      Args:
          key: Cache key
          value: Value to cache
          ttl: Time-to-live in seconds

      Returns:
          bool: True if successful, False otherwise



   .. py:method:: delete(key)
      :async:


      Delete a value from the cache.

      Args:
          key: Cache key

      Returns:
          bool: True if key was deleted, False if key wasn't found



   .. py:method:: exists(key)
      :async:


      Check if a key exists in the cache.

      Args:
          key: Cache key

      Returns:
          bool: True if key exists and hasn't expired, False otherwise



   .. py:method:: invalidate_pattern(pattern)
      :async:


      Invalidate all keys matching a pattern.

      Args:
          pattern: Key pattern to match (glob pattern)

      Returns:
          int: Number of keys invalidated



   .. py:method:: clear()
      :async:


      Clear all cached values.

      Returns:
          bool: True if successful, False otherwise



   .. py:method:: get_many(keys)
      :async:


      Get multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          Dict[str, Optional[T]]: Dictionary of key-value pairs



   .. py:method:: set_many(mapping, ttl = None)
      :async:


      Set multiple values in the cache.

      Args:
          mapping: Dictionary of key-value pairs to cache
          ttl: Time-to-live in seconds

      Returns:
          bool: True if successful, False otherwise



   .. py:method:: delete_many(keys)
      :async:


      Delete multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          int: Number of keys deleted



   .. py:method:: incr(key, amount = 1, default = 0, ttl = None)
      :async:


      Increment a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to increment by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          int: New counter value



   .. py:method:: decr(key, amount = 1, default = 0, ttl = None)
      :async:


      Decrement a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to decrement by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          int: New counter value



   .. py:method:: _clean_if_needed()
      :async:


      Clean expired keys if cleanup interval has passed.



.. py:class:: NullCacheBackend

   Bases: :py:obj:`app.core.cache.base.CacheBackend`\ [\ :py:obj:`T`\ ]


   No-op cache backend for testing or disabling cache.

   This backend doesn't actually store or retrieve any data. It simply provides
   the interface required by the CacheBackend protocol but performs no operations.
   Useful for testing or when caching needs to be disabled.


   .. py:method:: initialize()
      :async:


      Initialize the null cache backend.

      This is a no-op method that exists for interface consistency.



   .. py:method:: shutdown()
      :async:


      Shut down the null cache backend.

      This is a no-op method that exists for interface consistency.



   .. py:method:: get(key, default = None)
      :async:


      Always return default value.

      Args:
          key: Cache key
          default: Default value to return

      Returns:
          Default value (always)



   .. py:method:: set(key, value, ttl = None)
      :async:


      No-op, always return success.

      Args:
          key: Cache key
          value: Value to cache
          ttl: Time-to-live in seconds

      Returns:
          bool: Always True



   .. py:method:: delete(key)
      :async:


      No-op, always return success.

      Args:
          key: Cache key

      Returns:
          bool: Always True



   .. py:method:: exists(key)
      :async:


      Always return False.

      Args:
          key: Cache key

      Returns:
          bool: Always False



   .. py:method:: clear()
      :async:


      No-op, always return success.

      Returns:
          bool: Always True



   .. py:method:: invalidate_pattern(pattern)
      :async:


      No-op invalidate method.

      Args:
          pattern: Pattern to match

      Returns:
          int: Always 0



   .. py:method:: get_many(keys)
      :async:


      No-op get many method.

      Args:
          keys: List of cache keys

      Returns:
          Dict[str, Optional[T]]: Dictionary with None values for all keys



   .. py:method:: set_many(mapping, ttl = None)
      :async:


      No-op set many method.

      Args:
          mapping: Dictionary of key-value pairs
          ttl: Time-to-live in seconds

      Returns:
          bool: Always True



   .. py:method:: delete_many(keys)
      :async:


      No-op delete many method.

      Args:
          keys: List of cache keys

      Returns:
          int: Always 0



   .. py:method:: incr(key, amount = 1, default = 0, ttl = None)
      :async:


      No-op increment method.

      Args:
          key: Cache key
          amount: Amount to increment by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          int: Always the default value



   .. py:method:: decr(key, amount = 1, default = 0, ttl = None)
      :async:


      No-op decrement method.

      Args:
          key: Cache key
          amount: Amount to decrement by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          int: Always the default value



.. py:class:: RedisCacheBackend(redis_url = None, serializer = 'pickle', prefix = 'cache:', **redis_options)

   Bases: :py:obj:`app.core.cache.base.CacheBackend`\ [\ :py:obj:`T`\ ]


   Redis implementation of the cache backend.

   Provides caching functionality using Redis as the storage backend.


   .. py:attribute:: redis_url
      :value: 'redis://localhost:6379/0'



   .. py:attribute:: serializer
      :value: 'pickle'



   .. py:attribute:: prefix
      :value: 'cache:'



   .. py:attribute:: redis_options


   .. py:attribute:: client
      :type:  Optional[redis.asyncio.Redis]
      :value: None



   .. py:method:: initialize()
      :async:


      Initialize the Redis connection.

      This method establishes the Redis connection during application startup.



   .. py:method:: shutdown()
      :async:


      Close the Redis connection.

      This method is called during application shutdown to properly close
      the Redis connection.



   .. py:method:: _get_client()
      :async:


      Get or create Redis client.

      Returns:
          Redis client



   .. py:method:: get(key)
      :async:


      Get a value from the cache.

      Args:
          key: Cache key

      Returns:
          Cached value or None if not found



   .. py:method:: set(key, value, ttl = None)
      :async:


      Set a value in the cache.

      Args:
          key: Cache key
          value: Value to cache
          ttl: Time-to-live in seconds

      Returns:
          True if successful, False otherwise



   .. py:method:: delete(key)
      :async:


      Delete a value from the cache.

      Args:
          key: Cache key

      Returns:
          True if successful, False otherwise



   .. py:method:: exists(key)
      :async:


      Check if a key exists in the cache.

      Args:
          key: Cache key

      Returns:
          True if key exists, False otherwise



   .. py:method:: invalidate_pattern(pattern)
      :async:


      Invalidate keys matching a pattern.

      Args:
          pattern: Key pattern to invalidate

      Returns:
          Number of invalidated keys



   .. py:method:: clear()
      :async:


      Clear all cache data.

      Returns:
          True if successful, False otherwise



   .. py:method:: get_many(keys)
      :async:


      Get multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          Dictionary mapping keys to values



   .. py:method:: set_many(mapping, ttl = None)
      :async:


      Set multiple values in the cache.

      Args:
          mapping: Dictionary mapping keys to values
          ttl: Time-to-live in seconds

      Returns:
          True if successful, False otherwise



   .. py:method:: delete_many(keys)
      :async:


      Delete multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          Number of deleted keys



   .. py:method:: incr(key, amount = 1, default = 0, ttl = None)
      :async:


      Increment a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to increment by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          New counter value



   .. py:method:: decr(key, amount = 1, default = 0, ttl = None)
      :async:


      Decrement a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to decrement by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          New counter value



   .. py:method:: _serialize(value)

      Serialize a value for storage.

      Args:
          value: Value to serialize

      Returns:
          Serialized value



   .. py:method:: _deserialize(value)

      Deserialize a value from storage.

      Args:
          value: Serialized value

      Returns:
          Deserialized value



   .. py:method:: get_ttl(key)
      :async:


      Get the remaining TTL for a key.

      Args:
          key: Cache key

      Returns:
          Remaining TTL in seconds or None if key doesn't exist



   .. py:method:: add_to_set(key, member)
      :async:


      Add a member to a Redis set.

      Args:
          key: Set key
          member: Member to add

      Returns:
          True if successful, False otherwise



   .. py:method:: add_many_to_set(key, members)
      :async:


      Add multiple members to a Redis set.

      Args:
          key: Set key
          members: Members to add

      Returns:
          Number of members added



   .. py:method:: get_set_members(key)
      :async:


      Get all members of a Redis set.

      Args:
          key: Set key

      Returns:
          List of set members



   .. py:method:: remove_from_set(key, member)
      :async:


      Remove a member from a Redis set.

      Args:
          key: Set key
          member: Member to remove

      Returns:
          True if successful, False otherwise



.. py:function:: get_backend(name)

   Get cache backend by name.


