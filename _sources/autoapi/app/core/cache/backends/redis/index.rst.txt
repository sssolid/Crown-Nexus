app.core.cache.backends.redis
=============================

.. py:module:: app.core.cache.backends.redis


Attributes
----------

.. autoapisummary::

   app.core.cache.backends.redis.T
   app.core.cache.backends.redis.logger


Classes
-------

.. autoapisummary::

   app.core.cache.backends.redis.RedisCacheBackend


Module Contents
---------------

.. py:data:: T

.. py:data:: logger

.. py:class:: RedisCacheBackend(redis_url = None, serializer = 'pickle', prefix = 'cache:', **redis_options)

   Bases: :py:obj:`app.core.cache.base.CacheBackend`\ [\ :py:obj:`T`\ ]


   Redis implementation of the cache backend.

   Provides caching functionality using Redis as the storage backend.


   .. py:attribute:: redis_url
      :value: 'redis://localhost:6379/0'



   .. py:attribute:: serializer
      :value: 'pickle'



   .. py:attribute:: prefix
      :value: 'cache:'



   .. py:attribute:: redis_options


   .. py:attribute:: client
      :type:  Optional[redis.asyncio.Redis]
      :value: None



   .. py:method:: initialize()
      :async:


      Initialize the Redis connection.

      This method establishes the Redis connection during application startup.



   .. py:method:: shutdown()
      :async:


      Close the Redis connection.

      This method is called during application shutdown to properly close
      the Redis connection.



   .. py:method:: _get_client()
      :async:


      Get or create Redis client.

      Returns:
          Redis client



   .. py:method:: get(key)
      :async:


      Get a value from the cache.

      Args:
          key: Cache key

      Returns:
          Cached value or None if not found



   .. py:method:: set(key, value, ttl = None)
      :async:


      Set a value in the cache.

      Args:
          key: Cache key
          value: Value to cache
          ttl: Time-to-live in seconds

      Returns:
          True if successful, False otherwise



   .. py:method:: delete(key)
      :async:


      Delete a value from the cache.

      Args:
          key: Cache key

      Returns:
          True if successful, False otherwise



   .. py:method:: exists(key)
      :async:


      Check if a key exists in the cache.

      Args:
          key: Cache key

      Returns:
          True if key exists, False otherwise



   .. py:method:: invalidate_pattern(pattern)
      :async:


      Invalidate keys matching a pattern.

      Args:
          pattern: Key pattern to invalidate

      Returns:
          Number of invalidated keys



   .. py:method:: clear()
      :async:


      Clear all cache data.

      Returns:
          True if successful, False otherwise



   .. py:method:: get_many(keys)
      :async:


      Get multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          Dictionary mapping keys to values



   .. py:method:: set_many(mapping, ttl = None)
      :async:


      Set multiple values in the cache.

      Args:
          mapping: Dictionary mapping keys to values
          ttl: Time-to-live in seconds

      Returns:
          True if successful, False otherwise



   .. py:method:: delete_many(keys)
      :async:


      Delete multiple values from the cache.

      Args:
          keys: List of cache keys

      Returns:
          Number of deleted keys



   .. py:method:: incr(key, amount = 1, default = 0, ttl = None)
      :async:


      Increment a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to increment by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          New counter value



   .. py:method:: decr(key, amount = 1, default = 0, ttl = None)
      :async:


      Decrement a counter in the cache.

      Args:
          key: Cache key
          amount: Amount to decrement by
          default: Default value if key doesn't exist
          ttl: Time-to-live in seconds

      Returns:
          New counter value



   .. py:method:: _serialize(value)

      Serialize a value for storage.

      Args:
          value: Value to serialize

      Returns:
          Serialized value



   .. py:method:: _deserialize(value)

      Deserialize a value from storage.

      Args:
          value: Serialized value

      Returns:
          Deserialized value



   .. py:method:: get_ttl(key)
      :async:


      Get the remaining TTL for a key.

      Args:
          key: Cache key

      Returns:
          Remaining TTL in seconds or None if key doesn't exist



   .. py:method:: add_to_set(key, member)
      :async:


      Add a member to a Redis set.

      Args:
          key: Set key
          member: Member to add

      Returns:
          True if successful, False otherwise



   .. py:method:: add_many_to_set(key, members)
      :async:


      Add multiple members to a Redis set.

      Args:
          key: Set key
          members: Members to add

      Returns:
          Number of members added



   .. py:method:: get_set_members(key)
      :async:


      Get all members of a Redis set.

      Args:
          key: Set key

      Returns:
          List of set members



   .. py:method:: remove_from_set(key, member)
      :async:


      Remove a member from a Redis set.

      Args:
          key: Set key
          member: Member to remove

      Returns:
          True if successful, False otherwise



