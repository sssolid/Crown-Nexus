app.core.cache.manager
======================

.. py:module:: app.core.cache.manager


Attributes
----------

.. autoapisummary::

   app.core.cache.manager.logger
   app.core.cache.manager.T
   app.core.cache.manager.HAS_METRICS
   app.core.cache.manager.cache_manager


Classes
-------

.. autoapisummary::

   app.core.cache.manager.CacheManager


Functions
---------

.. autoapisummary::

   app.core.cache.manager.initialize_cache


Module Contents
---------------

.. py:data:: logger

.. py:data:: T

.. py:data:: HAS_METRICS
   :value: True


.. py:class:: CacheManager

   .. py:attribute:: _initialized
      :value: False



   .. py:attribute:: backends
      :type:  Dict[str, app.core.cache.base.CacheBackend]


   .. py:method:: get_backend(name = None)

      Get a cache backend by name.

      Args:
          name: The backend name. If None, uses the default backend.

      Returns:
          The cache backend instance.

      Raises:
          ValueError: If the backend is not configured.



   .. py:method:: initialize()
      :async:


      Initialize the cache manager and backends.



   .. py:method:: shutdown()
      :async:


      Shutdown all cache backends.



   .. py:method:: get(key, default = None, backend = None)
      :async:


      Get a value from the cache.

      Args:
          key: The cache key.
          default: Default value if key doesn't exist.
          backend: Optional backend name.

      Returns:
          The cached value or default.



   .. py:method:: set(key, value, ttl = None, backend = None)
      :async:


      Set a value in the cache.

      Args:
          key: The cache key.
          value: The value to cache.
          ttl: Optional time-to-live in seconds.
          backend: Optional backend name.

      Returns:
          True if successful, False otherwise.



   .. py:method:: delete(key, backend = None)
      :async:


      Delete a value from the cache.

      Args:
          key: The cache key.
          backend: Optional backend name.

      Returns:
          True if successful, False otherwise.



   .. py:method:: exists(key, backend = None)
      :async:


      Check if a key exists in the cache.

      Args:
          key: The cache key.
          backend: Optional backend name.

      Returns:
          True if key exists, False otherwise.



   .. py:method:: clear(backend = None)
      :async:


      Clear the cache.

      Args:
          backend: Optional backend name.

      Returns:
          True if successful, False otherwise.



   .. py:method:: invalidate_pattern(pattern, backend = None)
      :async:


      Invalidate cache keys matching a pattern.

      Args:
          pattern: The pattern to match.
          backend: Optional backend name.

      Returns:
          Number of invalidated keys.



   .. py:method:: get_many(keys, backend = None)
      :async:


      Get multiple values from the cache.

      Args:
          keys: List of cache keys.
          backend: Optional backend name.

      Returns:
          Dictionary of key-value pairs.



   .. py:method:: set_many(mapping, ttl = None, backend = None)
      :async:


      Set multiple values in the cache.

      Args:
          mapping: Dictionary of key-value pairs.
          ttl: Optional time-to-live in seconds.
          backend: Optional backend name.

      Returns:
          True if successful, False otherwise.



   .. py:method:: delete_many(keys, backend = None)
      :async:


      Delete multiple values from the cache.

      Args:
          keys: List of cache keys.
          backend: Optional backend name.

      Returns:
          Number of deleted keys.



   .. py:method:: incr(key, amount = 1, default = 0, ttl = None, backend = None)
      :async:


      Increment a counter.

      Args:
          key: The cache key.
          amount: Amount to increment by.
          default: Default value if key doesn't exist.
          ttl: Optional time-to-live in seconds.
          backend: Optional backend name.

      Returns:
          New counter value.



   .. py:method:: decr(key, amount = 1, default = 0, ttl = None, backend = None)
      :async:


      Decrement a counter.

      Args:
          key: The cache key.
          amount: Amount to decrement by.
          default: Default value if key doesn't exist.
          ttl: Optional time-to-live in seconds.
          backend: Optional backend name.

      Returns:
          New counter value.



.. py:data:: cache_manager

.. py:function:: initialize_cache()
   :async:


   Initialize the cache system.


