app.core.pagination.providers.cursor
====================================

.. py:module:: app.core.pagination.providers.cursor


Attributes
----------

.. autoapisummary::

   app.core.pagination.providers.cursor.logger
   app.core.pagination.providers.cursor.T
   app.core.pagination.providers.cursor.R


Classes
-------

.. autoapisummary::

   app.core.pagination.providers.cursor.CursorPaginationProvider


Module Contents
---------------

.. py:data:: logger

.. py:data:: T

.. py:data:: R

.. py:class:: CursorPaginationProvider(db, model_class)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`T`\ , :py:obj:`R`\ ], :py:obj:`app.core.pagination.base.PaginationProvider`\ [\ :py:obj:`T`\ , :py:obj:`R`\ ]


   Cursor-based pagination provider implementation.

   This provider implements pagination using the cursor-based approach,
   which is suitable for large datasets and continuous scrolling interfaces.


   .. py:attribute:: db


   .. py:attribute:: model_class


   .. py:attribute:: logger


   .. py:method:: paginate_with_offset(query, params, transform_func = None)
      :abstractmethod:

      :async:


      Offset-based pagination is not supported by this provider.

      Args:
          query: SQLAlchemy select query
          params: Offset pagination parameters
          transform_func: Optional function to transform each result item

      Raises:
          NotImplementedError: Always raised because this method is not supported



   .. py:method:: paginate_with_cursor(query, params, transform_func = None)
      :async:


      Paginate query results using cursor-based pagination.

      Args:
          query: SQLAlchemy select query
          params: Cursor pagination parameters
          transform_func: Optional function to transform each result item

      Returns:
          PaginationResult with paginated items and metadata

      Raises:
          InvalidCursorException: If the cursor is invalid
          InvalidSortFieldException: If a sort field is invalid



   .. py:method:: _apply_sorting(query, sort_fields)

      Apply sorting to the query based on sort fields.

      Args:
          query: SQLAlchemy select query
          sort_fields: List of fields to sort by

      Returns:
          Query with sorting applied

      Raises:
          InvalidSortFieldException: If a sort field is invalid



   .. py:method:: _apply_cursor_filter(query, sort_fields, cursor_values)

      Apply cursor filtering to the query.

      Args:
          query: SQLAlchemy select query
          sort_fields: List of fields to sort by
          cursor_values: Decoded cursor values

      Returns:
          Query with cursor filtering applied

      Raises:
          InvalidSortFieldException: If a cursor field is invalid



   .. py:method:: _encode_cursor(item, sort_fields)

      Encode a cursor from an item and sort fields.

      Args:
          item: The item to encode as a cursor
          sort_fields: List of fields to include in the cursor

      Returns:
          Base64 encoded cursor string



   .. py:method:: _decode_cursor(cursor)

      Decode a cursor into field values.

      Args:
          cursor: Base64 encoded cursor string

      Returns:
          Dictionary of field values

      Raises:
          ValueError: If the cursor cannot be decoded



