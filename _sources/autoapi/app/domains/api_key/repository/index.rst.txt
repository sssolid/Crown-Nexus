app.domains.api_key.repository
==============================

.. py:module:: app.domains.api_key.repository


Classes
-------

.. autoapisummary::

   app.domains.api_key.repository.ApiKeyRepository


Module Contents
---------------

.. py:class:: ApiKeyRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.api_key.models.ApiKey`\ , :py:obj:`uuid.UUID`\ ]


   Repository for API Key entity operations.

   Provides methods for querying, creating, updating, and deleting
   API Key entities, extending the generic BaseRepository.


   .. py:method:: find_by_key_id(key_id)
      :async:


      Find an API key by its key ID.

      Args:
          key_id: The key ID to search for.

      Returns:
          The API key if found, None otherwise.



   .. py:method:: get_by_user(user_id, active_only = True)
      :async:


      Get API keys for a specific user.

      Args:
          user_id: The user ID to filter by.
          active_only: Whether to include only active keys.

      Returns:
          List of API keys for the user.



   .. py:method:: create_api_key(user_id, name, permissions = None, extra_metadata = None, expires_in_days = None)
      :async:


      Create a new API key.

      Args:
          user_id: ID of the user who will own the key.
          name: Human-readable name for the key.
          permissions: Optional list of permissions to grant.
          extra_metadata: Optional additional metadata.
          expires_in_days: Optional number of days until expiration.

      Returns:
          Tuple containing (API key entity, secret).

      Raises:
          ResourceNotFoundException: If the user doesn't exist.



   .. py:method:: verify_api_key(key_id, secret)
      :async:


      Verify an API key by checking the key ID and secret.

      Args:
          key_id: The key ID to verify.
          secret: The secret to verify.

      Returns:
          The API key if valid, None otherwise.



   .. py:method:: revoke_api_key(api_key_id)
      :async:


      Revoke an API key.

      Args:
          api_key_id: The API key ID to revoke.

      Returns:
          True if the key was revoked, False otherwise.



   .. py:method:: revoke_all_user_keys(user_id)
      :async:


      Revoke all API keys for a user.

      Args:
          user_id: The user ID whose keys to revoke.

      Returns:
          Number of keys revoked.



   .. py:method:: clean_expired_keys()
      :async:


      Clean up expired API keys.

      Returns:
          Number of keys deactivated.



   .. py:method:: ensure_exists(api_key_id)
      :async:


      Ensure an API key exists by ID, raising an exception if not found.

      Args:
          api_key_id: The API key ID to check.

      Returns:
          The API key if found.

      Raises:
          ResourceNotFoundException: If the API key is not found.



   .. py:method:: _hash_secret(secret)

      Hash an API key secret.

      Args:
          secret: The secret to hash.

      Returns:
          The hashed secret.



