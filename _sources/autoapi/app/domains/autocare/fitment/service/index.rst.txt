app.domains.autocare.fitment.service
====================================

.. py:module:: app.domains.autocare.fitment.service


Attributes
----------

.. autoapisummary::

   app.domains.autocare.fitment.service.logger


Classes
-------

.. autoapisummary::

   app.domains.autocare.fitment.service.FitmentMappingService


Module Contents
---------------

.. py:data:: logger

.. py:class:: FitmentMappingService(db)

   Service for fitment mapping operations.

   Provides methods for mapping products to autocare database entities.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:attribute:: product_repository


   .. py:method:: import_from_aces(file_path, params)
      :async:


      Import fitment mappings from an ACES XML file.

      Args:
          file_path: Path to the ACES XML file.
          params: Import parameters.

      Returns:
          Dict with import results information.



   .. py:method:: create_mapping(data, user_id = None)
      :async:


      Create a new fitment mapping.

      Args:
          data: The mapping data.
          user_id: Optional ID of the user creating the mapping.

      Returns:
          The created mapping.

      Raises:
          ResourceNotFoundException: If the product is not found.



   .. py:method:: update_mapping(mapping_id, data, user_id = None)
      :async:


      Update an existing fitment mapping.

      Args:
          mapping_id: The mapping ID.
          data: The updated mapping data.
          user_id: Optional ID of the user updating the mapping.

      Returns:
          The updated mapping.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: delete_mapping(mapping_id, user_id = None)
      :async:


      Delete a fitment mapping.

      Args:
          mapping_id: The mapping ID.
          user_id: Optional ID of the user deleting the mapping.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: get_mapping(mapping_id)
      :async:


      Get detailed information about a fitment mapping.

      Args:
          mapping_id: The mapping ID.

      Returns:
          Dict with detailed mapping information.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: search_mappings(product_query = None, is_validated = None, is_manual = None, page = 1, page_size = 20)
      :async:


      Search for fitment mappings with various filters.

      Args:
          product_query: Optional product part number or name to search.
          is_validated: Optional validation status filter.
          is_manual: Optional manual entry filter.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_mapping_history(mapping_id, page = 1, page_size = 20)
      :async:


      Get history for a specific mapping.

      Args:
          mapping_id: The mapping ID.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: find_mappings_by_product(product_id, page = 1, page_size = 20)
      :async:


      Find fitment mappings for a specific product.

      Args:
          product_id: The product ID.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



