app.domains.autocare
====================

.. py:module:: app.domains.autocare


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/app/domains/autocare/exceptions/index
   /autoapi/app/domains/autocare/fitment/index
   /autoapi/app/domains/autocare/handlers/index
   /autoapi/app/domains/autocare/padb/index
   /autoapi/app/domains/autocare/pcdb/index
   /autoapi/app/domains/autocare/qdb/index
   /autoapi/app/domains/autocare/schemas/index
   /autoapi/app/domains/autocare/service/index
   /autoapi/app/domains/autocare/vcdb/index


Exceptions
----------

.. autoapisummary::

   app.domains.autocare.AutocareException
   app.domains.autocare.InvalidVehicleDataException
   app.domains.autocare.InvalidPartDataException
   app.domains.autocare.MappingNotFoundException
   app.domains.autocare.ImportException
   app.domains.autocare.ExportException


Classes
-------

.. autoapisummary::

   app.domains.autocare.VCdbService
   app.domains.autocare.PCdbService
   app.domains.autocare.PAdbService
   app.domains.autocare.QdbService
   app.domains.autocare.FitmentMappingService
   app.domains.autocare.AutocareImportParams
   app.domains.autocare.AutocareExportParams
   app.domains.autocare.FitmentSearchParams


Package Contents
----------------

.. py:class:: VCdbService(db)

   Service for interacting with VCdb (Vehicle Component Database) data.

   This service provides methods for querying, importing, and managing
   vehicle data and their components according to Auto Care standards.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:method:: get_version()
      :async:


      Get the current VCdb database version.

      Returns:
          String representation of the version date or a message indicating
          no version information is available



   .. py:method:: update_database(file_path)
      :async:


      Update the VCdb database from a file.

      Args:
          file_path: Path to the file containing VCdb data

      Returns:
          Dictionary with status information about the update operation

      Raises:
          VCdbException: If the update operation fails



   .. py:method:: import_from_aces(file_path, params)
      :async:


      Import vehicle data from an ACES XML file.

      Args:
          file_path: Path to the ACES XML file
          params: Import parameters for controlling the import process

      Returns:
          Dictionary with status information about the import operation

      Raises:
          VCdbException: If the import operation fails



   .. py:method:: get_years()
      :async:


      Get all available vehicle years.

      Returns:
          List of dictionaries containing year information



   .. py:method:: get_year_range()
      :async:


      Get the range of available vehicle years.

      Returns:
          Tuple containing the minimum and maximum years in the database



   .. py:method:: get_makes()
      :async:


      Get all available vehicle makes.

      Returns:
          List of dictionaries containing make information



   .. py:method:: get_makes_by_year(year)
      :async:


      Get all makes available for a specific year.

      Args:
          year: The vehicle year to filter by

      Returns:
          List of dictionaries containing make information for the specified year



   .. py:method:: search_makes(search_term)
      :async:


      Search for makes by name.

      Args:
          search_term: The search term to find in make names

      Returns:
          List of dictionaries containing matching make information



   .. py:method:: get_make_by_id(make_id)
      :async:


      Get a specific make by ID.

      Args:
          make_id: The make ID to retrieve

      Returns:
          Dictionary containing make information

      Raises:
          ResourceNotFoundException: If make with the specified ID is not found



   .. py:method:: get_models_by_year_make(year, make_id)
      :async:


      Get all models for a specific year and make.

      Args:
          year: The vehicle year
          make_id: The make ID

      Returns:
          List of dictionaries containing model information



   .. py:method:: search_models(search_term)
      :async:


      Search for models by name.

      Args:
          search_term: The search term to find in model names

      Returns:
          List of dictionaries containing matching model information



   .. py:method:: get_model_by_id(model_id)
      :async:


      Get a specific model by ID.

      Args:
          model_id: The model ID to retrieve

      Returns:
          Dictionary containing model information

      Raises:
          ResourceNotFoundException: If model with the specified ID is not found



   .. py:method:: get_submodels_by_base_vehicle(base_vehicle_id)
      :async:


      Get all submodels for a specific base vehicle.

      Args:
          base_vehicle_id: The base vehicle ID

      Returns:
          List of dictionaries containing submodel information



   .. py:method:: get_all_submodels()
      :async:


      Get all available submodels.

      Returns:
          List of dictionaries containing submodel information



   .. py:method:: search_submodels(search_term)
      :async:


      Search for submodels by name.

      Args:
          search_term: The search term to find in submodel names

      Returns:
          List of dictionaries containing matching submodel information



   .. py:method:: get_vehicle_types()
      :async:


      Get all available vehicle types.

      Returns:
          List of dictionaries containing vehicle type information



   .. py:method:: get_vehicle_types_by_group(group_id)
      :async:


      Get all vehicle types within a specific group.

      Args:
          group_id: The vehicle type group ID

      Returns:
          List of dictionaries containing vehicle type information



   .. py:method:: get_regions()
      :async:


      Get all top-level regions.

      Returns:
          List of dictionaries containing region information



   .. py:method:: get_regions_by_parent(parent_id)
      :async:


      Get all subregions for a parent region.

      Args:
          parent_id: The parent region ID

      Returns:
          List of dictionaries containing subregion information



   .. py:method:: get_base_vehicle(base_vehicle_id)
      :async:


      Get a specific base vehicle by ID.

      Args:
          base_vehicle_id: The base vehicle ID to retrieve

      Returns:
          Dictionary containing base vehicle information

      Raises:
          ResourceNotFoundException: If base vehicle with the specified ID is not found



   .. py:method:: find_base_vehicle(year_id, make_id, model_id)
      :async:


      Find a base vehicle by its component IDs.

      Args:
          year_id: The year ID
          make_id: The make ID
          model_id: The model ID

      Returns:
          Dictionary containing base vehicle information or None if not found



   .. py:method:: search_base_vehicles(year = None, make = None, model = None, page = 1, page_size = 20)
      :async:


      Search for base vehicles by criteria.

      Args:
          year: Optional year to filter by
          make: Optional make name pattern to filter by
          model: Optional model name pattern to filter by
          page: Page number for pagination
          page_size: Number of items per page

      Returns:
          Dictionary containing search results and pagination information



   .. py:method:: search_vehicles(year = None, make = None, model = None, submodel = None, body_type = None, engine_config = None, transmission_type = None, page = 1, page_size = 20)
      :async:


      Search for vehicles by criteria.

      Args:
          year: Optional year to filter by
          make: Optional make name pattern to filter by
          model: Optional model name pattern to filter by
          submodel: Optional submodel name pattern to filter by
          body_type: Optional body type pattern to filter by
          engine_config: Optional engine configuration ID to filter by
          transmission_type: Optional transmission type ID to filter by
          page: Page number for pagination
          page_size: Number of items per page

      Returns:
          Dictionary containing search results and pagination information



   .. py:method:: get_vehicle_by_id(vehicle_id)
      :async:


      Get a specific vehicle by ID.

      Args:
          vehicle_id: The vehicle ID to retrieve

      Returns:
          Dictionary containing basic vehicle information

      Raises:
          ResourceNotFoundException: If vehicle with the specified ID is not found



   .. py:method:: get_vehicle_details(vehicle_id)
      :async:


      Get detailed information about a specific vehicle.

      Args:
          vehicle_id: The vehicle ID to retrieve

      Returns:
          Dictionary containing detailed vehicle information including
          engines, transmissions, drive types, and body styles

      Raises:
          ResourceNotFoundException: If vehicle with the specified ID is not found



   .. py:method:: get_vehicle_configurations(vehicle_id)
      :async:


      Get all component configurations for a specific vehicle.

      Args:
          vehicle_id: The vehicle ID to retrieve configurations for

      Returns:
          Dictionary containing component configurations grouped by type

      Raises:
          ResourceNotFoundException: If vehicle with the specified ID is not found



   .. py:method:: get_engine_config(engine_config_id)
      :async:


      Get detailed information about a specific engine configuration.

      Args:
          engine_config_id: The engine configuration ID to retrieve

      Returns:
          Dictionary containing detailed engine configuration information

      Raises:
          ResourceNotFoundException: If engine configuration is not found



   .. py:method:: search_engine_configs(engine_base_id = None, fuel_type_id = None, aspiration_id = None, page = 1, page_size = 20)
      :async:


      Search for engine configurations by criteria.

      Args:
          engine_base_id: Optional engine base ID to filter by
          fuel_type_id: Optional fuel type ID to filter by
          aspiration_id: Optional aspiration ID to filter by
          page: Page number for pagination
          page_size: Number of items per page

      Returns:
          Dictionary containing search results and pagination information



   .. py:method:: get_transmission(transmission_id)
      :async:


      Get detailed information about a specific transmission.

      Args:
          transmission_id: The transmission ID to retrieve

      Returns:
          Dictionary containing detailed transmission information

      Raises:
          ResourceNotFoundException: If transmission is not found



   .. py:method:: search_transmissions(transmission_type_id = None, transmission_num_speeds_id = None, transmission_control_type_id = None, page = 1, page_size = 20)
      :async:


      Search for transmissions by criteria.

      Args:
          transmission_type_id: Optional transmission type ID to filter by
          transmission_num_speeds_id: Optional number of speeds ID to filter by
          transmission_control_type_id: Optional control type ID to filter by
          page: Page number for pagination
          page_size: Number of items per page

      Returns:
          Dictionary containing search results and pagination information



   .. py:method:: get_drive_types()
      :async:


      Get all available drive types.

      Returns:
          List of dictionaries containing drive type information



   .. py:method:: get_body_style_config(body_style_config_id)
      :async:


      Get detailed information about a specific body style configuration.

      Args:
          body_style_config_id: The body style configuration ID to retrieve

      Returns:
          Dictionary containing detailed body style configuration information

      Raises:
          ResourceNotFoundException: If body style configuration is not found



   .. py:method:: get_brake_config(brake_config_id)
      :async:


      Get detailed information about a specific brake configuration.

      Args:
          brake_config_id: The brake configuration ID to retrieve

      Returns:
          Dictionary containing detailed brake configuration information

      Raises:
          ResourceNotFoundException: If brake configuration is not found



   .. py:method:: get_wheel_bases()
      :async:


      Get all available wheel bases.

      Returns:
          List of dictionaries containing wheel base information



.. py:class:: PCdbService(db)

   Service for PCdb operations.

   Provides methods for importing, exporting, and querying parts data.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:method:: get_version()
      :async:


      Get the current version of the PCdb database.

      Returns:
          The version date as a string.



   .. py:method:: update_database(file_path)
      :async:


      Update the PCdb database from a file.

      Args:
          file_path: Path to the update file.

      Returns:
          Dict with update results information.



   .. py:method:: import_from_pies(file_path, params)
      :async:


      Import parts data from a PIES XML file.

      Args:
          file_path: Path to the PIES XML file.
          params: Import parameters.

      Returns:
          Dict with import results information.



   .. py:method:: get_categories()
      :async:


      Get all parts categories.

      Returns:
          List of categories with their IDs and names.



   .. py:method:: get_subcategories_by_category(category_id)
      :async:


      Get subcategories for a specific category.

      Args:
          category_id: The category ID.

      Returns:
          List of subcategories with their IDs and names.



   .. py:method:: search_parts(search_term, categories = None, page = 1, page_size = 20)
      :async:


      Search for parts with optional category filters.

      Args:
          search_term: The search term.
          categories: Optional list of category IDs to filter by.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_part_details(part_terminology_id)
      :async:


      Get detailed information about a part.

      Args:
          part_terminology_id: The part terminology ID.

      Returns:
          Dict with detailed part information.



.. py:class:: PAdbService(db)

   Service for PAdb operations.

   Provides methods for importing, exporting, and querying parts attribute data.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:method:: get_version()
      :async:


      Get the current version of the PAdb database.

      Returns:
          The version date as a string.



   .. py:method:: update_database(file_path)
      :async:


      Update the PAdb database from a file.

      Args:
          file_path: Path to the update file.

      Returns:
          Dict with update results information.



   .. py:method:: search_attributes(search_term, page = 1, page_size = 20)
      :async:


      Search for part attributes.

      Args:
          search_term: The search term.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_attribute_details(pa_id)
      :async:


      Get detailed information about a part attribute.

      Args:
          pa_id: The part attribute ID.

      Returns:
          Dict with detailed attribute information.



   .. py:method:: get_part_attributes(part_terminology_id)
      :async:


      Get attributes for a specific part.

      Args:
          part_terminology_id: The part terminology ID.

      Returns:
          Dict with part attributes information.



.. py:class:: QdbService(db)

   Service for Qdb operations.

   Provides methods for importing, exporting, and querying qualifier data.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:method:: get_version()
      :async:


      Get the current version of the Qdb database.

      Returns:
          The version date as a string.



   .. py:method:: update_database(file_path)
      :async:


      Update the Qdb database from a file.

      Args:
          file_path: Path to the update file.

      Returns:
          Dict with update results information.



   .. py:method:: get_qualifier_types()
      :async:


      Get all qualifier types.

      Returns:
          List of qualifier types with their IDs and names.



   .. py:method:: get_languages()
      :async:


      Get all languages.

      Returns:
          List of languages with their IDs and names.



   .. py:method:: search_qualifiers(search_term, qualifier_type_id = None, language_id = None, page = 1, page_size = 20)
      :async:


      Search for qualifiers with optional filters.

      Args:
          search_term: The search term.
          qualifier_type_id: Optional qualifier type ID to filter by.
          language_id: Optional language ID to search translations.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_qualifier_details(qualifier_id)
      :async:


      Get detailed information about a qualifier.

      Args:
          qualifier_id: The qualifier ID.

      Returns:
          Dict with detailed qualifier information.



.. py:class:: FitmentMappingService(db)

   Service for fitment mapping operations.

   Provides methods for mapping products to autocare database entities.


   .. py:attribute:: db


   .. py:attribute:: repository


   .. py:attribute:: product_repository


   .. py:method:: import_from_aces(file_path, params)
      :async:


      Import fitment mappings from an ACES XML file.

      Args:
          file_path: Path to the ACES XML file.
          params: Import parameters.

      Returns:
          Dict with import results information.



   .. py:method:: create_mapping(data, user_id = None)
      :async:


      Create a new fitment mapping.

      Args:
          data: The mapping data.
          user_id: Optional ID of the user creating the mapping.

      Returns:
          The created mapping.

      Raises:
          ResourceNotFoundException: If the product is not found.



   .. py:method:: update_mapping(mapping_id, data, user_id = None)
      :async:


      Update an existing fitment mapping.

      Args:
          mapping_id: The mapping ID.
          data: The updated mapping data.
          user_id: Optional ID of the user updating the mapping.

      Returns:
          The updated mapping.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: delete_mapping(mapping_id, user_id = None)
      :async:


      Delete a fitment mapping.

      Args:
          mapping_id: The mapping ID.
          user_id: Optional ID of the user deleting the mapping.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: get_mapping(mapping_id)
      :async:


      Get detailed information about a fitment mapping.

      Args:
          mapping_id: The mapping ID.

      Returns:
          Dict with detailed mapping information.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: search_mappings(product_query = None, is_validated = None, is_manual = None, page = 1, page_size = 20)
      :async:


      Search for fitment mappings with various filters.

      Args:
          product_query: Optional product part number or name to search.
          is_validated: Optional validation status filter.
          is_manual: Optional manual entry filter.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_mapping_history(mapping_id, page = 1, page_size = 20)
      :async:


      Get history for a specific mapping.

      Args:
          mapping_id: The mapping ID.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.

      Raises:
          MappingNotFoundException: If the mapping is not found.



   .. py:method:: find_mappings_by_product(product_id, page = 1, page_size = 20)
      :async:


      Find fitment mappings for a specific product.

      Args:
          product_id: The product ID.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



.. py:class:: AutocareImportParams

   Bases: :py:obj:`pydantic.BaseModel`


   Parameters for importing data.

   Attributes:
       file_path: Path to the import file
       format: Format of the import file
       mode: Import mode
       data_type: Type of data to import
       validate: Whether to validate data before import
       options: Additional import options


   .. py:attribute:: file_path
      :type:  str


   .. py:attribute:: format
      :type:  FileFormat


   .. py:attribute:: mode
      :type:  ImportMode


   .. py:attribute:: data_type
      :type:  DataType


   .. py:attribute:: validate
      :type:  bool


   .. py:attribute:: options
      :type:  Optional[Dict[str, Any]]


.. py:class:: AutocareExportParams

   Bases: :py:obj:`pydantic.BaseModel`


   Parameters for exporting data.

   Attributes:
       file_path: Path to the export file
       format: Format of the export file
       data_type: Type of data to export
       filters: Filters to apply to the data
       options: Additional export options


   .. py:attribute:: file_path
      :type:  str


   .. py:attribute:: format
      :type:  FileFormat


   .. py:attribute:: data_type
      :type:  DataType


   .. py:attribute:: filters
      :type:  Optional[Dict[str, Any]]


   .. py:attribute:: options
      :type:  Optional[Dict[str, Any]]


.. py:class:: FitmentSearchParams

   Bases: :py:obj:`pydantic.BaseModel`


   Parameters for searching fitment data.

   Attributes:
       year: Vehicle year
       make: Vehicle make
       model: Vehicle model
       submodel: Vehicle submodel
       part_number: Part number
       part_type: Part type
       brand: Brand
       page: Page number
       page_size: Page size


   .. py:attribute:: year
      :type:  Optional[int]


   .. py:attribute:: make
      :type:  Optional[str]


   .. py:attribute:: model
      :type:  Optional[str]


   .. py:attribute:: submodel
      :type:  Optional[str]


   .. py:attribute:: part_number
      :type:  Optional[str]


   .. py:attribute:: part_type
      :type:  Optional[str]


   .. py:attribute:: brand
      :type:  Optional[str]


   .. py:attribute:: page
      :type:  int


   .. py:attribute:: page_size
      :type:  int


   .. py:method:: validate_search_criteria()

      Validate that at least one search criterion is provided.

      Returns:
          The validated model

      Raises:
          ValueError: If no search criteria are provided



.. py:exception:: AutocareException(message, details = None)

   Bases: :py:obj:`app.core.exceptions.BusinessException`


   Base exception for all autocare domain exceptions.


.. py:exception:: InvalidVehicleDataException(message = 'Invalid vehicle data', details = None)

   Bases: :py:obj:`AutocareException`


   Raised when vehicle data is invalid or incomplete.


.. py:exception:: InvalidPartDataException(message = 'Invalid part data', details = None)

   Bases: :py:obj:`AutocareException`


   Raised when part data is invalid or incomplete.


.. py:exception:: MappingNotFoundException(resource_id, details = None)

   Bases: :py:obj:`app.core.exceptions.ResourceNotFoundException`


   Raised when a requested fitment mapping cannot be found.


.. py:exception:: ImportException(message = 'Failed to import data', details = None)

   Bases: :py:obj:`AutocareException`


   Raised when importing data from ACES or PIES files fails.


.. py:exception:: ExportException(message = 'Failed to export data', details = None)

   Bases: :py:obj:`AutocareException`


   Raised when exporting data to ACES or PIES files fails.


