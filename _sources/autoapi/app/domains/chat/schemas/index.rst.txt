app.domains.chat.schemas
========================

.. py:module:: app.domains.chat.schemas


Classes
-------

.. autoapisummary::

   app.domains.chat.schemas.CommandType
   app.domains.chat.schemas.WebSocketCommand
   app.domains.chat.schemas.JoinRoomCommand
   app.domains.chat.schemas.LeaveRoomCommand
   app.domains.chat.schemas.SendMessageCommand
   app.domains.chat.schemas.ReadMessagesCommand
   app.domains.chat.schemas.TypingCommand
   app.domains.chat.schemas.FetchHistoryCommand
   app.domains.chat.schemas.ReactionCommand
   app.domains.chat.schemas.EditMessageCommand
   app.domains.chat.schemas.DeleteMessageCommand
   app.domains.chat.schemas.WebSocketResponse
   app.domains.chat.schemas.ChatRoomBase
   app.domains.chat.schemas.ChatRoomCreate
   app.domains.chat.schemas.ChatRoomUpdate
   app.domains.chat.schemas.ChatRoomInDB
   app.domains.chat.schemas.ChatRoom
   app.domains.chat.schemas.ChatMemberBase
   app.domains.chat.schemas.ChatMemberCreate
   app.domains.chat.schemas.ChatMemberUpdate
   app.domains.chat.schemas.ChatMemberInDB
   app.domains.chat.schemas.ChatMember
   app.domains.chat.schemas.ChatMessageBase
   app.domains.chat.schemas.ChatMessageCreate
   app.domains.chat.schemas.ChatMessageUpdate
   app.domains.chat.schemas.ChatMessageInDB
   app.domains.chat.schemas.ChatMessage
   app.domains.chat.schemas.MessageReactionBase
   app.domains.chat.schemas.MessageReactionCreate
   app.domains.chat.schemas.MessageReactionInDB
   app.domains.chat.schemas.MessageReaction
   app.domains.chat.schemas.UserPresence


Module Contents
---------------

.. py:class:: CommandType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of WebSocket commands.

   Attributes:
       JOIN_ROOM: Join a chat room.
       LEAVE_ROOM: Leave a chat room.
       SEND_MESSAGE: Send a message to a room.
       READ_MESSAGES: Mark messages as read.
       TYPING_START: Indicate the user started typing.
       TYPING_STOP: Indicate the user stopped typing.
       FETCH_HISTORY: Request message history.
       ADD_REACTION: Add a reaction to a message.
       REMOVE_REACTION: Remove a reaction from a message.
       EDIT_MESSAGE: Edit a message.
       DELETE_MESSAGE: Delete a message.


   .. py:attribute:: JOIN_ROOM
      :value: 'join_room'



   .. py:attribute:: LEAVE_ROOM
      :value: 'leave_room'



   .. py:attribute:: SEND_MESSAGE
      :value: 'send_message'



   .. py:attribute:: READ_MESSAGES
      :value: 'read_messages'



   .. py:attribute:: TYPING_START
      :value: 'typing_start'



   .. py:attribute:: TYPING_STOP
      :value: 'typing_stop'



   .. py:attribute:: FETCH_HISTORY
      :value: 'fetch_history'



   .. py:attribute:: ADD_REACTION
      :value: 'add_reaction'



   .. py:attribute:: REMOVE_REACTION
      :value: 'remove_reaction'



   .. py:attribute:: EDIT_MESSAGE
      :value: 'edit_message'



   .. py:attribute:: DELETE_MESSAGE
      :value: 'delete_message'



.. py:class:: WebSocketCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Base schema for WebSocket commands.

   Attributes:
       command: Type of command.
       room_id: ID of the chat room.
       data: Command-specific data.


   .. py:attribute:: command
      :type:  CommandType


   .. py:attribute:: room_id
      :type:  Optional[str]


   .. py:attribute:: data
      :type:  Dict[str, Any]


.. py:class:: JoinRoomCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for joining a chat room.

   Attributes:
       room_id: ID of the room to join.


   .. py:attribute:: room_id
      :type:  str


.. py:class:: LeaveRoomCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for leaving a chat room.

   Attributes:
       room_id: ID of the room to leave.


   .. py:attribute:: room_id
      :type:  str


.. py:class:: SendMessageCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for sending a message.

   Attributes:
       room_id: ID of the room to send to.
       content: Message content.
       message_type: Type of message.
       extra_metadata: Additional message metadata.


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: content
      :type:  str


   .. py:attribute:: message_type
      :type:  app.domains.chat.models.MessageType


   .. py:attribute:: extra_metadata
      :type:  Dict[str, Any]


.. py:class:: ReadMessagesCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for marking messages as read.

   Attributes:
       room_id: ID of the room.
       last_read_id: ID of the last read message.


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: last_read_id
      :type:  str


.. py:class:: TypingCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for typing indicators.

   Attributes:
       room_id: ID of the room.


   .. py:attribute:: room_id
      :type:  str


.. py:class:: FetchHistoryCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for fetching message history.

   Attributes:
       room_id: ID of the room.
       before_id: ID to fetch messages before.
       limit: Maximum number of messages to fetch.


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: before_id
      :type:  Optional[str]


   .. py:attribute:: limit
      :type:  int


.. py:class:: ReactionCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for message reactions.

   Attributes:
       room_id: ID of the room.
       message_id: ID of the message.
       reaction: Reaction string (e.g., emoji).


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: message_id
      :type:  str


   .. py:attribute:: reaction
      :type:  str


.. py:class:: EditMessageCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for editing a message.

   Attributes:
       room_id: ID of the room.
       message_id: ID of the message to edit.
       content: New message content.


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: message_id
      :type:  str


   .. py:attribute:: content
      :type:  str


.. py:class:: DeleteMessageCommand

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for deleting a message.

   Attributes:
       room_id: ID of the room.
       message_id: ID of the message to delete.


   .. py:attribute:: room_id
      :type:  str


   .. py:attribute:: message_id
      :type:  str


.. py:class:: WebSocketResponse

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for WebSocket responses.

   Attributes:
       type: Response type.
       success: Whether the operation was successful.
       error: Error message if not successful.
       data: Response data.


   .. py:attribute:: type
      :type:  str


   .. py:attribute:: success
      :type:  bool


   .. py:attribute:: error
      :type:  Optional[str]


   .. py:attribute:: data
      :type:  Dict[str, Any]


.. py:class:: ChatRoomBase

   Bases: :py:obj:`pydantic.BaseModel`


   Base schema for ChatRoom data.

   Attributes:
       name: Room name (might be null for direct chats).
       type: Type of chat room.
       company_id: ID of the associated company.
       is_active: Whether the room is active.
       extra_metadata: Additional metadata about the room.


   .. py:attribute:: name
      :type:  Optional[str]


   .. py:attribute:: type
      :type:  app.domains.chat.models.ChatRoomType


   .. py:attribute:: company_id
      :type:  Optional[uuid.UUID]


   .. py:attribute:: is_active
      :type:  bool


   .. py:attribute:: extra_metadata
      :type:  Dict[str, Any]


.. py:class:: ChatRoomCreate

   Bases: :py:obj:`ChatRoomBase`


   Schema for creating a new ChatRoom.


.. py:class:: ChatRoomUpdate

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for updating an existing ChatRoom.

   All fields are optional to allow partial updates.


   .. py:attribute:: name
      :type:  Optional[str]


   .. py:attribute:: is_active
      :type:  Optional[bool]


   .. py:attribute:: extra_metadata
      :type:  Optional[Dict[str, Any]]


.. py:class:: ChatRoomInDB

   Bases: :py:obj:`ChatRoomBase`


   Schema for ChatRoom data as stored in the database.

   Includes database-specific fields like ID and timestamps.


   .. py:attribute:: id
      :type:  uuid.UUID


   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: updated_at
      :type:  datetime.datetime


   .. py:attribute:: model_config


.. py:class:: ChatRoom

   Bases: :py:obj:`ChatRoomInDB`


   Schema for complete ChatRoom data in API responses.

   Includes additional computed fields and related entities.


   .. py:attribute:: member_count
      :type:  int


   .. py:attribute:: last_message
      :type:  Optional[Dict[str, Any]]


   .. py:attribute:: company
      :type:  Optional[Dict[str, Any]]


.. py:class:: ChatMemberBase

   Bases: :py:obj:`pydantic.BaseModel`


   Base schema for ChatMember data.

   Attributes:
       room_id: ID of the chat room.
       user_id: ID of the user.
       role: Member's role in the room.
       is_active: Whether the membership is active.


   .. py:attribute:: room_id
      :type:  uuid.UUID


   .. py:attribute:: user_id
      :type:  uuid.UUID


   .. py:attribute:: role
      :type:  app.domains.chat.models.ChatMemberRole


   .. py:attribute:: is_active
      :type:  bool


.. py:class:: ChatMemberCreate

   Bases: :py:obj:`ChatMemberBase`


   Schema for creating a new ChatMember.


.. py:class:: ChatMemberUpdate

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for updating an existing ChatMember.

   All fields are optional to allow partial updates.


   .. py:attribute:: role
      :type:  Optional[app.domains.chat.models.ChatMemberRole]


   .. py:attribute:: is_active
      :type:  Optional[bool]


   .. py:attribute:: last_read_at
      :type:  Optional[datetime.datetime]


.. py:class:: ChatMemberInDB

   Bases: :py:obj:`ChatMemberBase`


   Schema for ChatMember data as stored in the database.

   Includes database-specific fields like ID and timestamps.


   .. py:attribute:: id
      :type:  uuid.UUID


   .. py:attribute:: last_read_at
      :type:  Optional[datetime.datetime]


   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: updated_at
      :type:  datetime.datetime


   .. py:attribute:: model_config


.. py:class:: ChatMember

   Bases: :py:obj:`ChatMemberInDB`


   Schema for complete ChatMember data in API responses.

   Includes related entities like user and room details.


   .. py:attribute:: user
      :type:  Optional[Dict[str, Any]]


   .. py:attribute:: room
      :type:  Optional[Dict[str, Any]]


.. py:class:: ChatMessageBase

   Bases: :py:obj:`pydantic.BaseModel`


   Base schema for ChatMessage data.

   Attributes:
       room_id: ID of the chat room.
       sender_id: ID of the message sender.
       message_type: Type of message.
       content: Message content.
       extra_metadata: Additional metadata about the message.


   .. py:attribute:: room_id
      :type:  uuid.UUID


   .. py:attribute:: sender_id
      :type:  Optional[uuid.UUID]


   .. py:attribute:: message_type
      :type:  app.domains.chat.models.MessageType


   .. py:attribute:: content
      :type:  str


   .. py:attribute:: extra_metadata
      :type:  Dict[str, Any]


.. py:class:: ChatMessageCreate

   Bases: :py:obj:`ChatMessageBase`


   Schema for creating a new ChatMessage.


.. py:class:: ChatMessageUpdate

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for updating an existing ChatMessage.

   All fields are optional to allow partial updates.


   .. py:attribute:: content
      :type:  Optional[str]


   .. py:attribute:: extra_metadata
      :type:  Optional[Dict[str, Any]]


.. py:class:: ChatMessageInDB

   Bases: :py:obj:`ChatMessageBase`


   Schema for ChatMessage data as stored in the database.

   Includes database-specific fields like ID and timestamps.


   .. py:attribute:: id
      :type:  uuid.UUID


   .. py:attribute:: is_deleted
      :type:  bool


   .. py:attribute:: deleted_at
      :type:  Optional[datetime.datetime]


   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: updated_at
      :type:  datetime.datetime


   .. py:attribute:: model_config


.. py:class:: ChatMessage

   Bases: :py:obj:`ChatMessageInDB`


   Schema for complete ChatMessage data in API responses.

   Includes additional fields like sender information and reactions.


   .. py:attribute:: sender_name
      :type:  Optional[str]


   .. py:attribute:: reactions
      :type:  Dict[str, List[str]]


   .. py:attribute:: is_edited
      :type:  bool


   .. py:attribute:: room
      :type:  Optional[Dict[str, Any]]


   .. py:attribute:: sender
      :type:  Optional[Dict[str, Any]]


.. py:class:: MessageReactionBase

   Bases: :py:obj:`pydantic.BaseModel`


   Base schema for MessageReaction data.

   Attributes:
       message_id: ID of the message.
       user_id: ID of the user.
       reaction: Reaction string (e.g., emoji).


   .. py:attribute:: message_id
      :type:  uuid.UUID


   .. py:attribute:: user_id
      :type:  uuid.UUID


   .. py:attribute:: reaction
      :type:  str


.. py:class:: MessageReactionCreate

   Bases: :py:obj:`MessageReactionBase`


   Schema for creating a new MessageReaction.


.. py:class:: MessageReactionInDB

   Bases: :py:obj:`MessageReactionBase`


   Schema for MessageReaction data as stored in the database.

   Includes database-specific fields like ID and timestamps.


   .. py:attribute:: id
      :type:  uuid.UUID


   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: model_config


.. py:class:: MessageReaction

   Bases: :py:obj:`MessageReactionInDB`


   Schema for complete MessageReaction data in API responses.

   Includes related entities like user details.


   .. py:attribute:: user
      :type:  Optional[Dict[str, Any]]


   .. py:attribute:: message
      :type:  Optional[Dict[str, Any]]


.. py:class:: UserPresence

   Bases: :py:obj:`pydantic.BaseModel`


   Schema for user presence information.

   Attributes:
       user_id: ID of the user.
       is_online: Whether the user is currently online.
       last_seen_at: When the user was last seen.
       status: Optional custom status message.


   .. py:attribute:: user_id
      :type:  str


   .. py:attribute:: is_online
      :type:  bool


   .. py:attribute:: last_seen_at
      :type:  Optional[datetime.datetime]


   .. py:attribute:: status
      :type:  Optional[str]


