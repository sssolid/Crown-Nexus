app.domains.compliance.repository
=================================

.. py:module:: app.domains.compliance.repository


Classes
-------

.. autoapisummary::

   app.domains.compliance.repository.Prop65ChemicalRepository
   app.domains.compliance.repository.WarningRepository
   app.domains.compliance.repository.ProductChemicalRepository
   app.domains.compliance.repository.ProductDOTApprovalRepository
   app.domains.compliance.repository.HazardousMaterialRepository


Module Contents
---------------

.. py:class:: Prop65ChemicalRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.compliance.models.Prop65Chemical`\ , :py:obj:`uuid.UUID`\ ]


   Repository for Prop65Chemical entity operations.

   Provides methods for querying, creating, updating, and deleting
   Prop65Chemical entities, extending the generic BaseRepository.


   .. py:method:: find_by_cas_number(cas_number)
      :async:


      Find a chemical by its CAS number.

      Args:
          cas_number: The CAS number to search for.

      Returns:
          The chemical if found, None otherwise.



   .. py:method:: find_by_name(name)
      :async:


      Find chemicals by name (partial match).

      Args:
          name: The chemical name to search for.

      Returns:
          List of chemicals with matching names.



   .. py:method:: get_by_type(chemical_type)
      :async:


      Get chemicals of a specific type.

      Args:
          chemical_type: The chemical type to filter by.

      Returns:
          List of chemicals of the specified type.



   .. py:method:: ensure_exists(chemical_id)
      :async:


      Ensure a chemical exists by ID, raising an exception if not found.

      Args:
          chemical_id: The chemical ID to check.

      Returns:
          The chemical if found.

      Raises:
          ResourceNotFoundException: If the chemical is not found.



.. py:class:: WarningRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.compliance.models.Warning`\ , :py:obj:`uuid.UUID`\ ]


   Repository for Warning entity operations.

   Provides methods for querying, creating, updating, and deleting
   Warning entities, extending the generic BaseRepository.


   .. py:method:: get_by_product(product_id)
      :async:


      Get warnings for a specific product.

      Args:
          product_id: The product ID to filter by.

      Returns:
          List of warnings for the product.



   .. py:method:: get_by_chemical(chemical_id)
      :async:


      Get warnings for a specific chemical.

      Args:
          chemical_id: The chemical ID to filter by.

      Returns:
          List of warnings for the chemical.



   .. py:method:: ensure_exists(warning_id)
      :async:


      Ensure a warning exists by ID, raising an exception if not found.

      Args:
          warning_id: The warning ID to check.

      Returns:
          The warning if found.

      Raises:
          ResourceNotFoundException: If the warning is not found.



.. py:class:: ProductChemicalRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.compliance.models.ProductChemical`\ , :py:obj:`uuid.UUID`\ ]


   Repository for ProductChemical entity operations.

   Provides methods for querying, creating, updating, and deleting
   ProductChemical entities, extending the generic BaseRepository.


   .. py:method:: find_by_product_and_chemical(product_id, chemical_id)
      :async:


      Find a product chemical association by product and chemical IDs.

      Args:
          product_id: The product ID.
          chemical_id: The chemical ID.

      Returns:
          The product chemical association if found, None otherwise.



   .. py:method:: get_by_product(product_id)
      :async:


      Get chemical associations for a specific product.

      Args:
          product_id: The product ID to filter by.

      Returns:
          List of product chemical associations for the product.



   .. py:method:: get_by_exposure_scenario(scenario)
      :async:


      Get product chemical associations with a specific exposure scenario.

      Args:
          scenario: The exposure scenario to filter by.

      Returns:
          List of product chemical associations with the specified scenario.



   .. py:method:: get_products_with_warnings()
      :async:


      Get IDs of products that require warnings.

      Returns:
          List of product IDs that require warnings.



   .. py:method:: ensure_exists(association_id)
      :async:


      Ensure a product chemical association exists by ID, raising an exception if not found.

      Args:
          association_id: The association ID to check.

      Returns:
          The product chemical association if found.

      Raises:
          ResourceNotFoundException: If the association is not found.



.. py:class:: ProductDOTApprovalRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.compliance.models.ProductDOTApproval`\ , :py:obj:`uuid.UUID`\ ]


   Repository for ProductDOTApproval entity operations.

   Provides methods for querying, creating, updating, and deleting
   ProductDOTApproval entities, extending the generic BaseRepository.


   .. py:method:: find_by_product(product_id)
      :async:


      Find a DOT approval for a specific product.

      Args:
          product_id: The product ID.

      Returns:
          The DOT approval if found, None otherwise.



   .. py:method:: find_by_approval_number(approval_number)
      :async:


      Find a DOT approval by approval number.

      Args:
          approval_number: The approval number to search for.

      Returns:
          The DOT approval if found, None otherwise.



   .. py:method:: get_by_status(status)
      :async:


      Get DOT approvals with a specific status.

      Args:
          status: The approval status to filter by.

      Returns:
          List of DOT approvals with the specified status.



   .. py:method:: get_expiring_soon(days = 30)
      :async:


      Get DOT approvals that are expiring soon.

      Args:
          days: Number of days to consider "soon".

      Returns:
          List of DOT approvals expiring within the specified number of days.



   .. py:method:: ensure_exists(approval_id)
      :async:


      Ensure a DOT approval exists by ID, raising an exception if not found.

      Args:
          approval_id: The approval ID to check.

      Returns:
          The DOT approval if found.

      Raises:
          ResourceNotFoundException: If the approval is not found.



.. py:class:: HazardousMaterialRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.compliance.models.HazardousMaterial`\ , :py:obj:`uuid.UUID`\ ]


   Repository for HazardousMaterial entity operations.

   Provides methods for querying, creating, updating, and deleting
   HazardousMaterial entities, extending the generic BaseRepository.


   .. py:method:: find_by_product(product_id)
      :async:


      Find hazardous material information for a specific product.

      Args:
          product_id: The product ID.

      Returns:
          The hazardous material information if found, None otherwise.



   .. py:method:: find_by_un_number(un_number)
      :async:


      Find hazardous materials by UN number.

      Args:
          un_number: The UN number to search for.

      Returns:
          List of hazardous materials with the specified UN number.



   .. py:method:: get_by_hazard_class(hazard_class)
      :async:


      Get hazardous materials with a specific hazard class.

      Args:
          hazard_class: The hazard class to filter by.

      Returns:
          List of hazardous materials with the specified hazard class.



   .. py:method:: ensure_exists(hazmat_id)
      :async:


      Ensure hazardous material information exists by ID, raising an exception if not found.

      Args:
          hazmat_id: The hazardous material ID to check.

      Returns:
          The hazardous material information if found.

      Raises:
          ResourceNotFoundException: If the information is not found.



