app.domains.products.repository
===============================

.. py:module:: app.domains.products.repository


Classes
-------

.. autoapisummary::

   app.domains.products.repository.ProductRepository
   app.domains.products.repository.BrandRepository
   app.domains.products.repository.FitmentRepository


Module Contents
---------------

.. py:class:: ProductRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.products.models.Product`\ , :py:obj:`uuid.UUID`\ ]


   Repository for Product entity operations.

   Provides methods for querying, creating, updating, and deleting
   Product entities, extending the generic BaseRepository.


   .. py:method:: find_by_part_number(part_number)
      :async:


      Find a product by exact part number.

      Args:
          part_number: The part number to search for.

      Returns:
          The product if found, None otherwise.



   .. py:method:: find_by_part_number_stripped(part_number)
      :async:


      Find products by normalized part number.

      Args:
          part_number: The part number to search for.

      Returns:
          List of products with matching normalized part number.



   .. py:method:: search(search_term, page = 1, page_size = 20)
      :async:


      Search products by various fields.

      Args:
          search_term: The term to search for.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_active_products(page = 1, page_size = 20)
      :async:


      Get paginated list of active products.

      Args:
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: get_by_fitment(year, make, model, engine = None, transmission = None, page = 1, page_size = 20)
      :async:


      Get products compatible with a specific vehicle fitment.

      Args:
          year: Vehicle year.
          make: Vehicle make.
          model: Vehicle model.
          engine: Optional engine specification.
          transmission: Optional transmission specification.
          page: The page number.
          page_size: The number of items per page.

      Returns:
          Dict containing items, total count, and pagination info.



   .. py:method:: update_status(product_id, status, reason = None, user_id = None)
      :async:


      Update a product's status and create an activity record.

      Args:
          product_id: ID of the product to update.
          status: New status value.
          reason: Optional reason for the status change.
          user_id: Optional ID of the user making the change.

      Returns:
          Tuple containing (updated product, activity record).

      Raises:
          ResourceNotFoundException: If the product is not found.



   .. py:method:: create_supersession(old_product_id, new_product_id, reason = None)
      :async:


      Create a product supersession (one product replacing another).

      Args:
          old_product_id: ID of the product being replaced.
          new_product_id: ID of the replacement product.
          reason: Optional reason for the supersession.

      Returns:
          The created supersession record.

      Raises:
          ResourceNotFoundException: If either product is not found.
          BusinessException: If trying to supersede a product with itself.



   .. py:method:: ensure_exists(product_id)
      :async:


      Ensure a product exists by ID, raising an exception if not found.

      Args:
          product_id: The product ID to check.

      Returns:
          The product if found.

      Raises:
          ResourceNotFoundException: If the product is not found.



.. py:class:: BrandRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.products.models.Brand`\ , :py:obj:`uuid.UUID`\ ]


   Repository for Brand entity operations.

   Provides methods for querying, creating, updating, and deleting
   Brand entities, extending the generic BaseRepository.


   .. py:method:: find_by_name(name)
      :async:


      Find a brand by exact name.

      Args:
          name: The brand name to search for.

      Returns:
          The brand if found, None otherwise.



   .. py:method:: find_by_name_partial(name)
      :async:


      Find brands by partial name match.

      Args:
          name: The brand name to search for.

      Returns:
          List of brands with matching names.



   .. py:method:: get_by_company(company_id)
      :async:


      Get brands owned by a specific company.

      Args:
          company_id: The company ID to filter by.

      Returns:
          List of brands owned by the specified company.



   .. py:method:: ensure_exists(brand_id)
      :async:


      Ensure a brand exists by ID, raising an exception if not found.

      Args:
          brand_id: The brand ID to check.

      Returns:
          The brand if found.

      Raises:
          ResourceNotFoundException: If the brand is not found.



.. py:class:: FitmentRepository(db)

   Bases: :py:obj:`app.repositories.base.BaseRepository`\ [\ :py:obj:`app.domains.products.models.Fitment`\ , :py:obj:`uuid.UUID`\ ]


   Repository for Fitment entity operations.

   Provides methods for querying, creating, updating, and deleting
   Fitment entities, extending the generic BaseRepository.


   .. py:method:: find_by_vehicle(year, make, model, engine = None, transmission = None)
      :async:


      Find fitments matching a specific vehicle.

      Args:
          year: Vehicle year.
          make: Vehicle make.
          model: Vehicle model.
          engine: Optional engine specification.
          transmission: Optional transmission specification.

      Returns:
          List of matching fitments.



   .. py:method:: get_makes_by_year(year)
      :async:


      Get all makes available for a specific year.

      Args:
          year: Vehicle year.

      Returns:
          List of unique make names.



   .. py:method:: get_models_by_year_make(year, make)
      :async:


      Get all models available for a specific year and make.

      Args:
          year: Vehicle year.
          make: Vehicle make.

      Returns:
          List of unique model names.



   .. py:method:: get_years_range()
      :async:


      Get the minimum and maximum years in the fitment data.

      Returns:
          Tuple containing (min_year, max_year).



   .. py:method:: ensure_exists(fitment_id)
      :async:


      Ensure a fitment exists by ID, raising an exception if not found.

      Args:
          fitment_id: The fitment ID to check.

      Returns:
          The fitment if found.

      Raises:
          ResourceNotFoundException: If the fitment is not found.



