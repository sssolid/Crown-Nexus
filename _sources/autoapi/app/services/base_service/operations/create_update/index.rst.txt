app.services.base_service.operations.create_update
==================================================

.. py:module:: app.services.base_service.operations.create_update


Attributes
----------

.. autoapisummary::

   app.services.base_service.operations.create_update.logger
   app.services.base_service.operations.create_update.T
   app.services.base_service.operations.create_update.C
   app.services.base_service.operations.create_update.U
   app.services.base_service.operations.create_update.ID


Classes
-------

.. autoapisummary::

   app.services.base_service.operations.create_update.CreateUpdateOperations


Module Contents
---------------

.. py:data:: logger

.. py:data:: T

.. py:data:: C

.. py:data:: U

.. py:data:: ID

.. py:class:: CreateUpdateOperations

   Bases: :py:obj:`Generic`\ [\ :py:obj:`T`\ , :py:obj:`C`\ , :py:obj:`U`\ , :py:obj:`ID`\ ]


   Operations for creating and updating entities.


   .. py:method:: create(db, repository, data, user_id = None, required_permission = None, validate_func = None, before_func = None, after_func = None, get_user_func = None)
      :async:


      Create new entity.

      Args:
          db: Database session
          repository: Repository for database operations
          data: Entity data
          user_id: Current user ID
          required_permission: Required permission for this operation
          validate_func: Function for validating the data
          before_func: Function to call before creation
          after_func: Function to call after creation
          get_user_func: Function to get user by ID

      Returns:
          T: Created entity

      Raises:
          ValidationException: If validation fails
          PermissionDeniedException: If user doesn't have permission



   .. py:method:: create_with_schema(db, repository, schema, user_id = None, required_permission = None, validate_func = None, before_func = None, after_func = None, get_user_func = None)
      :async:


      Create a new entity using a Pydantic schema.

      Args:
          db: Database session
          repository: Repository for database operations
          schema: Create schema
          user_id: Optional user ID for permission checks
          required_permission: Required permission for this operation
          validate_func: Function for validating the data
          before_func: Function to call before creation
          after_func: Function to call after creation
          get_user_func: Function to get user by ID

      Returns:
          T: The created entity



   .. py:method:: update(db, repository, id, data, user_id = None, required_permission = None, validate_func = None, before_func = None, after_func = None, get_user_func = None)
      :async:


      Update entity.

      Args:
          db: Database session
          repository: Repository for database operations
          id: Entity ID
          data: Updated data
          user_id: Current user ID
          required_permission: Required permission for this operation
          validate_func: Function for validating the data
          before_func: Function to call before update
          after_func: Function to call after update
          get_user_func: Function to get user by ID

      Returns:
          T: Updated entity

      Raises:
          ResourceNotFoundException: If entity not found
          ValidationException: If validation fails
          PermissionDeniedException: If user doesn't have permission



   .. py:method:: update_with_schema(db, repository, id, schema, user_id = None, required_permission = None, validate_func = None, before_func = None, after_func = None, get_user_func = None)
      :async:


      Update an existing entity using a Pydantic schema.

      Args:
          db: Database session
          repository: Repository for database operations
          id: Entity ID
          schema: Update schema
          user_id: Optional user ID for permission checks
          required_permission: Required permission for this operation
          validate_func: Function for validating the data
          before_func: Function to call before update
          after_func: Function to call after update
          get_user_func: Function to get user by ID

      Returns:
          Optional[T]: The updated entity if found, None otherwise



