# app/core/dependency_manager.pyi
from typing import Any, Awaitable, Callable, Literal, Optional, overload
from sqlalchemy.ext.asyncio import AsyncSession

# Import all service classes
from app.core.error.service import ErrorService
from app.domains.audit.service import AuditService
from app.services.search import SearchService
from app.domains.media.service import MediaService

# Define overloads for each service
@overload
def get_service(service_name: Literal["error_service"], db: Optional[AsyncSession] = None) -> ErrorService: ...

@overload
def get_service(service_name: Literal["audit_service"], db: Optional[AsyncSession] = None) -> AuditService: ...

@overload
def get_service(service_name: Literal["search_service"], db: Optional[AsyncSession] = None) -> SearchService: ...

@overload
def get_service(service_name: Literal["media_service"], db: Optional[AsyncSession] = None) -> MediaService: ...

# Fallback for other services
@overload
def get_service(service_name: str, db: Optional[AsyncSession] = None) -> Any: ...

# Include other important functions from dependency_manager.py
def get_dependency(name: str, **kwargs: Any) -> Any: ...
def register_service(provider: Any, name: Optional[str] = None) -> Any: ...
def register_async_service(async_provider: Any, name: Optional[str] = None) -> Callable[..., Awaitable[T]]: ...
async def initialize_services() -> None: ...
async def shutdown_services() -> None: ...
def register_services() -> None: ...
def inject_dependency(dependency_name: str) -> Any: ...
def with_dependencies(**dependencies: str) -> Any: ...
