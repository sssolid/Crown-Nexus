# File: crown_deploy/docker-compose.test.yml
version: '3.8'

services:
  # Database server
  server1:
    build:
      context: ./tests/docker
      dockerfile: Dockerfile.database
    hostname: server1
    container_name: crown-test-server1
    networks:
      crown-test-network:
        ipv4_address: 172.28.1.10
    ports:
      - "2201:22"
      - "5432:5432"  # PostgreSQL
    environment:
      - POSTGRES_PASSWORD=testpassword
      - POSTGRES_USER=postgres
      - SERVER_ROLE=database

  # Backend server
  server2:
    build:
      context: ./tests/docker
      dockerfile: Dockerfile.backend
    hostname: server2
    container_name: crown-test-server2
    networks:
      crown-test-network:
        ipv4_address: 172.28.1.11
    ports:
      - "2202:22"
      - "8000:8000"  # Backend API
    environment:
      - SERVER_ROLE=backend

  # Frontend server
  server3:
    build:
      context: ./tests/docker
      dockerfile: Dockerfile.frontend
    hostname: server3
    container_name: crown-test-server3
    networks:
      crown-test-network:
        ipv4_address: 172.28.1.12
    ports:
      - "2203:22"
      - "80:80"      # Nginx
    environment:
      - SERVER_ROLE=frontend

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: tests/docker/TestRunner.Dockerfile
    container_name: crown-test-runner
    volumes:
      - .:/app/crown_deploy
      - test-deployment-volume:/app/test-deployment
      - ./tests/docker/specialized-test-runner.sh:/test-runner.sh
      - /var/run/docker.sock:/var/run/docker.sock
      - ./test-output:/test-output
    working_dir: /app
    networks:
      - crown-test-network
    depends_on:
      - server1
      - server2
      - server3
    environment:
      - SERVER1_IP=172.28.1.10
      - SERVER2_IP=172.28.1.11
      - SERVER3_IP=172.28.1.12
      - SSH_USER=crown_test
      - TEST_MODE=true
      - PYTHONPATH=/app
    command: bash /test-runner.sh

networks:
  crown-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.1.0/24

volumes:
  test-deployment-volume:
