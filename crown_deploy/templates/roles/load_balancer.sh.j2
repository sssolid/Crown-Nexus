## Load Balancer Role Configuration
echo "Setting up Load Balancer role on {{ server.hostname }}..."

# Install required packages
sudo apt install -y nginx certbot python3-certbot-nginx
echo "load_balancer: nginx certbot python3-certbot-nginx" >> /tmp/crown-nexus-installed/packages.txt

# Open HTTP and HTTPS ports
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

# Configure Nginx as load balancer
echo "Configuring Nginx load balancer..."

cat > /tmp/nginx-lb-config << 'EOF'
# Define upstream backend servers
upstream backend_servers {
{% for backend_server in cluster.get_servers_by_role(ServerRole.BACKEND) %}
    server {{ backend_server.ip }}:8000;
{% endfor %}
    keepalive 64;
}

# Define upstream frontend servers
upstream frontend_servers {
{% for frontend_server in cluster.get_servers_by_role(ServerRole.FRONTEND) %}
    server {{ frontend_server.ip }}:80;
{% endfor %}
    keepalive 64;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;

    # SSL will be configured by certbot

    # Optimizations
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_buffer_size 4k;

    # Modern configuration (TLS 1.2 and 1.3 only)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # HSTS (one year)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # API requests route to backend servers
    location /api/ {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # All other requests route to frontend servers
    location / {
{% if cluster.get_servers_by_role(ServerRole.FRONTEND) %}
        proxy_pass http://frontend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_buffering on;
{% else %}
        # If no frontend servers available, redirect to backend
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
{% endif %}
    }

    # Proxy API docs
    location /api/v1/docs {
        proxy_pass http://backend_servers/api/v1/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

# Health check endpoint
server {
    listen 80;
    server_name localhost;

    location /health {
        add_header Content-Type text/plain;
        return 200 'ok';
    }

    location /server-status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }
}
EOF

# Apply Nginx configuration
envsubst < /tmp/nginx-lb-config > /etc/nginx/sites-available/$CROWN_APP_NAME
sudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/ 2>/dev/null || true
sudo rm -f /etc/nginx/sites-enabled/default
sudo nginx -t
sudo systemctl restart nginx

# Setup SSL with Let's Encrypt
echo "Setting up SSL..."
sudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL

# Configure rate limiting to protect against DDoS
echo "Configuring rate limiting..."
cat > /tmp/rate-limiting.conf << 'EOF'
# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/s;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Include this in your http block
limit_conn addr 10;
EOF

sudo mv /tmp/rate-limiting.conf /etc/nginx/conf.d/rate-limiting.conf
sudo nginx -t
sudo systemctl reload nginx

echo "Load Balancer setup completed on {{ server.hostname }}"
