{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "IntelliJ IDEA",
          "version": "243.25659.59",
          "informationUri": "https://www.jetbrains.com?utm_source=product&utm_medium=link&utm_campaign=IU&utm_content=2024.3",
          "rules": [
            {
              "id": "CssUnusedSymbol",
              "name": "Unused selector"
            },
            {
              "id": "EditorConfigOptionRedundancy",
              "name": "Redundant property"
            },
            {
              "id": "DuplicatedCode",
              "name": "Duplicated code fragment"
            },
            {
              "id": "HtmlUnknownBooleanAttribute",
              "name": "Incorrect boolean attribute"
            },
            {
              "id": "ES6MissingAwait",
              "name": "Missing await for an async function call"
            },
            {
              "id": "JSIgnoredPromiseFromCall",
              "name": "Result of method call returning a promise is ignored"
            },
            {
              "id": "PointlessBooleanExpressionJS",
              "name": "Pointless statement or boolean expression"
            },
            {
              "id": "JSCommentMatchesSignature",
              "name": "Mismatched JSDoc and function signature"
            },
            {
              "id": "ES6UnusedImports",
              "name": "Unused import"
            },
            {
              "id": "JSUnusedGlobalSymbols",
              "name": "Unused global symbol"
            },
            {
              "id": "JSUnusedLocalSymbols",
              "name": "Unused local symbol"
            },
            {
              "id": "MarkdownIncorrectlyNumberedListItem",
              "name": "Incorrectly numbered list item"
            },
            {
              "id": "GrazieInspection",
              "name": "Grammar"
            },
            {
              "id": "SpellCheckingInspection",
              "name": "Typo"
            },
            {
              "id": "PyDeprecation",
              "name": "Deprecated function, class, or module"
            },
            {
              "id": "PyMethodParameters",
              "name": "Improper first parameter"
            },
            {
              "id": "PyArgumentList",
              "name": "Incorrect call arguments"
            },
            {
              "id": "PyTypeChecker",
              "name": "Incorrect type"
            },
            {
              "id": "PyMethodMayBeStatic",
              "name": "Method is not declared static"
            },
            {
              "id": "PyAsyncCall",
              "name": "Missing `await` syntax in coroutine calls"
            },
            {
              "id": "PyNestedDecorators",
              "name": "Problematic nesting of decorators"
            },
            {
              "id": "PyShadowingBuiltins",
              "name": "Shadowing built-in names"
            },
            {
              "id": "PyShadowingNames",
              "name": "Shadowing names from outer scopes"
            },
            {
              "id": "PyUnboundLocalVariable",
              "name": "Unbound local variables"
            },
            {
              "id": "PyUnresolvedReferences",
              "name": "Unresolved references"
            },
            {
              "id": "PyPackageRequirements",
              "name": "Unsatisfied package requirements"
            },
            {
              "id": "PyUnusedLocal",
              "name": "Unused local symbols"
            },
            {
              "id": "VulnerableLibrariesLocal",
              "name": "Vulnerable declared dependency"
            },
            {
              "id": "CheckTagEmptyBody",
              "name": "Empty element content"
            },
            {
              "id": "XmlUnusedNamespaceDeclaration",
              "name": "Unused schema declaration"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "file:///D:/crown-nexus/"
          }
        }
      ],
      "language": "en-US",
      "results": [
        {
          "ruleId": "CssUnusedSymbol",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Selector v-snackbar__wrapper is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/components/common/NotificationSystem.vue"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 32,
                  "endLine": 107,
                  "endColumn": 52,
                  "charOffset": 3286,
                  "charLength": 20,
                  "snippet": {
                    "text": ".v-snackbar__wrapper"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CssUnusedSymbol",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Selector dashboard-title is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/Dashboard.vue"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 2,
                  "endLine": 263,
                  "endColumn": 18,
                  "charOffset": 7302,
                  "charLength": 16,
                  "snippet": {
                    "text": ".dashboard-title"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "EditorConfigOptionRedundancy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The indent_size property with the same value is already defined in another section"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/.editorconfig"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 12,
                  "charOffset": 609,
                  "charLength": 11,
                  "snippet": {
                    "text": "indent_size"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "EditorConfigOptionRedundancy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The indent_style property with the same value is already defined in another section"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/.editorconfig"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 13,
                  "charOffset": 588,
                  "charLength": 12,
                  "snippet": {
                    "text": "indent_style"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 117-134"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 5,
                  "endLine": 125,
                  "endColumn": 6,
                  "charOffset": 2997,
                  "charLength": 378,
                  "snippet": {
                    "text": "product_data = {\n        \"sku\": f\"TEST-{create_random_string(5)}\",\n        \"name\": f\"Test Product {create_random_string(5)}\",\n        \"description\": \"A test product for unit testing\",\n        \"part_number\": f\"TP-{create_random_string(5)}\",\n        \"category_id\": str(test_category.id),\n        \"attributes\": {\"material\": \"steel\", \"weight\": 1.5},\n        \"is_active\": True,\n    }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 212-221"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 5,
                  "endLine": 212,
                  "endColumn": 69,
                  "charOffset": 4849,
                  "charLength": 64,
                  "snippet": {
                    "text": "count_query = select(func.count()).select_from(query.subquery())"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 143-153"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 9,
                  "endLine": 153,
                  "endColumn": 14,
                  "charOffset": 4424,
                  "charLength": 491,
                  "snippet": {
                    "text": "if search_term:\n            # Convert to lowercase and add wildcards\n            search_pattern = f\"%{search_term.lower()}%\"\n            query = query.where(\n                or_(\n                    func.lower(Product.name).like(search_pattern),\n                    func.lower(Product.description).like(search_pattern),\n                    func.lower(Product.sku).like(search_pattern),\n                    func.lower(Product.part_number).like(search_pattern),\n                )\n            )"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 313-323"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 9,
                  "endLine": 323,
                  "endColumn": 14,
                  "charOffset": 9899,
                  "charLength": 489,
                  "snippet": {
                    "text": "if search_term:\n            # Convert to lowercase and add wildcards\n            search_pattern = f\"%{search_term.lower()}%\"\n            query = query.where(\n                or_(\n                    func.lower(Fitment.make).like(search_pattern),\n                    func.lower(Fitment.model).like(search_pattern),\n                    func.lower(Fitment.engine).like(search_pattern),\n                    func.lower(Fitment.transmission).like(search_pattern),\n                )\n            )"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 126-137"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 128,
                  "endColumn": 35,
                  "charOffset": 3437,
                  "charLength": 123,
                  "snippet": {
                    "text": "query = select(Fitment.engine).distinct().where(\n            Fitment.engine.is_not(None)\n        ).order_by(Fitment.engine)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 361-375"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 5,
                  "endLine": 361,
                  "endColumn": 59,
                  "charOffset": 10638,
                  "charLength": 54,
                  "snippet": {
                    "text": "stmt = select(Product).where(Product.id == product_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 81-93"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 37,
                  "charOffset": 2402,
                  "charLength": 32,
                  "snippet": {
                    "text": "result = await db.execute(query)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 196-204"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 5,
                  "endLine": 196,
                  "endColumn": 99,
                  "charOffset": 5590,
                  "charLength": 94,
                  "snippet": {
                    "text": "stmt = select(Product).where(Product.id == product_id).options(selectinload(Product.category))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 217-225"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 5,
                  "endLine": 217,
                  "endColumn": 85,
                  "charOffset": 5781,
                  "charLength": 80,
                  "snippet": {
                    "text": "query = select(User).where(User.id == user_id).options(joinedload(User.company))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 181-189"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 85,
                  "charOffset": 4887,
                  "charLength": 80,
                  "snippet": {
                    "text": "query = select(User).where(User.id == user_id).options(joinedload(User.company))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 163-174"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 41,
                  "charOffset": 4577,
                  "charLength": 141,
                  "snippet": {
                    "text": "query = select(Fitment.transmission).distinct().where(\n            Fitment.transmission.is_not(None)\n        ).order_by(Fitment.transmission)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 212-221"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 5,
                  "endLine": 212,
                  "endColumn": 69,
                  "charOffset": 6495,
                  "charLength": 64,
                  "snippet": {
                    "text": "count_query = select(func.count()).select_from(query.subquery())"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 164-181"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 5,
                  "endLine": 172,
                  "endColumn": 6,
                  "charOffset": 4500,
                  "charLength": 378,
                  "snippet": {
                    "text": "product_data = {\n        \"sku\": f\"TEST-{create_random_string(5)}\",\n        \"name\": f\"Test Product {create_random_string(5)}\",\n        \"description\": \"A test product for unit testing\",\n        \"part_number\": f\"TP-{create_random_string(5)}\",\n        \"category_id\": str(test_category.id),\n        \"attributes\": {\"material\": \"steel\", \"weight\": 1.5},\n        \"is_active\": True,\n    }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 546-560"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 5,
                  "endLine": 546,
                  "endColumn": 59,
                  "charOffset": 16539,
                  "charLength": 54,
                  "snippet": {
                    "text": "stmt = select(Product).where(Product.id == product_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 74-83"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 5,
                  "endLine": 74,
                  "endColumn": 69,
                  "charOffset": 2168,
                  "charLength": 64,
                  "snippet": {
                    "text": "count_query = select(func.count()).select_from(query.subquery())"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 163-171"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 5,
                  "endLine": 163,
                  "endColumn": 99,
                  "charOffset": 4704,
                  "charLength": 94,
                  "snippet": {
                    "text": "stmt = select(Product).where(Product.id == product_id).options(selectinload(Product.category))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "HtmlUnknownBooleanAttribute",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "text requires value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/App.vue"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 32,
                  "endLine": 12,
                  "endColumn": 36,
                  "charOffset": 374,
                  "charLength": 4,
                  "snippet": {
                    "text": "text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "HtmlUnknownBooleanAttribute",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "text requires value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/App.vue"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 31,
                  "endLine": 11,
                  "endColumn": 35,
                  "charOffset": 321,
                  "charLength": 4,
                  "snippet": {
                    "text": "text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "HtmlUnknownBooleanAttribute",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "text requires value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/App.vue"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 23,
                  "endLine": 9,
                  "endColumn": 27,
                  "charOffset": 216,
                  "charLength": 4,
                  "snippet": {
                    "text": "text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "HtmlUnknownBooleanAttribute",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "text requires value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/App.vue"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 28,
                  "endLine": 15,
                  "endColumn": 32,
                  "charOffset": 463,
                  "charLength": 4,
                  "snippet": {
                    "text": "text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "HtmlUnknownBooleanAttribute",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "text requires value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/App.vue"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 31,
                  "endLine": 10,
                  "endColumn": 35,
                  "charOffset": 269,
                  "charLength": 4,
                  "snippet": {
                    "text": "text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6MissingAwait",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing await for an async function call"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/ProductCatalog.vue"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 9,
                  "endLine": 465,
                  "endColumn": 22,
                  "charOffset": 14282,
                  "charLength": 13,
                  "snippet": {
                    "text": "fetchProducts"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6MissingAwait",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing await for an async function call"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/UserManagement.vue"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 9,
                  "endLine": 473,
                  "endColumn": 19,
                  "charOffset": 14491,
                  "charLength": 10,
                  "snippet": {
                    "text": "fetchUsers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6MissingAwait",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing await for an async function call"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/FitmentCatalog.vue"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 9,
                  "endLine": 427,
                  "endColumn": 22,
                  "charOffset": 13475,
                  "charLength": 13,
                  "snippet": {
                    "text": "fetchFitments"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6MissingAwait",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing await for an async function call"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/api.ts"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 9,
                  "endLine": 83,
                  "endColumn": 20,
                  "charOffset": 2170,
                  "charLength": 11,
                  "snippet": {
                    "text": "router.push"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6MissingAwait",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing await for an async function call"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/ProductDetail.vue"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 9,
                  "endLine": 497,
                  "endColumn": 20,
                  "charOffset": 17272,
                  "charLength": 11,
                  "snippet": {
                    "text": "router.push"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from push is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/stores/auth.ts"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 14,
                  "endLine": 176,
                  "endColumn": 18,
                  "charOffset": 4698,
                  "charLength": 4,
                  "snippet": {
                    "text": "push"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PointlessBooleanExpressionJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Can be simplified to typeof error === 'object'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/error-handler.ts"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 7,
                  "endLine": 193,
                  "endColumn": 50,
                  "charOffset": 4894,
                  "charLength": 43,
                  "snippet": {
                    "text": "typeof error === 'object' && error !== null"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSCommentMatchesSignature",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter role described in JSDoc does not appear in function signature"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/stores/auth.ts"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 15,
                  "endLine": 78,
                  "endColumn": 19,
                  "charOffset": 1851,
                  "charLength": 4,
                  "snippet": {
                    "text": "role"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSCommentMatchesSignature",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter state is not described in JSDoc"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/stores/auth.ts"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 20,
                  "charOffset": 1957,
                  "charLength": 5,
                  "snippet": {
                    "text": "state"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6UnusedImports",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import specifier onMounted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/components/common/NotificationSystem.vue"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 49,
                  "endLine": 34,
                  "endColumn": 58,
                  "charOffset": 1251,
                  "charLength": 9,
                  "snippet": {
                    "text": "onMounted"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6UnusedImports",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import specifier Notification"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/components/common/NotificationSystem.vue"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 31,
                  "endLine": 35,
                  "endColumn": 43,
                  "charOffset": 1318,
                  "charLength": 12,
                  "snippet": {
                    "text": "Notification"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6UnusedImports",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import specifier ref"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/notification.ts"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 13,
                  "charOffset": 270,
                  "charLength": 3,
                  "snippet": {
                    "text": "ref"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ES6UnusedImports",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import specifier onUnmounted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/components/common/NotificationSystem.vue"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 60,
                  "endLine": 34,
                  "endColumn": 71,
                  "charOffset": 1262,
                  "charLength": 11,
                  "snippet": {
                    "text": "onUnmounted"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused interface ApiError"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/api.ts"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 18,
                  "endLine": 26,
                  "endColumn": 26,
                  "charOffset": 678,
                  "charLength": 8,
                  "snippet": {
                    "text": "ApiError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function uploadFile"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/api.ts"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 9,
                  "endLine": 193,
                  "endColumn": 19,
                  "charOffset": 5165,
                  "charLength": 10,
                  "snippet": {
                    "text": "uploadFile"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function formatCurrency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/formatters.ts"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 31,
                  "charOffset": 2298,
                  "charLength": 14,
                  "snippet": {
                    "text": "formatCurrency"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function toTitleCase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/formatters.ts"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 17,
                  "endLine": 129,
                  "endColumn": 28,
                  "charOffset": 3607,
                  "charLength": 11,
                  "snippet": {
                    "text": "toTitleCase"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused readonly field INFO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/error-handler.ts"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 7,
                  "charOffset": 367,
                  "charLength": 4,
                  "snippet": {
                    "text": "INFO"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function initializeAuth"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/stores/auth.ts"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 11,
                  "endLine": 215,
                  "endColumn": 25,
                  "charOffset": 5648,
                  "charLength": 14,
                  "snippet": {
                    "text": "initializeAuth"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function updateCategory"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "endLine": 108,
                  "endColumn": 23,
                  "charOffset": 2859,
                  "charLength": 14,
                  "snippet": {
                    "text": "updateCategory"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function createCategory"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 97,
                  "endColumn": 23,
                  "charOffset": 2545,
                  "charLength": 14,
                  "snippet": {
                    "text": "createCategory"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function getCategory"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "endLine": 87,
                  "endColumn": 20,
                  "charOffset": 2300,
                  "charLength": 11,
                  "snippet": {
                    "text": "getCategory"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function truncateText"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/formatters.ts"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 29,
                  "charOffset": 3317,
                  "charLength": 12,
                  "snippet": {
                    "text": "truncateText"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function createErrorInfo"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/error-handler.ts"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 17,
                  "endLine": 141,
                  "endColumn": 32,
                  "charOffset": 3556,
                  "charLength": 15,
                  "snippet": {
                    "text": "createErrorInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused interface RouteMeta"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/router/index.ts"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 13,
                  "endLine": 18,
                  "endColumn": 22,
                  "charOffset": 576,
                  "charLength": 9,
                  "snippet": {
                    "text": "RouteMeta"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function deleteCategory"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 23,
                  "charOffset": 3135,
                  "charLength": 14,
                  "snippet": {
                    "text": "deleteCategory"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function updateProduct"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 58,
                  "endColumn": 22,
                  "charOffset": 1572,
                  "charLength": 13,
                  "snippet": {
                    "text": "updateProduct"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function formatNumber"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/formatters.ts"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 29,
                  "charOffset": 3968,
                  "charLength": 12,
                  "snippet": {
                    "text": "formatNumber"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function formatFileSize"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/formatters.ts"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 31,
                  "charOffset": 2772,
                  "charLength": 14,
                  "snippet": {
                    "text": "formatFileSize"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused interface ApiResponse"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/api.ts"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 18,
                  "endLine": 19,
                  "endColumn": 29,
                  "charOffset": 562,
                  "charLength": 11,
                  "snippet": {
                    "text": "ApiResponse"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function createProduct"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/product.ts"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 22,
                  "charOffset": 1281,
                  "charLength": 13,
                  "snippet": {
                    "text": "createProduct"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedGlobalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused interface FitmentListResponse"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/types/fitment.ts"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 18,
                  "endLine": 24,
                  "endColumn": 37,
                  "charOffset": 439,
                  "charLength": 19,
                  "snippet": {
                    "text": "FitmentListResponse"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused constant router"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/UserManagement.vue"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 11,
                  "endLine": 279,
                  "endColumn": 17,
                  "charOffset": 8522,
                  "charLength": 6,
                  "snippet": {
                    "text": "router"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused constant router"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/FitmentCatalog.vue"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 11,
                  "endLine": 291,
                  "endColumn": 17,
                  "charOffset": 9113,
                  "charLength": 6,
                  "snippet": {
                    "text": "router"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused interface TokenPayload"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/stores/auth.ts"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 23,
                  "charOffset": 988,
                  "charLength": 12,
                  "snippet": {
                    "text": "TokenPayload"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused constant router"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/ProductCatalog.vue"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 11,
                  "endLine": 327,
                  "endColumn": 17,
                  "charOffset": 10390,
                  "charLength": 6,
                  "snippet": {
                    "text": "router"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused constant router"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/Login.vue"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 11,
                  "endLine": 111,
                  "endColumn": 17,
                  "charOffset": 3577,
                  "charLength": 6,
                  "snippet": {
                    "text": "router"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MarkdownIncorrectlyNumberedListItem",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Item is not correctly numbered. Expected item number 1, but got 4."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/development/getting-started.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 4,
                  "charOffset": 758,
                  "charLength": 3,
                  "snippet": {
                    "text": "4. "
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MarkdownIncorrectlyNumberedListItem",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Item is not correctly numbered. Expected item number 1, but got 3."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/development/getting-started.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 4,
                  "charOffset": 569,
                  "charLength": 3,
                  "snippet": {
                    "text": "3. "
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MarkdownIncorrectlyNumberedListItem",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Item is not correctly numbered. Expected item number 1, but got 2."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/development/getting-started.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 4,
                  "charOffset": 482,
                  "charLength": 3,
                  "snippet": {
                    "text": "2. "
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MarkdownIncorrectlyNumberedListItem",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Item is not correctly numbered. Expected item number 1, but got 5."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/development/getting-started.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 4,
                  "charOffset": 1171,
                  "charLength": 3,
                  "snippet": {
                    "text": "5. "
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Consider using \"to\" with \"prefer\"."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 5,
                  "endLine": 106,
                  "endColumn": 41,
                  "charOffset": 5254,
                  "charLength": 36,
                  "snippet": {
                    "text": "Prefer composition over inheritance."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 5,
                  "endLine": 113,
                  "endColumn": 42,
                  "charOffset": 3120,
                  "charLength": 37,
                  "snippet": {
                    "text": "# Check if company exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 5,
                  "endLine": 325,
                  "endColumn": 41,
                  "charOffset": 9487,
                  "charLength": 36,
                  "snippet": {
                    "text": "# Check if parent exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "The verb 'depend' requires the preposition 'on' (or 'upon')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 4,
                  "charOffset": 28,
                  "charLength": 1001,
                  "snippet": {
                    "text": "\"\"\"\nDatabase session management module.\n\nThis module provides utilities for creating and managing database sessions\nusing SQLAlchemy's async functionality. It configures the engine with\nappropriate connection pooling and provides session factory functions.\n\nThe module exports:\n- An async engine instance configured from application settings\n- A session maker configured for async operations\n- A dependency provider for FastAPI route functions\n- A context manager for use in scripts and background tasks\n\nUsage:\n    For FastAPI route dependencies:\n    ```python\n    from fastapi import Depends\n    from app.db.session import get_db\n\n    @router.get(\"/items\")\n    async def get_items(db: AsyncSession = Depends(get_db)):\n        # Use db session here\n        ...\n    ```\n\n    For scripts and context managers:\n    ```python\n    from app.db.session import get_db_context\n\n    async def some_task():\n        async with get_db_context() as db:\n            # Use db session here\n            ...\n    ```\n\"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This phrase is redundant. Consider using outside."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 8,
                  "charOffset": 2575,
                  "charLength": 250,
                  "snippet": {
                    "text": "\"\"\"\n    Context manager for database sessions.\n\n    This is useful for scripts that need to handle their own transactions\n    and session lifecycle outside of FastAPI's dependency injection.\n\n    Yields:\n        AsyncSession: Database session\n    \"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Possible typo detected."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/deployment/self-hosted.md"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 3,
                  "endLine": 192,
                  "endColumn": 49,
                  "charOffset": 3415,
                  "charLength": 46,
                  "snippet": {
                    "text": "Set up fail2ban to prevent brute force attacks"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 5,
                  "endLine": 216,
                  "endColumn": 43,
                  "charOffset": 6353,
                  "charLength": 38,
                  "snippet": {
                    "text": "# Check if category exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 5,
                  "endLine": 236,
                  "endColumn": 42,
                  "charOffset": 6478,
                  "charLength": 37,
                  "snippet": {
                    "text": "# Check if company exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This word is normally spelled as one."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 5,
                  "endLine": 339,
                  "endColumn": 49,
                  "charOffset": 14903,
                  "charLength": 44,
                  "snippet": {
                    "text": "Auto-correction and suggestion capabilities."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This word is normally spelled as one."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 3,
                  "endLine": 272,
                  "endColumn": 41,
                  "charOffset": 12631,
                  "charLength": 38,
                  "snippet": {
                    "text": "**Multi-factor Authentication (MFA)**:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Use a instead of 'an' if the following word doesn't start with a vowel sound, e.g. 'a sentence', 'a university'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/deployment/self-hosted.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 52,
                  "charOffset": 903,
                  "charLength": 51,
                  "snippet": {
                    "text": "Create an Nginx configuration file for Crown Nexus:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 5,
                  "endLine": 122,
                  "endColumn": 43,
                  "charOffset": 3545,
                  "charLength": 38,
                  "snippet": {
                    "text": "# Check if category exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean the verb log in instead of the noun 'login'?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/services/api.ts"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "endLine": 76,
                  "endColumn": 59,
                  "charOffset": 1852,
                  "charLength": 52,
                  "snippet": {
                    "text": "// If we're not on the login page, redirect to login"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean is?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 5,
                  "endLine": 414,
                  "endColumn": 41,
                  "charOffset": 12140,
                  "charLength": 36,
                  "snippet": {
                    "text": "# Check if parent exists if provided"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "GrazieInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Did you mean the verb log in instead of the noun 'login'?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/router/index.ts"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 7,
                  "endLine": 280,
                  "endColumn": 69,
                  "charOffset": 6071,
                  "charLength": 62,
                  "snippet": {
                    "text": "// If fetching profile fails, clear auth and redirect to login"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'xpack'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3024,
                  "startColumn": 29,
                  "endLine": 3024,
                  "endColumn": 59,
                  "charOffset": 98957,
                  "charLength": 30,
                  "snippet": {
                    "text": "\"xpack.security.enabled=false\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3204,
                  "startColumn": 21,
                  "endLine": 3204,
                  "endColumn": 53,
                  "charOffset": 107964,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'securepassword'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 9,
                  "endLine": 161,
                  "endColumn": 60,
                  "charOffset": 5117,
                  "charLength": 51,
                  "snippet": {
                    "text": "# Filter by attributes (more complex in PostgreSQL)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4072,
                  "startColumn": 21,
                  "endLine": 4072,
                  "endColumn": 46,
                  "charOffset": 141726,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'postrotate'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 19,
                  "endLine": 30,
                  "endColumn": 29,
                  "charOffset": 1659,
                  "charLength": 10,
                  "snippet": {
                    "text": "PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2644,
                  "startColumn": 21,
                  "endLine": 2644,
                  "endColumn": 46,
                  "charOffset": 83308,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'diskless'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8250,
                  "startColumn": 26,
                  "endLine": 8250,
                  "endColumn": 78,
                  "charOffset": 272071,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'abcdefghijklmnopqrstuvwxyz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3192,
                  "startColumn": 29,
                  "endLine": 3192,
                  "endColumn": 100,
                  "charOffset": 107648,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3892,
                  "startColumn": 29,
                  "endLine": 3892,
                  "endColumn": 106,
                  "charOffset": 136206,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2700,
                  "startColumn": 21,
                  "endLine": 2700,
                  "endColumn": 46,
                  "charOffset": 84912,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'refetch'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4116,
                  "startColumn": 29,
                  "endLine": 4116,
                  "endColumn": 89,
                  "charOffset": 143116,
                  "charLength": 60,
                  "snippet": {
                    "text": "\"# Generate __tablename__ automatically based on class name\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2772,
                  "startColumn": 29,
                  "endLine": 2772,
                  "endColumn": 100,
                  "charOffset": 87161,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3456,
                  "startColumn": 21,
                  "endLine": 3456,
                  "endColumn": 48,
                  "charOffset": 116087,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'levelname'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'wordprocessingml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3892,
                  "startColumn": 29,
                  "endLine": 3892,
                  "endColumn": 106,
                  "charOffset": 136206,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datetimes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4408,
                  "startColumn": 21,
                  "endLine": 4408,
                  "endColumn": 205,
                  "charOffset": 152814,
                  "charLength": 184,
                  "snippet": {
                    "text": "\"datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3792,
                  "startColumn": 21,
                  "endLine": 3792,
                  "endColumn": 53,
                  "charOffset": 133121,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'officedocument'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ASGI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/main.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 4,
                  "charOffset": 22,
                  "charLength": 455,
                  "snippet": {
                    "text": "\"\"\"\nFastAPI application entry point.\n\nThis module defines the FastAPI application instance and configures\nmiddleware, routers, and lifecycle events. It serves as the entry point\nfor the application when run with an ASGI server like Uvicorn.\n\nThe application uses:\n- FastAPI for API definition and routing\n- CORS middleware for cross-origin requests\n- Lifespan events for startup/shutdown operations\n- Centralized error handling\n- Versioned API routing\n\"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic.ini"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 1,
                  "charOffset": 0,
                  "charLength": 3323,
                  "snippet": {
                    "text": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'lsblk'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 69,
                  "endLine": 192,
                  "endColumn": 127,
                  "charOffset": 6834,
                  "charLength": 58,
                  "snippet": {
                    "text": "lsblk -d -o name,rota | grep -v 'loop' | head -2 | tail -1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3752,
                  "startColumn": 29,
                  "endLine": 3752,
                  "endColumn": 3470,
                  "charOffset": 128618,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 17,
                  "endColumn": 32,
                  "charOffset": 739,
                  "charLength": 25,
                  "snippet": {
                    "text": "Configuring PostgreSQL..."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3612,
                  "startColumn": 29,
                  "endLine": 3612,
                  "endColumn": 108,
                  "charOffset": 124472,
                  "charLength": 79,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'mazada'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3288,
                  "startColumn": 21,
                  "endLine": 3288,
                  "endColumn": 45,
                  "charOffset": 111139,
                  "charLength": 24,
                  "snippet": {
                    "text": "\"Typo: In word 'mazada'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'BACKUPSCRIPTEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 1,
                  "endLine": 1101,
                  "endColumn": 1,
                  "charOffset": 28495,
                  "charLength": 5028,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up backup strategy ===\"\n\n# Create backup directories\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups/{database,media,config}\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/backups\n\n# Create database backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_db.sh << 'BACKUPSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/database\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.sql\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials (only for the duration of this script)\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\necho \"Creating database backup: $BACKUP_FILE\"\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\necho \"Compressing database backup...\"\ngzip $BACKUP_FILE\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"Database: $DB_NAME\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 days)\necho \"Cleaning old backups...\"\nfind $BACKUP_DIR -name \"$DB_NAME-*.sql.gz\" -type f -mtime +30 -delete\nfind $BACKUP_DIR -name \"$DB_NAME-*.meta\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\n\necho \"Database backup completed: $BACKUP_FILE.gz\"\nBACKUPSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\n\n# Create media backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_media.sh << 'MEDIASCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/media\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/media-$TIMESTAMP.tar.gz\"\nMEDIA_DIR=\"/home/crown/$CROWN_APP_NAME/backend/media\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Backup media files\necho \"Creating media backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $(dirname $MEDIA_DIR) $(basename $MEDIA_DIR)\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"Media directory: $MEDIA_DIR\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\n\n# Keep only weekly backups after 60 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +60 -not -mtime +7 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +60 -not -mtime +7 -delete\n\n# Keep only monthly backups after 180 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +180 -not -mtime +30 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +180 -not -mtime +30 -delete\n\necho \"Media backup completed: $BACKUP_FILE\"\nMEDIASCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_media.sh\n\n# Create configuration backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_config.sh << 'CONFIGSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/config\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/config-$TIMESTAMP.tar.gz\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Files to back up\nCONFIG_FILES=(\n  \"/home/crown/$CROWN_APP_NAME/backend/.env\"\n  \"/etc/nginx/sites-available/$CROWN_APP_NAME\"\n  \"/etc/systemd/system/$CROWN_APP_NAME.service\"\n  \"/etc/postgresql/15/main/postgresql.conf\"\n  \"/etc/postgresql/15/main/pg_hba.conf\"\n  \"/etc/elasticsearch/elasticsearch.yml\"\n  \"/etc/redis/redis.conf\"\n)\n\n# Create a temporary directory\nTEMP_DIR=$(mktemp -d)\n\n# Copy files to temporary directory\nfor FILE in \"${CONFIG_FILES[@]}\"; do\n  if [ -f \"$FILE\" ]; then\n    DIR_NAME=$(dirname \"$FILE\" | sed 's/^\\///')\n    mkdir -p \"$TEMP_DIR/$DIR_NAME\"\n    cp \"$FILE\" \"$TEMP_DIR/$FILE\"\n  fi\ndone\n\n# Backup configuration files\necho \"Creating configuration backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $TEMP_DIR .\n\n# Remove temporary directory\nrm -rf $TEMP_DIR\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"Configuration files:\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\nprintf \"  %s\\n\" \"${CONFIG_FILES[@]}\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 versions)\nls -t $BACKUP_DIR/config-*.tar.gz | tail -n +31 | xargs rm -f 2>/dev/null || true\nls -t $BACKUP_DIR/config-*.meta | tail -n +31 | xargs rm -f 2>/dev/null || true\n\necho \"Configuration backup completed: $BACKUP_FILE\"\nCONFIGSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_config.sh\n\n# Set correct ownership for all scripts\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/scripts/\n\n# Add to crontab for automatic backups\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 3 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_media.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 4 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_config.sh\") | sudo crontab -u crown -\n\necho \"=== Backup strategy setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3864,
                  "startColumn": 29,
                  "endLine": 3864,
                  "endColumn": 49,
                  "charOffset": 135385,
                  "charLength": 20,
                  "snippet": {
                    "text": "\"\\\"securepassword\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3416,
                  "startColumn": 29,
                  "endLine": 3416,
                  "endColumn": 50,
                  "charOffset": 115004,
                  "charLength": 21,
                  "snippet": {
                    "text": "\"\\\"testpassword123\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/README.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 16,
                  "charOffset": 486,
                  "charLength": 13,
                  "snippet": {
                    "text": "PostgreSQL 15"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3640,
                  "startColumn": 29,
                  "endLine": 3640,
                  "endColumn": 44,
                  "charOffset": 125350,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7802,
                  "startColumn": 26,
                  "endLine": 7802,
                  "endColumn": 78,
                  "charOffset": 258675,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3876,
                  "startColumn": 21,
                  "endLine": 3876,
                  "endColumn": 53,
                  "charOffset": 135650,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'officedocument'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/product.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 5,
                  "endLine": 145,
                  "endColumn": 18,
                  "charOffset": 4980,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4834,
                  "startColumn": 26,
                  "endLine": 4834,
                  "endColumn": 78,
                  "charOffset": 165461,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'wordprocessingml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3976,
                  "startColumn": 29,
                  "endLine": 3976,
                  "endColumn": 106,
                  "charOffset": 138729,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "endLine": 166,
                  "endColumn": 23,
                  "charOffset": 7924,
                  "charLength": 16,
                  "snippet": {
                    "text": "PostgreSQL JSONB"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 18,
                  "endLine": 455,
                  "endColumn": 58,
                  "charOffset": 17438,
                  "charLength": 40,
                  "snippet": {
                    "text": "  - Primary role: PostgreSQL/MySQL/Redis"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Pydantic's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2532,
                  "startColumn": 21,
                  "endLine": 2532,
                  "endColumn": 49,
                  "charOffset": 79018,
                  "charLength": 28,
                  "snippet": {
                    "text": "\"Typo: In word 'Pydantic's'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'lsblk'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 77,
                  "endLine": 259,
                  "endColumn": 135,
                  "charOffset": 9528,
                  "charLength": 58,
                  "snippet": {
                    "text": "lsblk -d -o name,rota | grep -v 'loop' | head -2 | tail -1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8838,
                  "startColumn": 26,
                  "endLine": 8838,
                  "endColumn": 78,
                  "charOffset": 289836,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2408,
                  "startColumn": 29,
                  "endLine": 2408,
                  "endColumn": 70,
                  "charOffset": 75351,
                  "charLength": 41,
                  "snippet": {
                    "text": "\"inventory data are stored in PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2464,
                  "startColumn": 29,
                  "endLine": 2464,
                  "endColumn": 100,
                  "charOffset": 77094,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3736,
                  "startColumn": 21,
                  "endLine": 3736,
                  "endColumn": 46,
                  "charOffset": 128077,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'pathsep'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 31,
                  "endLine": 26,
                  "endColumn": 41,
                  "charOffset": 1359,
                  "charLength": 10,
                  "snippet": {
                    "text": "PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 27,
                  "endLine": 25,
                  "endColumn": 108,
                  "charOffset": 1199,
                  "charLength": 81,
                  "snippet": {
                    "text": "SELECT 1 FROM pg_database WHERE datname='{{ cluster.deployment_config.db_name }}'"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 21,
                  "charOffset": 92,
                  "charLength": 20,
                  "snippet": {
                    "text": "# Install PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2728,
                  "startColumn": 21,
                  "endLine": 2728,
                  "endColumn": 46,
                  "charOffset": 85759,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'refetch'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'mazada'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3304,
                  "startColumn": 29,
                  "endLine": 3304,
                  "endColumn": 41,
                  "charOffset": 111695,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"\\\"mazada\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8530,
                  "startColumn": 26,
                  "endLine": 8530,
                  "endColumn": 78,
                  "charOffset": 280595,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4974,
                  "startColumn": 26,
                  "endLine": 4974,
                  "endColumn": 78,
                  "charOffset": 169543,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3388,
                  "startColumn": 29,
                  "endLine": 3388,
                  "endColumn": 67,
                  "charOffset": 114155,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"// Remove from local list or refetch\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5394,
                  "startColumn": 26,
                  "endLine": 5394,
                  "endColumn": 78,
                  "charOffset": 181917,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'GUNICORNEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3540,
                  "startColumn": 21,
                  "endLine": 3540,
                  "endColumn": 48,
                  "charOffset": 122255,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'levelname'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2812,
                  "startColumn": 21,
                  "endLine": 2812,
                  "endColumn": 46,
                  "charOffset": 88280,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5058,
                  "startColumn": 26,
                  "endLine": 5058,
                  "endColumn": 78,
                  "charOffset": 172013,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'journalctl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 830,
                  "endColumn": 1,
                  "charOffset": 21611,
                  "charLength": 2990,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up advanced monitoring ===\"\n\n# Install monitoring tools\necho \"Installing monitoring tools...\"\nsudo apt install -y prometheus prometheus-node-exporter\n\n# Configure Prometheus\necho \"Configuring Prometheus...\"\nsudo cat > /etc/prometheus/prometheus.yml << 'PROMETHEUSEOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n      - targets: [\"localhost:9100\", \"$SERVER1_PRIVATE_IP:9100\", \"$SERVER2_PRIVATE_IP:9100\"]\nPROMETHEUSEOF\n\nsudo systemctl restart prometheus\nsudo systemctl enable prometheus\n\n# Create basic system health check script\necho \"Creating health check script...\"\ncat > /home/crown/health_check.sh << 'HEALTHEOF'\n#!/bin/bash\n\n# System health check script\nREPORT_FILE=\"/home/crown/health_report.txt\"\nALERT_EMAIL=\"$ADMIN_EMAIL\"\n\n# Start fresh report\necho \"System Health Report - $(date)\" > $REPORT_FILE\necho \"=======================================\" >> $REPORT_FILE\n\n# Check disk space\necho -e \"\\n== Disk Space ==\" >> $REPORT_FILE\ndf -h / | grep -v Filesystem >> $REPORT_FILE\n\n# Check memory\necho -e \"\\n== Memory Usage ==\" >> $REPORT_FILE\nfree -h >> $REPORT_FILE\n\n# Check load average\necho -e \"\\n== Load Average ==\" >> $REPORT_FILE\nuptime >> $REPORT_FILE\n\n# Check for failed services\necho -e \"\\n== Failed Services ==\" >> $REPORT_FILE\nsystemctl --failed >> $REPORT_FILE\n\n# Check system logs for errors\necho -e \"\\n== Recent System Errors ==\" >> $REPORT_FILE\njournalctl -p err..emerg --since \"1 hour ago\" | tail -n 20 >> $REPORT_FILE\n\n# Check application specific logs\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    echo -e \"\\n== Application Errors ==\" >> $REPORT_FILE\n    tail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error >> $REPORT_FILE\nfi\n\n# Check if we need to send alerts\nDISK_USAGE=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')\nMEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\nLOAD=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')\n\n# Send email alert if thresholds exceeded\nif [ $DISK_USAGE -gt 85 ] || [ $MEMORY_USAGE -gt 90 ] || [ $(echo \"$LOAD > 5\" | bc) -eq 1 ]; then\n    # Install mailutils if not present\n    if ! command -v mail &> /dev/null; then\n        sudo apt-get install -y mailutils\n    fi\n\n    echo \"ALERT: System resources critical on $(hostname) at $(date)\" | mail -s \"System Alert: $(hostname)\" $ALERT_EMAIL\nfi\nHEALTHEOF\n\nchmod +x /home/crown/health_check.sh\nchown crown:crown /home/crown/health_check.sh\n\n# Set up cron job for health checks\n(crontab -l 2>/dev/null; echo \"*/15 * * * * /home/crown/health_check.sh\") | crontab -\n\necho \"=== Monitoring setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4722,
                  "startColumn": 26,
                  "endLine": 4722,
                  "endColumn": 78,
                  "charOffset": 162182,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Pydantic's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 4,
                  "charOffset": 29,
                  "charLength": 578,
                  "snippet": {
                    "text": "\"\"\"\nApplication configuration module.\n\nThis module defines the application settings using Pydantic's BaseSettings\nfor environment variable validation and loading. It provides a centralized\nconfiguration system with type validation and default values.\n\nEnvironment variables can override these settings by using the same name\nas the class attributes. The module uses dotenv for local development\nto read values from a .env file.\n\nExamples:\n    To access configuration values:\n\n    ```python\n    from app.core.config import settings\n\n    db_name = settings.POSTGRES_DB\n    ```\n\"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Tful'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2420,
                  "startColumn": 21,
                  "endLine": 2420,
                  "endColumn": 43,
                  "charOffset": 75637,
                  "charLength": 22,
                  "snippet": {
                    "text": "\"Typo: In word 'Tful'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7992,
                  "startColumn": 21,
                  "endLine": 7992,
                  "endColumn": 58,
                  "charOffset": 264242,
                  "charLength": 37,
                  "snippet": {
                    "text": "\"Unresolved reference 'selectinload'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3624,
                  "startColumn": 21,
                  "endLine": 3624,
                  "endColumn": 48,
                  "charOffset": 124796,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/STRUCTURE.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 13,
                  "endLine": 73,
                  "endColumn": 25,
                  "charOffset": 3304,
                  "charLength": 12,
                  "snippet": {
                    "text": "composables/"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 28,
                  "charOffset": 0,
                  "charLength": 27,
                  "snippet": {
                    "text": "# backend/tests/conftest.py"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic.ini"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 1,
                  "charOffset": 0,
                  "charLength": 3323,
                  "snippet": {
                    "text": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3472,
                  "startColumn": 29,
                  "endLine": 3472,
                  "endColumn": 3470,
                  "charOffset": 116630,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'nodelay'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 76,
                  "charOffset": 1138,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'API's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3512,
                  "startColumn": 21,
                  "endLine": 3512,
                  "endColumn": 44,
                  "charOffset": 121196,
                  "charLength": 23,
                  "snippet": {
                    "text": "\"Typo: In word 'API's'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3220,
                  "startColumn": 29,
                  "endLine": 3220,
                  "endColumn": 692,
                  "charOffset": 108529,
                  "charLength": 663,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\nDatabase bootstrap script.\\n\\nThis script sets up the database with all necessary tables and creates\\nan initial admin user. It should be run after the database has been\\ncreated but before starting the application for the first time.\\n\\nThe script:\\n1. Creates all tables using SQLAlchemy models\\n2. Creates an admin user with provided credentials\\n3. Sets up required directories\\n4. Verifies database connectivity\\n\\nUsage:\\n    python scripts/database_bootstrap.py [email] [password] [full_name]\\n\\n    If credentials are not provided, defaults to:\\n    - Email: admin@example.com\\n    - Password: securepassword\\n    - Full name: Admin User\\n\\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Pydantic's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2548,
                  "startColumn": 29,
                  "endLine": 2548,
                  "endColumn": 634,
                  "charOffset": 79568,
                  "charLength": 605,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\nApplication configuration module.\\n\\nThis module defines the application settings using Pydantic's BaseSettings\\nfor environment variable validation and loading. It provides a centralized\\nconfiguration system with type validation and default values.\\n\\nEnvironment variables can override these settings by using the same name\\nas the class attributes. The module uses dotenv for local development\\nto read values from a .env file.\\n\\nExamples:\\n    To access configuration values:\\n\\n    ```python\\n    from app.core.config import settings\\n\\n    db_name = settings.POSTGRES_DB\\n    ```\\n\\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Altima'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3764,
                  "startColumn": 21,
                  "endLine": 3764,
                  "endColumn": 45,
                  "charOffset": 132304,
                  "charLength": 24,
                  "snippet": {
                    "text": "\"Typo: In word 'Altima'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/ProductCatalog.vue"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 9,
                  "endLine": 464,
                  "endColumn": 45,
                  "charOffset": 14237,
                  "charLength": 36,
                  "snippet": {
                    "text": "// Remove from local list or refetch"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'journalctl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 1,
                  "endLine": 947,
                  "endColumn": 1,
                  "charOffset": 24708,
                  "charLength": 3692,
                  "snippet": {
                    "text": "#!/bin/bash\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Crown Nexus Troubleshooting Tool ===\"\necho \"Running diagnostics...\"\n\n# Check system resources\necho -e \"\\n== System Resources ==\"\necho \"CPU Usage:\"\ntop -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1\"%\"}'\necho \"Memory Usage:\"\nfree -h | awk '/^Mem:/ {print $3 \"/\" $2 \" (\" int($3/$2*100)\")%\"}'\necho \"Disk Space:\"\ndf -h / | awk 'NR==2 {print $3 \"/\" $2 \" (\" $5 \")\"}'\n\n# Check key services\necho -e \"\\n== Service Status ==\"\nfor SERVICE in nginx postgresql elasticsearch redis-server crown-nexus; do\n    if systemctl is-active --quiet $SERVICE 2>/dev/null; then\n        echo \"$SERVICE: ✅ Running\"\n    else\n        echo \"$SERVICE: ❌ Not running\"\n        echo \"  - Checking logs: \"\n        journalctl -u $SERVICE --no-pager -n 20 | grep -i \"error\\|failed\\|warn\" | tail -5\n    fi\ndone\n\n# Check network connectivity\necho -e \"\\n== Network Connectivity ==\"\n\n# Check if server can reach other server\nif [ \"$(hostname -I | awk '{print $1}')\" = \"$SERVER1_PRIVATE_IP\" ]; then\n    if ping -c 1 $SERVER2_PRIVATE_IP &> /dev/null; then\n        echo \"Server 1 -> Server 2: ✅ Connected\"\n    else\n        echo \"Server 1 -> Server 2: ❌ Connection failed\"\n    fi\nelse\n    if ping -c 1 $SERVER1_PRIVATE_IP &> /dev/null; then\n        echo \"Server 2 -> Server 1: ✅ Connected\"\n    else\n        echo \"Server 2 -> Server 1: ❌ Connection failed\"\n    fi\nfi\n\n# Check database connectivity\necho -e \"\\n== Database Connectivity ==\"\nif command -v psql &> /dev/null; then\n    if [ -z \"$DB_PASSWORD\" ] || [ -z \"$DB_USER\" ] || [ -z \"$DB_NAME\" ]; then\n        echo \"Database credentials not found in environment\"\n    else\n        export PGPASSWORD=$DB_PASSWORD\n        if psql -U $DB_USER -h $SERVER2_PRIVATE_IP -d $DB_NAME -c \"SELECT 1\" &> /dev/null; then\n            echo \"Database connection: ✅ Successful\"\n        else\n            echo \"Database connection: ❌ Failed\"\n            echo \"  - Checking PostgreSQL logs:\"\n            sudo tail -5 /var/log/postgresql/postgresql-15-main.log\n        fi\n        unset PGPASSWORD\n    fi\nelse\n    echo \"psql command not found. Install postgresql-client package.\"\nfi\n\n# Check application logs for errors\necho -e \"\\n== Recent Application Errors ==\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    grep -i \"error\\|exception\\|fail\" /home/crown/$CROWN_APP_NAME/backend/logs/error.log | tail -10\nelse\n    echo \"No application logs found at expected location.\"\nfi\n\n# Check for common issues\necho -e \"\\n== Common Issues Check ==\"\n\n# Check permissions\necho \"Directory Permissions:\"\nls -ld /home/crown/$CROWN_APP_NAME/backend/media /home/crown/$CROWN_APP_NAME/backend/logs 2>/dev/null || echo \"Directories not found\"\n\n# Check environment file\necho \"Environment File:\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"  ✅ .env file exists\"\nelse\n    echo \"  ❌ .env file missing\"\nfi\n\necho -e \"\\n== Troubleshooting Recommendations ==\"\n\n# Based on checks, provide recommendations\nif ! systemctl is-active --quiet nginx 2>/dev/null; then\n    echo \"- Start/restart Nginx: sudo systemctl restart nginx\"\nfi\n\nif ! systemctl is-active --quiet postgresql 2>/dev/null; then\n    echo \"- Start/restart PostgreSQL: sudo systemctl restart postgresql\"\nfi\n\nif ! systemctl is-active --quiet crown-nexus 2>/dev/null; then\n    echo \"- Start/restart Crown Nexus: sudo systemctl restart crown-nexus\"\n    echo \"- Check logs: sudo journalctl -u crown-nexus -n 50\"\nfi\n\nif [ ! -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"- Create missing .env file from example\"\nfi\n\necho -e \"\\nFor more detailed troubleshooting, check the full logs or run specific diagnoses.\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/deployment/self-hosted.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 3,
                  "endLine": 10,
                  "endColumn": 16,
                  "charOffset": 202,
                  "charLength": 13,
                  "snippet": {
                    "text": "PostgreSQL 15"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'API's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2324,
                  "startColumn": 29,
                  "endLine": 2324,
                  "endColumn": 295,
                  "charOffset": 72668,
                  "charLength": 266,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\n    Context manager for database sessions.\\n\\n    This is useful for scripts that need to handle their own transactions\\n    and session lifecycle outside of FastAPI's dependency injection.\\n\\n    Yields:\\n        AsyncSession: Database session\\n    \\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 6626,
                  "startColumn": 26,
                  "endLine": 6626,
                  "endColumn": 78,
                  "charOffset": 222067,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2476,
                  "startColumn": 21,
                  "endLine": 2476,
                  "endColumn": 46,
                  "charOffset": 77410,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3080,
                  "startColumn": 29,
                  "endLine": 3080,
                  "endColumn": 3470,
                  "charOffset": 100627,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/architecture/overview.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 24,
                  "endLine": 7,
                  "endColumn": 34,
                  "charOffset": 169,
                  "charLength": 10,
                  "snippet": {
                    "text": "PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 1,
                  "charOffset": 2484,
                  "charLength": 362,
                  "snippet": {
                    "text": "# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,{{ server.ip }}'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5646,
                  "startColumn": 26,
                  "endLine": 5646,
                  "endColumn": 78,
                  "charOffset": 189335,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 3,
                  "endLine": 9,
                  "endColumn": 13,
                  "charOffset": 160,
                  "charLength": 10,
                  "snippet": {
                    "text": "PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 76,
                  "charOffset": 1138,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 29,
                  "endLine": 2940,
                  "endColumn": 3470,
                  "charOffset": 93082,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/FitmentCatalog.vue"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 9,
                  "endLine": 426,
                  "endColumn": 45,
                  "charOffset": 13430,
                  "charLength": 36,
                  "snippet": {
                    "text": "// Remove from local list or refetch"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'keyscan'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 1107,
                  "startColumn": 1,
                  "endLine": 1151,
                  "endColumn": 1,
                  "charOffset": 33608,
                  "charLength": 1693,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource common/env.sh\n\necho \"=== Starting Crown Nexus Deployment ===\"\n\n# Setup ssh keys if not already done\nif [ ! -f ~/.ssh/id_rsa ]; then\n    echo \"SSH key not found. Creating new SSH key...\"\n    ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N \"\"\n    echo \"Please ensure this SSH key is added to both servers.\"\n    echo \"Run: ssh-copy-id ubuntu@$SERVER1_PUBLIC_IP\"\n    echo \"Run: ssh-copy-id ubuntu@$SERVER2_PUBLIC_IP\"\n    read -p \"Press Enter once SSH keys are set up...\"\nfi\n\n# Prepare servers - copy setup scripts to servers\necho \"Copying setup scripts to servers...\"\n\n# Server 1 setup\necho \"Setting up Server 1 (Load Balancer & Frontend)...\"\nssh-keyscan -H $SERVER1_PUBLIC_IP >> ~/.ssh/known_hosts 2>/dev/null\nscp -r server1 common ubuntu@$SERVER1_PUBLIC_IP:~/\nssh ubuntu@$SERVER1_PUBLIC_IP \"cd server1 && bash setup.sh && cd .. && cd common && bash harden.sh && bash monitoring.sh\"\n\n# Server 2 setup\necho \"Setting up Server 2 (Backend & Database)...\"\nssh-keyscan -H $SERVER2_PUBLIC_IP >> ~/.ssh/known_hosts 2>/dev/null\nscp -r server2 common scripts ubuntu@$SERVER2_PUBLIC_IP:~/\nssh ubuntu@$SERVER2_PUBLIC_IP \"cd server2 && bash setup.sh && bash backup.sh && cd .. && cd common && bash harden.sh && bash monitoring.sh\"\n\necho \"=== Deployment completed successfully ===\"\necho \"\"\necho \"Frontend URL: https://$CROWN_DOMAIN\"\necho \"API Documentation: https://$CROWN_DOMAIN/api/v1/docs\"\necho \"\"\necho \"Admin login:\"\necho \"  Email: $ADMIN_EMAIL\"\necho \"  Password: $ADMIN_PASSWORD\"\necho \"\"\necho \"Please save your credentials file (crown-credentials.txt) in a secure location.\"\necho \"You will need these credentials for maintenance and administration.\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Tful'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/api/openapi.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 117,
                  "charOffset": 46,
                  "charLength": 116,
                  "snippet": {
                    "text": "The Crown Nexus API follows RESTful principles and is designed to be easy to use and integrate with various clients."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4918,
                  "startColumn": 26,
                  "endLine": 4918,
                  "endColumn": 78,
                  "charOffset": 167918,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2784,
                  "startColumn": 21,
                  "endLine": 2784,
                  "endColumn": 50,
                  "charOffset": 87477,
                  "charLength": 29,
                  "snippet": {
                    "text": "\"Typo: In word 'composables'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2840,
                  "startColumn": 21,
                  "endLine": 2840,
                  "endColumn": 46,
                  "charOffset": 89116,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3612,
                  "startColumn": 29,
                  "endLine": 3612,
                  "endColumn": 108,
                  "charOffset": 124472,
                  "charLength": 79,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5142,
                  "startColumn": 26,
                  "endLine": 5142,
                  "endColumn": 78,
                  "charOffset": 174525,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'endfor'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 1,
                  "charOffset": 1665,
                  "charLength": 617,
                  "snippet": {
                    "text": "# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\n{% for backend_server in cluster.get_servers_by_role(ServerRole.BACKEND) %}\nhost    {{ cluster.deployment_config.db_name }}    {{ cluster.deployment_config.db_user }}    {{ backend_server.ip }}/32    md5\n{% endfor %}\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'sharedscripts'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3248,
                  "startColumn": 29,
                  "endLine": 3248,
                  "endColumn": 100,
                  "charOffset": 109993,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'autoflush'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 6636,
                  "startColumn": 29,
                  "endLine": 6636,
                  "endColumn": 130,
                  "charOffset": 222439,
                  "charLength": 101,
                  "snippet": {
                    "text": "\"(\\n    test_engine,\\n    expire_on_commit=False,\\n    class_=AsyncSession,\\n    autoflush=False,\\n)\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3696,
                  "startColumn": 29,
                  "endLine": 3696,
                  "endColumn": 41,
                  "charOffset": 126963,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'MEDIASCRIPTEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 1,
                  "endLine": 1101,
                  "endColumn": 1,
                  "charOffset": 28495,
                  "charLength": 5028,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up backup strategy ===\"\n\n# Create backup directories\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups/{database,media,config}\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/backups\n\n# Create database backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_db.sh << 'BACKUPSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/database\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.sql\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials (only for the duration of this script)\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\necho \"Creating database backup: $BACKUP_FILE\"\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\necho \"Compressing database backup...\"\ngzip $BACKUP_FILE\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"Database: $DB_NAME\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 days)\necho \"Cleaning old backups...\"\nfind $BACKUP_DIR -name \"$DB_NAME-*.sql.gz\" -type f -mtime +30 -delete\nfind $BACKUP_DIR -name \"$DB_NAME-*.meta\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\n\necho \"Database backup completed: $BACKUP_FILE.gz\"\nBACKUPSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\n\n# Create media backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_media.sh << 'MEDIASCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/media\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/media-$TIMESTAMP.tar.gz\"\nMEDIA_DIR=\"/home/crown/$CROWN_APP_NAME/backend/media\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Backup media files\necho \"Creating media backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $(dirname $MEDIA_DIR) $(basename $MEDIA_DIR)\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"Media directory: $MEDIA_DIR\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\n\n# Keep only weekly backups after 60 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +60 -not -mtime +7 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +60 -not -mtime +7 -delete\n\n# Keep only monthly backups after 180 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +180 -not -mtime +30 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +180 -not -mtime +30 -delete\n\necho \"Media backup completed: $BACKUP_FILE\"\nMEDIASCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_media.sh\n\n# Create configuration backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_config.sh << 'CONFIGSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/config\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/config-$TIMESTAMP.tar.gz\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Files to back up\nCONFIG_FILES=(\n  \"/home/crown/$CROWN_APP_NAME/backend/.env\"\n  \"/etc/nginx/sites-available/$CROWN_APP_NAME\"\n  \"/etc/systemd/system/$CROWN_APP_NAME.service\"\n  \"/etc/postgresql/15/main/postgresql.conf\"\n  \"/etc/postgresql/15/main/pg_hba.conf\"\n  \"/etc/elasticsearch/elasticsearch.yml\"\n  \"/etc/redis/redis.conf\"\n)\n\n# Create a temporary directory\nTEMP_DIR=$(mktemp -d)\n\n# Copy files to temporary directory\nfor FILE in \"${CONFIG_FILES[@]}\"; do\n  if [ -f \"$FILE\" ]; then\n    DIR_NAME=$(dirname \"$FILE\" | sed 's/^\\///')\n    mkdir -p \"$TEMP_DIR/$DIR_NAME\"\n    cp \"$FILE\" \"$TEMP_DIR/$FILE\"\n  fi\ndone\n\n# Backup configuration files\necho \"Creating configuration backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $TEMP_DIR .\n\n# Remove temporary directory\nrm -rf $TEMP_DIR\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"Configuration files:\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\nprintf \"  %s\\n\" \"${CONFIG_FILES[@]}\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 versions)\nls -t $BACKUP_DIR/config-*.tar.gz | tail -n +31 | xargs rm -f 2>/dev/null || true\nls -t $BACKUP_DIR/config-*.meta | tail -n +31 | xargs rm -f 2>/dev/null || true\n\necho \"Configuration backup completed: $BACKUP_FILE\"\nCONFIGSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_config.sh\n\n# Set correct ownership for all scripts\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/scripts/\n\n# Add to crontab for automatic backups\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 3 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_media.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 4 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_config.sh\") | sudo crontab -u crown -\n\necho \"=== Backup strategy setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PROMETHEUSEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 830,
                  "endColumn": 1,
                  "charOffset": 21611,
                  "charLength": 2990,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up advanced monitoring ===\"\n\n# Install monitoring tools\necho \"Installing monitoring tools...\"\nsudo apt install -y prometheus prometheus-node-exporter\n\n# Configure Prometheus\necho \"Configuring Prometheus...\"\nsudo cat > /etc/prometheus/prometheus.yml << 'PROMETHEUSEOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n      - targets: [\"localhost:9100\", \"$SERVER1_PRIVATE_IP:9100\", \"$SERVER2_PRIVATE_IP:9100\"]\nPROMETHEUSEOF\n\nsudo systemctl restart prometheus\nsudo systemctl enable prometheus\n\n# Create basic system health check script\necho \"Creating health check script...\"\ncat > /home/crown/health_check.sh << 'HEALTHEOF'\n#!/bin/bash\n\n# System health check script\nREPORT_FILE=\"/home/crown/health_report.txt\"\nALERT_EMAIL=\"$ADMIN_EMAIL\"\n\n# Start fresh report\necho \"System Health Report - $(date)\" > $REPORT_FILE\necho \"=======================================\" >> $REPORT_FILE\n\n# Check disk space\necho -e \"\\n== Disk Space ==\" >> $REPORT_FILE\ndf -h / | grep -v Filesystem >> $REPORT_FILE\n\n# Check memory\necho -e \"\\n== Memory Usage ==\" >> $REPORT_FILE\nfree -h >> $REPORT_FILE\n\n# Check load average\necho -e \"\\n== Load Average ==\" >> $REPORT_FILE\nuptime >> $REPORT_FILE\n\n# Check for failed services\necho -e \"\\n== Failed Services ==\" >> $REPORT_FILE\nsystemctl --failed >> $REPORT_FILE\n\n# Check system logs for errors\necho -e \"\\n== Recent System Errors ==\" >> $REPORT_FILE\njournalctl -p err..emerg --since \"1 hour ago\" | tail -n 20 >> $REPORT_FILE\n\n# Check application specific logs\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    echo -e \"\\n== Application Errors ==\" >> $REPORT_FILE\n    tail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error >> $REPORT_FILE\nfi\n\n# Check if we need to send alerts\nDISK_USAGE=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')\nMEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\nLOAD=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')\n\n# Send email alert if thresholds exceeded\nif [ $DISK_USAGE -gt 85 ] || [ $MEMORY_USAGE -gt 90 ] || [ $(echo \"$LOAD > 5\" | bc) -eq 1 ]; then\n    # Install mailutils if not present\n    if ! command -v mail &> /dev/null; then\n        sudo apt-get install -y mailutils\n    fi\n\n    echo \"ALERT: System resources critical on $(hostname) at $(date)\" | mail -s \"System Alert: $(hostname)\" $ALERT_EMAIL\nfi\nHEALTHEOF\n\nchmod +x /home/crown/health_check.sh\nchown crown:crown /home/crown/health_check.sh\n\n# Set up cron job for health checks\n(crontab -l 2>/dev/null; echo \"*/15 * * * * /home/crown/health_check.sh\") | crontab -\n\necho \"=== Monitoring setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3276,
                  "startColumn": 29,
                  "endLine": 3276,
                  "endColumn": 50,
                  "charOffset": 110873,
                  "charLength": 21,
                  "snippet": {
                    "text": "\"\\\"testpassword123\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'errorlog'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'missingok'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3556,
                  "startColumn": 29,
                  "endLine": 3556,
                  "endColumn": 87,
                  "charOffset": 122800,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'spreadsheetml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 76,
                  "charOffset": 1138,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 29,
                  "endLine": 2940,
                  "endColumn": 3470,
                  "charOffset": 93082,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'wordprocessingml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3500,
                  "startColumn": 29,
                  "endLine": 3500,
                  "endColumn": 106,
                  "charOffset": 120874,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'nodelay'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datetimes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4324,
                  "startColumn": 21,
                  "endLine": 4324,
                  "endColumn": 205,
                  "charOffset": 149958,
                  "charLength": 184,
                  "snippet": {
                    "text": "\"datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2504,
                  "startColumn": 21,
                  "endLine": 2504,
                  "endColumn": 48,
                  "charOffset": 78201,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'HEALTHEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 830,
                  "endColumn": 1,
                  "charOffset": 21611,
                  "charLength": 2990,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up advanced monitoring ===\"\n\n# Install monitoring tools\necho \"Installing monitoring tools...\"\nsudo apt install -y prometheus prometheus-node-exporter\n\n# Configure Prometheus\necho \"Configuring Prometheus...\"\nsudo cat > /etc/prometheus/prometheus.yml << 'PROMETHEUSEOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n      - targets: [\"localhost:9100\", \"$SERVER1_PRIVATE_IP:9100\", \"$SERVER2_PRIVATE_IP:9100\"]\nPROMETHEUSEOF\n\nsudo systemctl restart prometheus\nsudo systemctl enable prometheus\n\n# Create basic system health check script\necho \"Creating health check script...\"\ncat > /home/crown/health_check.sh << 'HEALTHEOF'\n#!/bin/bash\n\n# System health check script\nREPORT_FILE=\"/home/crown/health_report.txt\"\nALERT_EMAIL=\"$ADMIN_EMAIL\"\n\n# Start fresh report\necho \"System Health Report - $(date)\" > $REPORT_FILE\necho \"=======================================\" >> $REPORT_FILE\n\n# Check disk space\necho -e \"\\n== Disk Space ==\" >> $REPORT_FILE\ndf -h / | grep -v Filesystem >> $REPORT_FILE\n\n# Check memory\necho -e \"\\n== Memory Usage ==\" >> $REPORT_FILE\nfree -h >> $REPORT_FILE\n\n# Check load average\necho -e \"\\n== Load Average ==\" >> $REPORT_FILE\nuptime >> $REPORT_FILE\n\n# Check for failed services\necho -e \"\\n== Failed Services ==\" >> $REPORT_FILE\nsystemctl --failed >> $REPORT_FILE\n\n# Check system logs for errors\necho -e \"\\n== Recent System Errors ==\" >> $REPORT_FILE\njournalctl -p err..emerg --since \"1 hour ago\" | tail -n 20 >> $REPORT_FILE\n\n# Check application specific logs\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    echo -e \"\\n== Application Errors ==\" >> $REPORT_FILE\n    tail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error >> $REPORT_FILE\nfi\n\n# Check if we need to send alerts\nDISK_USAGE=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')\nMEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\nLOAD=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')\n\n# Send email alert if thresholds exceeded\nif [ $DISK_USAGE -gt 85 ] || [ $MEMORY_USAGE -gt 90 ] || [ $(echo \"$LOAD > 5\" | bc) -eq 1 ]; then\n    # Install mailutils if not present\n    if ! command -v mail &> /dev/null; then\n        sudo apt-get install -y mailutils\n    fi\n\n    echo \"ALERT: System resources critical on $(hostname) at $(date)\" | mail -s \"System Alert: $(hostname)\" $ALERT_EMAIL\nfi\nHEALTHEOF\n\nchmod +x /home/crown/health_check.sh\nchown crown:crown /home/crown/health_check.sh\n\n# Set up cron job for health checks\n(crontab -l 2>/dev/null; echo \"*/15 * * * * /home/crown/health_check.sh\") | crontab -\n\necho \"=== Monitoring setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'requirepass'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 15,
                  "endLine": 176,
                  "endColumn": 54,
                  "charOffset": 8445,
                  "charLength": 39,
                  "snippet": {
                    "text": "inventory data are stored in PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3724,
                  "startColumn": 29,
                  "endLine": 3724,
                  "endColumn": 88,
                  "charOffset": 127773,
                  "charLength": 59,
                  "snippet": {
                    "text": "\"Data is stored in PostgreSQL and indexed in Elasticsearch\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/architecture/overview.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 17,
                  "endLine": 10,
                  "endColumn": 53,
                  "charOffset": 280,
                  "charLength": 36,
                  "snippet": {
                    "text": "PostgreSQL with SQLAlchemy async ORM"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic.ini"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 1,
                  "charOffset": 0,
                  "charLength": 3323,
                  "snippet": {
                    "text": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'wordprocessingml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3484,
                  "startColumn": 21,
                  "endLine": 3484,
                  "endColumn": 55,
                  "charOffset": 120316,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"Typo: In word 'wordprocessingml'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2576,
                  "startColumn": 29,
                  "endLine": 2576,
                  "endColumn": 64,
                  "charOffset": 80974,
                  "charLength": 35,
                  "snippet": {
                    "text": "\"Set up regular PostgreSQL backups\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7616,
                  "startColumn": 29,
                  "endLine": 7616,
                  "endColumn": 43,
                  "charOffset": 253190,
                  "charLength": 14,
                  "snippet": {
                    "text": "\"selectinload\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ESCONFEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGPASSWORD'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 1,
                  "endLine": 1101,
                  "endColumn": 1,
                  "charOffset": 28495,
                  "charLength": 5028,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up backup strategy ===\"\n\n# Create backup directories\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups/{database,media,config}\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/backups\n\n# Create database backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_db.sh << 'BACKUPSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/database\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.sql\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials (only for the duration of this script)\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\necho \"Creating database backup: $BACKUP_FILE\"\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\necho \"Compressing database backup...\"\ngzip $BACKUP_FILE\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"Database: $DB_NAME\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 days)\necho \"Cleaning old backups...\"\nfind $BACKUP_DIR -name \"$DB_NAME-*.sql.gz\" -type f -mtime +30 -delete\nfind $BACKUP_DIR -name \"$DB_NAME-*.meta\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\n\necho \"Database backup completed: $BACKUP_FILE.gz\"\nBACKUPSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\n\n# Create media backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_media.sh << 'MEDIASCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/media\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/media-$TIMESTAMP.tar.gz\"\nMEDIA_DIR=\"/home/crown/$CROWN_APP_NAME/backend/media\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Backup media files\necho \"Creating media backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $(dirname $MEDIA_DIR) $(basename $MEDIA_DIR)\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"Media directory: $MEDIA_DIR\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\n\n# Keep only weekly backups after 60 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +60 -not -mtime +7 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +60 -not -mtime +7 -delete\n\n# Keep only monthly backups after 180 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +180 -not -mtime +30 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +180 -not -mtime +30 -delete\n\necho \"Media backup completed: $BACKUP_FILE\"\nMEDIASCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_media.sh\n\n# Create configuration backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_config.sh << 'CONFIGSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/config\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/config-$TIMESTAMP.tar.gz\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Files to back up\nCONFIG_FILES=(\n  \"/home/crown/$CROWN_APP_NAME/backend/.env\"\n  \"/etc/nginx/sites-available/$CROWN_APP_NAME\"\n  \"/etc/systemd/system/$CROWN_APP_NAME.service\"\n  \"/etc/postgresql/15/main/postgresql.conf\"\n  \"/etc/postgresql/15/main/pg_hba.conf\"\n  \"/etc/elasticsearch/elasticsearch.yml\"\n  \"/etc/redis/redis.conf\"\n)\n\n# Create a temporary directory\nTEMP_DIR=$(mktemp -d)\n\n# Copy files to temporary directory\nfor FILE in \"${CONFIG_FILES[@]}\"; do\n  if [ -f \"$FILE\" ]; then\n    DIR_NAME=$(dirname \"$FILE\" | sed 's/^\\///')\n    mkdir -p \"$TEMP_DIR/$DIR_NAME\"\n    cp \"$FILE\" \"$TEMP_DIR/$FILE\"\n  fi\ndone\n\n# Backup configuration files\necho \"Creating configuration backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $TEMP_DIR .\n\n# Remove temporary directory\nrm -rf $TEMP_DIR\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"Configuration files:\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\nprintf \"  %s\\n\" \"${CONFIG_FILES[@]}\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 versions)\nls -t $BACKUP_DIR/config-*.tar.gz | tail -n +31 | xargs rm -f 2>/dev/null || true\nls -t $BACKUP_DIR/config-*.meta | tail -n +31 | xargs rm -f 2>/dev/null || true\n\necho \"Configuration backup completed: $BACKUP_FILE\"\nCONFIGSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_config.sh\n\n# Set correct ownership for all scripts\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/scripts/\n\n# Add to crontab for automatic backups\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 3 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_media.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 4 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_config.sh\") | sudo crontab -u crown -\n\necho \"=== Backup strategy setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Vuetify's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3164,
                  "startColumn": 29,
                  "endLine": 3164,
                  "endColumn": 95,
                  "charOffset": 106766,
                  "charLength": 66,
                  "snippet": {
                    "text": "\"throughout the application. It uses Vuetify's snackbar component\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7662,
                  "startColumn": 26,
                  "endLine": 7662,
                  "endColumn": 78,
                  "charOffset": 254525,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "endLine": 62,
                  "endColumn": 22,
                  "charOffset": 1868,
                  "charLength": 286,
                  "snippet": {
                    "text": "@declared_attr\n    def __tablename__(cls) -> str:\n        \"\"\"\n        Generate table name automatically from class name.\n\n        The generated name is the lowercase version of the class name.\n\n        Returns:\n            str: Table name\n        \"\"\"\n        return cls.__name__.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3360,
                  "startColumn": 29,
                  "endLine": 3360,
                  "endColumn": 41,
                  "charOffset": 113334,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'NGINXEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4694,
                  "startColumn": 26,
                  "endLine": 4694,
                  "endColumn": 78,
                  "charOffset": 161376,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 9174,
                  "startColumn": 26,
                  "endLine": 9174,
                  "endColumn": 78,
                  "charOffset": 299891,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2448,
                  "startColumn": 21,
                  "endLine": 2448,
                  "endColumn": 53,
                  "charOffset": 76538,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'officedocument'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2968,
                  "startColumn": 29,
                  "endLine": 2968,
                  "endColumn": 41,
                  "charOffset": 97319,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2588,
                  "startColumn": 21,
                  "endLine": 2588,
                  "endColumn": 47,
                  "charOffset": 81254,
                  "charLength": 26,
                  "snippet": {
                    "text": "\"Typo: In word 'conftest'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'SAST'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4016,
                  "startColumn": 21,
                  "endLine": 4016,
                  "endColumn": 43,
                  "charOffset": 140125,
                  "charLength": 22,
                  "snippet": {
                    "text": "\"Typo: In word 'SAST'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3752,
                  "startColumn": 29,
                  "endLine": 3752,
                  "endColumn": 3470,
                  "charOffset": 128618,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2952,
                  "startColumn": 21,
                  "endLine": 2952,
                  "endColumn": 46,
                  "charOffset": 96768,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/product.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 5,
                  "endLine": 217,
                  "endColumn": 18,
                  "charOffset": 7245,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'wordprocessingml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "endLine": 43,
                  "endColumn": 82,
                  "charOffset": 1019,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8026,
                  "startColumn": 26,
                  "endLine": 8026,
                  "endColumn": 78,
                  "charOffset": 265279,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pgdg'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 129,
                  "charOffset": 124,
                  "charLength": 117,
                  "snippet": {
                    "text": "'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 29,
                  "endLine": 280,
                  "endColumn": 125,
                  "charOffset": 8554,
                  "charLength": 96,
                  "snippet": {
                    "text": "\"stmt = select(Product).where(Product.id == product_id).options(selectinload(Product.category))\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3848,
                  "startColumn": 21,
                  "endLine": 3848,
                  "endColumn": 53,
                  "charOffset": 134814,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'securepassword'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2800,
                  "startColumn": 29,
                  "endLine": 2800,
                  "endColumn": 46,
                  "charOffset": 88018,
                  "charLength": 17,
                  "snippet": {
                    "text": "\"Vue composables\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3080,
                  "startColumn": 29,
                  "endLine": 3080,
                  "endColumn": 3470,
                  "charOffset": 100627,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'SYSCTLEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 1,
                  "endLine": 720,
                  "endColumn": 1,
                  "charOffset": 19680,
                  "charLength": 1827,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\necho \"=== Hardening security settings ===\"\n\n# Configure SSH\necho \"Configuring secure SSH...\"\nsudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config\nsudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nsudo systemctl restart ssh\n\n# Setup automatic security updates\necho \"Setting up automatic security updates...\"\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Configure fail2ban\necho \"Configuring fail2ban...\"\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Setup firewall basic rules\necho \"Configuring basic firewall rules...\"\nsudo ufw allow OpenSSH\nsudo ufw --force enable\n\n# Secure shared memory\necho \"Securing shared memory...\"\necho \"tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0\" | sudo tee -a /etc/fstab\n\n# Configure system security settings\necho \"Configuring system security settings...\"\nsudo bash -c \"cat > /etc/sysctl.d/99-security.conf\" << 'SYSCTLEOF'\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n\n# Ignore ICMP broadcast requests\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Block SYN attacks\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 2048\nnet.ipv4.tcp_synack_retries = 2\nnet.ipv4.tcp_syn_retries = 5\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Disable IP forwarding\nnet.ipv4.ip_forward = 0\nSYSCTLEOF\n\nsudo sysctl -p /etc/sysctl.d/99-security.conf\n\necho \"=== Security hardening completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2716,
                  "startColumn": 29,
                  "endLine": 2716,
                  "endColumn": 67,
                  "charOffset": 85476,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"// Remove from local list or refetch\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'joinedload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 29,
                  "endLine": 672,
                  "endColumn": 111,
                  "charOffset": 22382,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"query = select(User).where(User.id == user_id).options(joinedload(User.company))\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3960,
                  "startColumn": 21,
                  "endLine": 3960,
                  "endColumn": 53,
                  "charOffset": 138173,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'openxmlformats'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7600,
                  "startColumn": 21,
                  "endLine": 7600,
                  "endColumn": 58,
                  "charOffset": 252621,
                  "charLength": 37,
                  "snippet": {
                    "text": "\"Unresolved reference 'selectinload'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_connection_info_check.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 15,
                  "endLine": 18,
                  "endColumn": 47,
                  "charOffset": 447,
                  "charLength": 32,
                  "snippet": {
                    "text": "f\"PostgreSQL version: {version}\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3568,
                  "startColumn": 21,
                  "endLine": 3568,
                  "endColumn": 48,
                  "charOffset": 123103,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "endLine": 43,
                  "endColumn": 82,
                  "charOffset": 1019,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'SERVICEEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8160,
                  "startColumn": 21,
                  "endLine": 8160,
                  "endColumn": 88,
                  "charOffset": 269320,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"Unused import statement 'from sqlalchemy.orm import selectinload'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 63,
                  "charOffset": 1782,
                  "charLength": 58,
                  "snippet": {
                    "text": "# Generate __tablename__ automatically based on class name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3372,
                  "startColumn": 21,
                  "endLine": 3372,
                  "endColumn": 46,
                  "charOffset": 113591,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'refetch'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3428,
                  "startColumn": 21,
                  "endLine": 3428,
                  "endColumn": 48,
                  "charOffset": 115270,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'joinedload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 29,
                  "endLine": 392,
                  "endColumn": 111,
                  "charOffset": 12498,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"query = select(User).where(User.id == user_id).options(joinedload(User.company))\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'sessionmaker'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3316,
                  "startColumn": 21,
                  "endLine": 3316,
                  "endColumn": 51,
                  "charOffset": 111952,
                  "charLength": 30,
                  "snippet": {
                    "text": "\"Typo: In word 'sessionmaker'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'asctime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3556,
                  "startColumn": 29,
                  "endLine": 3556,
                  "endColumn": 87,
                  "charOffset": 122800,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'rdbcompression'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3752,
                  "startColumn": 29,
                  "endLine": 3752,
                  "endColumn": 3470,
                  "charOffset": 128618,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3472,
                  "startColumn": 29,
                  "endLine": 3472,
                  "endColumn": 3470,
                  "charOffset": 116630,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3584,
                  "startColumn": 29,
                  "endLine": 3584,
                  "endColumn": 44,
                  "charOffset": 123656,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testclient'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8832,
                  "startColumn": 21,
                  "endLine": 8832,
                  "endColumn": 90,
                  "charOffset": 289615,
                  "charLength": 69,
                  "snippet": {
                    "text": "\"Unused import statement 'from fastapi.testclient import TestClient'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 29,
                  "endLine": 2940,
                  "endColumn": 3470,
                  "charOffset": 93082,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'REDISCONFEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2688,
                  "startColumn": 29,
                  "endLine": 2688,
                  "endColumn": 44,
                  "charOffset": 84652,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/init_db.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 15,
                  "endLine": 60,
                  "endColumn": 63,
                  "charOffset": 1724,
                  "charLength": 48,
                  "snippet": {
                    "text": "f\"❌ Failed to connect to PostgreSQL server: {e}\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/STRUCTURE.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 37,
                  "endLine": 73,
                  "endColumn": 52,
                  "charOffset": 3328,
                  "charLength": 15,
                  "snippet": {
                    "text": "Vue composables"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3808,
                  "startColumn": 29,
                  "endLine": 3808,
                  "endColumn": 108,
                  "charOffset": 133677,
                  "charLength": 79,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5506,
                  "startColumn": 26,
                  "endLine": 5506,
                  "endColumn": 78,
                  "charOffset": 185204,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5534,
                  "startColumn": 26,
                  "endLine": 5534,
                  "endColumn": 78,
                  "charOffset": 186040,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'asctime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3904,
                  "startColumn": 21,
                  "endLine": 3904,
                  "endColumn": 46,
                  "charOffset": 136528,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'asctime'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 18,
                  "endLine": 421,
                  "endColumn": 55,
                  "charOffset": 15586,
                  "charLength": 37,
                  "snippet": {
                    "text": "  - Database role: PostgreSQL/MySQL ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datetimes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4240,
                  "startColumn": 21,
                  "endLine": 4240,
                  "endColumn": 205,
                  "charOffset": 147114,
                  "charLength": 184,
                  "snippet": {
                    "text": "\"datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'lazyfree'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'emerg'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 830,
                  "endColumn": 1,
                  "charOffset": 21611,
                  "charLength": 2990,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up advanced monitoring ===\"\n\n# Install monitoring tools\necho \"Installing monitoring tools...\"\nsudo apt install -y prometheus prometheus-node-exporter\n\n# Configure Prometheus\necho \"Configuring Prometheus...\"\nsudo cat > /etc/prometheus/prometheus.yml << 'PROMETHEUSEOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n      - targets: [\"localhost:9100\", \"$SERVER1_PRIVATE_IP:9100\", \"$SERVER2_PRIVATE_IP:9100\"]\nPROMETHEUSEOF\n\nsudo systemctl restart prometheus\nsudo systemctl enable prometheus\n\n# Create basic system health check script\necho \"Creating health check script...\"\ncat > /home/crown/health_check.sh << 'HEALTHEOF'\n#!/bin/bash\n\n# System health check script\nREPORT_FILE=\"/home/crown/health_report.txt\"\nALERT_EMAIL=\"$ADMIN_EMAIL\"\n\n# Start fresh report\necho \"System Health Report - $(date)\" > $REPORT_FILE\necho \"=======================================\" >> $REPORT_FILE\n\n# Check disk space\necho -e \"\\n== Disk Space ==\" >> $REPORT_FILE\ndf -h / | grep -v Filesystem >> $REPORT_FILE\n\n# Check memory\necho -e \"\\n== Memory Usage ==\" >> $REPORT_FILE\nfree -h >> $REPORT_FILE\n\n# Check load average\necho -e \"\\n== Load Average ==\" >> $REPORT_FILE\nuptime >> $REPORT_FILE\n\n# Check for failed services\necho -e \"\\n== Failed Services ==\" >> $REPORT_FILE\nsystemctl --failed >> $REPORT_FILE\n\n# Check system logs for errors\necho -e \"\\n== Recent System Errors ==\" >> $REPORT_FILE\njournalctl -p err..emerg --since \"1 hour ago\" | tail -n 20 >> $REPORT_FILE\n\n# Check application specific logs\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    echo -e \"\\n== Application Errors ==\" >> $REPORT_FILE\n    tail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error >> $REPORT_FILE\nfi\n\n# Check if we need to send alerts\nDISK_USAGE=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')\nMEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\nLOAD=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')\n\n# Send email alert if thresholds exceeded\nif [ $DISK_USAGE -gt 85 ] || [ $MEMORY_USAGE -gt 90 ] || [ $(echo \"$LOAD > 5\" | bc) -eq 1 ]; then\n    # Install mailutils if not present\n    if ! command -v mail &> /dev/null; then\n        sudo apt-get install -y mailutils\n    fi\n\n    echo \"ALERT: System resources critical on $(hostname) at $(date)\" | mail -s \"System Alert: $(hostname)\" $ALERT_EMAIL\nfi\nHEALTHEOF\n\nchmod +x /home/crown/health_check.sh\nchown crown:crown /home/crown/health_check.sh\n\n# Set up cron job for health checks\n(crontab -l 2>/dev/null; echo \"*/15 * * * * /home/crown/health_check.sh\") | crontab -\n\necho \"=== Monitoring setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 18,
                  "endLine": 126,
                  "endColumn": 55,
                  "charOffset": 4208,
                  "charLength": 37,
                  "snippet": {
                    "text": "✅ Database server (PostgreSQL, MySQL)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 55,
                  "charOffset": 1578,
                  "charLength": 54,
                  "snippet": {
                    "text": "# Configure PostgreSQL for access from backend servers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2924,
                  "startColumn": 21,
                  "endLine": 2924,
                  "endColumn": 44,
                  "charOffset": 92543,
                  "charLength": 23,
                  "snippet": {
                    "text": "\"Typo: In word 'gettz'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ASGI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2632,
                  "startColumn": 29,
                  "endLine": 2632,
                  "endColumn": 505,
                  "charOffset": 82587,
                  "charLength": 476,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\nFastAPI application entry point.\\n\\nThis module defines the FastAPI application instance and configures\\nmiddleware, routers, and lifecycle events. It serves as the entry point\\nfor the application when run with an ASGI server like Uvicorn.\\n\\nThe application uses:\\n- FastAPI for API definition and routing\\n- CORS middleware for cross-origin requests\\n- Lifespan events for startup/shutdown operations\\n- Centralized error handling\\n- Versioned API routing\\n\\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2986,
                  "startColumn": 26,
                  "endLine": 2986,
                  "endColumn": 78,
                  "charOffset": 97754,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Vuetify's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3148,
                  "startColumn": 21,
                  "endLine": 3148,
                  "endColumn": 48,
                  "charOffset": 106209,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'Vuetify's'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'gettz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3472,
                  "startColumn": 29,
                  "endLine": 3472,
                  "endColumn": 3470,
                  "charOffset": 116630,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4666,
                  "startColumn": 26,
                  "endLine": 4666,
                  "endColumn": 78,
                  "charOffset": 160566,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'xpack'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5226,
                  "startColumn": 26,
                  "endLine": 5226,
                  "endColumn": 78,
                  "charOffset": 176963,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8306,
                  "startColumn": 26,
                  "endLine": 8306,
                  "endColumn": 78,
                  "charOffset": 273723,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3108,
                  "startColumn": 29,
                  "endLine": 3108,
                  "endColumn": 333,
                  "charOffset": 104868,
                  "charLength": 304,
                  "snippet": {
                    "text": "\"@declared_attr\\n    def __tablename__(cls) -> str:\\n        \\\"\\\"\\\"\\n        Generate table name automatically from class name.\\n\\n        The generated name is the lowercase version of the class name.\\n\\n        Returns:\\n            str: Table name\\n        \\\"\\\"\\\"\\n        return cls.__name__.lower()\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3920,
                  "startColumn": 29,
                  "endLine": 3920,
                  "endColumn": 87,
                  "charOffset": 137071,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5982,
                  "startColumn": 26,
                  "endLine": 5982,
                  "endColumn": 78,
                  "charOffset": 199089,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 29,
                  "endLine": 336,
                  "endColumn": 125,
                  "charOffset": 10760,
                  "charLength": 96,
                  "snippet": {
                    "text": "\"stmt = select(Product).where(Product.id == product_id).options(selectinload(Product.category))\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3092,
                  "startColumn": 21,
                  "endLine": 3092,
                  "endColumn": 48,
                  "charOffset": 104313,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'abcdefghijklmnopqrstuvwxyz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 18,
                  "endLine": 342,
                  "endColumn": 85,
                  "charOffset": 9959,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4060,
                  "startColumn": 29,
                  "endLine": 4060,
                  "endColumn": 49,
                  "charOffset": 141461,
                  "charLength": 20,
                  "snippet": {
                    "text": "\"PostgreSQL cluster\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 1,
                  "endLine": 947,
                  "endColumn": 1,
                  "charOffset": 24708,
                  "charLength": 3692,
                  "snippet": {
                    "text": "#!/bin/bash\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Crown Nexus Troubleshooting Tool ===\"\necho \"Running diagnostics...\"\n\n# Check system resources\necho -e \"\\n== System Resources ==\"\necho \"CPU Usage:\"\ntop -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1\"%\"}'\necho \"Memory Usage:\"\nfree -h | awk '/^Mem:/ {print $3 \"/\" $2 \" (\" int($3/$2*100)\")%\"}'\necho \"Disk Space:\"\ndf -h / | awk 'NR==2 {print $3 \"/\" $2 \" (\" $5 \")\"}'\n\n# Check key services\necho -e \"\\n== Service Status ==\"\nfor SERVICE in nginx postgresql elasticsearch redis-server crown-nexus; do\n    if systemctl is-active --quiet $SERVICE 2>/dev/null; then\n        echo \"$SERVICE: ✅ Running\"\n    else\n        echo \"$SERVICE: ❌ Not running\"\n        echo \"  - Checking logs: \"\n        journalctl -u $SERVICE --no-pager -n 20 | grep -i \"error\\|failed\\|warn\" | tail -5\n    fi\ndone\n\n# Check network connectivity\necho -e \"\\n== Network Connectivity ==\"\n\n# Check if server can reach other server\nif [ \"$(hostname -I | awk '{print $1}')\" = \"$SERVER1_PRIVATE_IP\" ]; then\n    if ping -c 1 $SERVER2_PRIVATE_IP &> /dev/null; then\n        echo \"Server 1 -> Server 2: ✅ Connected\"\n    else\n        echo \"Server 1 -> Server 2: ❌ Connection failed\"\n    fi\nelse\n    if ping -c 1 $SERVER1_PRIVATE_IP &> /dev/null; then\n        echo \"Server 2 -> Server 1: ✅ Connected\"\n    else\n        echo \"Server 2 -> Server 1: ❌ Connection failed\"\n    fi\nfi\n\n# Check database connectivity\necho -e \"\\n== Database Connectivity ==\"\nif command -v psql &> /dev/null; then\n    if [ -z \"$DB_PASSWORD\" ] || [ -z \"$DB_USER\" ] || [ -z \"$DB_NAME\" ]; then\n        echo \"Database credentials not found in environment\"\n    else\n        export PGPASSWORD=$DB_PASSWORD\n        if psql -U $DB_USER -h $SERVER2_PRIVATE_IP -d $DB_NAME -c \"SELECT 1\" &> /dev/null; then\n            echo \"Database connection: ✅ Successful\"\n        else\n            echo \"Database connection: ❌ Failed\"\n            echo \"  - Checking PostgreSQL logs:\"\n            sudo tail -5 /var/log/postgresql/postgresql-15-main.log\n        fi\n        unset PGPASSWORD\n    fi\nelse\n    echo \"psql command not found. Install postgresql-client package.\"\nfi\n\n# Check application logs for errors\necho -e \"\\n== Recent Application Errors ==\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    grep -i \"error\\|exception\\|fail\" /home/crown/$CROWN_APP_NAME/backend/logs/error.log | tail -10\nelse\n    echo \"No application logs found at expected location.\"\nfi\n\n# Check for common issues\necho -e \"\\n== Common Issues Check ==\"\n\n# Check permissions\necho \"Directory Permissions:\"\nls -ld /home/crown/$CROWN_APP_NAME/backend/media /home/crown/$CROWN_APP_NAME/backend/logs 2>/dev/null || echo \"Directories not found\"\n\n# Check environment file\necho \"Environment File:\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"  ✅ .env file exists\"\nelse\n    echo \"  ❌ .env file missing\"\nfi\n\necho -e \"\\n== Troubleshooting Recommendations ==\"\n\n# Based on checks, provide recommendations\nif ! systemctl is-active --quiet nginx 2>/dev/null; then\n    echo \"- Start/restart Nginx: sudo systemctl restart nginx\"\nfi\n\nif ! systemctl is-active --quiet postgresql 2>/dev/null; then\n    echo \"- Start/restart PostgreSQL: sudo systemctl restart postgresql\"\nfi\n\nif ! systemctl is-active --quiet crown-nexus 2>/dev/null; then\n    echo \"- Start/restart Crown Nexus: sudo systemctl restart crown-nexus\"\n    echo \"- Check logs: sudo journalctl -u crown-nexus -n 50\"\nfi\n\nif [ ! -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"- Create missing .env file from example\"\nfi\n\necho -e \"\\nFor more detailed troubleshooting, check the full logs or run specific diagnoses.\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2520,
                  "startColumn": 29,
                  "endLine": 2520,
                  "endColumn": 44,
                  "charOffset": 78758,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'xpack'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/infrastructure/docker/docker-compose.yml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 58,
                  "endColumn": 37,
                  "charOffset": 1254,
                  "charLength": 28,
                  "snippet": {
                    "text": "xpack.security.enabled=false"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3120,
                  "startColumn": 21,
                  "endLine": 3120,
                  "endColumn": 46,
                  "charOffset": 105417,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3500,
                  "startColumn": 29,
                  "endLine": 3500,
                  "endColumn": 106,
                  "charOffset": 120874,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 84,
                  "charOffset": 1256,
                  "charLength": 75,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.presentationml.presentation\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'SAST'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4032,
                  "startColumn": 29,
                  "endLine": 4032,
                  "endColumn": 35,
                  "charOffset": 140656,
                  "charLength": 6,
                  "snippet": {
                    "text": "\"SAST\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'lscpu'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 77,
                  "endLine": 253,
                  "endColumn": 109,
                  "charOffset": 9081,
                  "charLength": 32,
                  "snippet": {
                    "text": "lscpu | grep 'CPU(s):' | head -1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Tful'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2436,
                  "startColumn": 29,
                  "endLine": 2436,
                  "endColumn": 147,
                  "charOffset": 76175,
                  "charLength": 118,
                  "snippet": {
                    "text": "\"The Crown Nexus API follows RESTful principles and is designed to be easy to use and integrate with various clients.\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3948,
                  "startColumn": 29,
                  "endLine": 3948,
                  "endColumn": 47,
                  "charOffset": 137910,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"PostgreSQL JSONB\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5730,
                  "startColumn": 26,
                  "endLine": 5730,
                  "endColumn": 78,
                  "charOffset": 191774,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'findtime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3596,
                  "startColumn": 21,
                  "endLine": 3596,
                  "endColumn": 53,
                  "charOffset": 123916,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'openxmlformats'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2828,
                  "startColumn": 29,
                  "endLine": 2828,
                  "endColumn": 67,
                  "charOffset": 88833,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"PostgreSQL with SQLAlchemy async ORM\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3808,
                  "startColumn": 29,
                  "endLine": 3808,
                  "endColumn": 108,
                  "charOffset": 133677,
                  "charLength": 79,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 18,
                  "endLine": 500,
                  "endColumn": 58,
                  "charOffset": 20163,
                  "charLength": 40,
                  "snippet": {
                    "text": "  - Primary role: PostgreSQL/MySQL/Redis"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2884,
                  "startColumn": 29,
                  "endLine": 2884,
                  "endColumn": 81,
                  "charOffset": 91392,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"f\\\"❌ Failed to connect to PostgreSQL server: {e}\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3500,
                  "startColumn": 29,
                  "endLine": 3500,
                  "endColumn": 106,
                  "charOffset": 120874,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datetimes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4352,
                  "startColumn": 21,
                  "endLine": 4352,
                  "endColumn": 205,
                  "charOffset": 150915,
                  "charLength": 184,
                  "snippet": {
                    "text": "\"datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'everysec'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'xpack'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3008,
                  "startColumn": 21,
                  "endLine": 3008,
                  "endColumn": 44,
                  "charOffset": 98395,
                  "charLength": 23,
                  "snippet": {
                    "text": "\"Typo: In word 'xpack'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'sessionmaker'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 47,
                  "charOffset": 1674,
                  "charLength": 46,
                  "snippet": {
                    "text": "# Create sessionmaker with reasonable defaults"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 21,
                  "endLine": 96,
                  "endColumn": 38,
                  "charOffset": 2372,
                  "charLength": 17,
                  "snippet": {
                    "text": "\"testpassword123\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'API's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 8,
                  "charOffset": 2575,
                  "charLength": 250,
                  "snippet": {
                    "text": "\"\"\"\n    Context manager for database sessions.\n\n    This is useful for scripts that need to handle their own transactions\n    and session lifecycle outside of FastAPI's dependency injection.\n\n    Yields:\n        AsyncSession: Database session\n    \"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'maxmemory'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'appendfsync'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGCONFEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 4,
                  "charOffset": 62,
                  "charLength": 635,
                  "snippet": {
                    "text": "\"\"\"\nDatabase bootstrap script.\n\nThis script sets up the database with all necessary tables and creates\nan initial admin user. It should be run after the database has been\ncreated but before starting the application for the first time.\n\nThe script:\n1. Creates all tables using SQLAlchemy models\n2. Creates an admin user with provided credentials\n3. Sets up required directories\n4. Verifies database connectivity\n\nUsage:\n    python scripts/database_bootstrap.py [email] [password] [full_name]\n\n    If credentials are not provided, defaults to:\n    - Email: admin@example.com\n    - Password: securepassword\n    - Full name: Admin User\n\"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'mazada'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 13,
                  "endLine": 263,
                  "endColumn": 21,
                  "charOffset": 7998,
                  "charLength": 8,
                  "snippet": {
                    "text": "\"mazada\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2492,
                  "startColumn": 29,
                  "endLine": 2492,
                  "endColumn": 41,
                  "charOffset": 77944,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3052,
                  "startColumn": 29,
                  "endLine": 3052,
                  "endColumn": 65,
                  "charOffset": 99805,
                  "charLength": 36,
                  "snippet": {
                    "text": "\"f\\\"PostgreSQL version: {version}\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'BACKUPEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8446,
                  "startColumn": 26,
                  "endLine": 8446,
                  "endColumn": 78,
                  "charOffset": 278030,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 9286,
                  "startColumn": 26,
                  "endLine": 9286,
                  "endColumn": 78,
                  "charOffset": 303204,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'abcdefghijklmnopqrstuvwxyz'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3176,
                  "startColumn": 21,
                  "endLine": 3176,
                  "endColumn": 65,
                  "charOffset": 107077,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"Typo: In word 'abcdefghijklmnopqrstuvwxyz'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'rdbchecksum'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'CONFIGSCRIPTEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 1,
                  "endLine": 1101,
                  "endColumn": 1,
                  "charOffset": 28495,
                  "charLength": 5028,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up backup strategy ===\"\n\n# Create backup directories\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups/{database,media,config}\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/backups\n\n# Create database backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_db.sh << 'BACKUPSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/database\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.sql\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials (only for the duration of this script)\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\necho \"Creating database backup: $BACKUP_FILE\"\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\necho \"Compressing database backup...\"\ngzip $BACKUP_FILE\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\necho \"Database: $DB_NAME\" >> \"$BACKUP_DIR/$DB_NAME-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 days)\necho \"Cleaning old backups...\"\nfind $BACKUP_DIR -name \"$DB_NAME-*.sql.gz\" -type f -mtime +30 -delete\nfind $BACKUP_DIR -name \"$DB_NAME-*.meta\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\n\necho \"Database backup completed: $BACKUP_FILE.gz\"\nBACKUPSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\n\n# Create media backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_media.sh << 'MEDIASCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/media\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/media-$TIMESTAMP.tar.gz\"\nMEDIA_DIR=\"/home/crown/$CROWN_APP_NAME/backend/media\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Backup media files\necho \"Creating media backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $(dirname $MEDIA_DIR) $(basename $MEDIA_DIR)\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\necho \"Media directory: $MEDIA_DIR\" >> \"$BACKUP_DIR/media-$TIMESTAMP.meta\"\n\n# Keep only weekly backups after 60 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +60 -not -mtime +7 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +60 -not -mtime +7 -delete\n\n# Keep only monthly backups after 180 days\nfind $BACKUP_DIR -name \"media-*.tar.gz\" -type f -mtime +180 -not -mtime +30 -delete\nfind $BACKUP_DIR -name \"media-*.meta\" -type f -mtime +180 -not -mtime +30 -delete\n\necho \"Media backup completed: $BACKUP_FILE\"\nMEDIASCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_media.sh\n\n# Create configuration backup script\ncat > /opt/$CROWN_APP_NAME/scripts/backup_config.sh << 'CONFIGSCRIPTEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups/config\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/config-$TIMESTAMP.tar.gz\"\n\n# Make sure backup directory exists\nmkdir -p $BACKUP_DIR\n\n# Files to back up\nCONFIG_FILES=(\n  \"/home/crown/$CROWN_APP_NAME/backend/.env\"\n  \"/etc/nginx/sites-available/$CROWN_APP_NAME\"\n  \"/etc/systemd/system/$CROWN_APP_NAME.service\"\n  \"/etc/postgresql/15/main/postgresql.conf\"\n  \"/etc/postgresql/15/main/pg_hba.conf\"\n  \"/etc/elasticsearch/elasticsearch.yml\"\n  \"/etc/redis/redis.conf\"\n)\n\n# Create a temporary directory\nTEMP_DIR=$(mktemp -d)\n\n# Copy files to temporary directory\nfor FILE in \"${CONFIG_FILES[@]}\"; do\n  if [ -f \"$FILE\" ]; then\n    DIR_NAME=$(dirname \"$FILE\" | sed 's/^\\///')\n    mkdir -p \"$TEMP_DIR/$DIR_NAME\"\n    cp \"$FILE\" \"$TEMP_DIR/$FILE\"\n  fi\ndone\n\n# Backup configuration files\necho \"Creating configuration backup: $BACKUP_FILE\"\ntar -czf $BACKUP_FILE -C $TEMP_DIR .\n\n# Remove temporary directory\nrm -rf $TEMP_DIR\n\n# Create backup metadata\necho \"Backup created on $(date)\" > \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"From host: $(hostname)\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\necho \"Configuration files:\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\nprintf \"  %s\\n\" \"${CONFIG_FILES[@]}\" >> \"$BACKUP_DIR/config-$TIMESTAMP.meta\"\n\n# Rotate backups (keep last 30 versions)\nls -t $BACKUP_DIR/config-*.tar.gz | tail -n +31 | xargs rm -f 2>/dev/null || true\nls -t $BACKUP_DIR/config-*.meta | tail -n +31 | xargs rm -f 2>/dev/null || true\n\necho \"Configuration backup completed: $BACKUP_FILE\"\nCONFIGSCRIPTEOF\n\nchmod +x /opt/$CROWN_APP_NAME/scripts/backup_config.sh\n\n# Set correct ownership for all scripts\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME/scripts/\n\n# Add to crontab for automatic backups\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 3 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_media.sh\") | sudo crontab -u crown -\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 4 * * 0 /opt/$CROWN_APP_NAME/scripts/backup_config.sh\") | sudo crontab -u crown -\n\necho \"=== Backup strategy setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'spreadsheetml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3248,
                  "startColumn": 29,
                  "endLine": 3248,
                  "endColumn": 100,
                  "charOffset": 109993,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3472,
                  "startColumn": 29,
                  "endLine": 3472,
                  "endColumn": 3470,
                  "charOffset": 116630,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/main.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 66,
                  "charOffset": 927,
                  "charLength": 54,
                  "snippet": {
                    "text": "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/user.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 5,
                  "endLine": 142,
                  "endColumn": 18,
                  "charOffset": 4370,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3652,
                  "startColumn": 21,
                  "endLine": 3652,
                  "endColumn": 48,
                  "charOffset": 125610,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'BANEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3136,
                  "startColumn": 29,
                  "endLine": 3136,
                  "endColumn": 44,
                  "charOffset": 105949,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"PostgreSQL 15\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'API's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3528,
                  "startColumn": 29,
                  "endLine": 3528,
                  "endColumn": 295,
                  "charOffset": 121744,
                  "charLength": 266,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\n    Context manager for database sessions.\\n\\n    This is useful for scripts that need to handle their own transactions\\n    and session lifecycle outside of FastAPI's dependency injection.\\n\\n    Yields:\\n        AsyncSession: Database session\\n    \\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/media.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 5,
                  "endLine": 92,
                  "endColumn": 18,
                  "charOffset": 2834,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2912,
                  "startColumn": 29,
                  "endLine": 2912,
                  "endColumn": 82,
                  "charOffset": 92245,
                  "charLength": 53,
                  "snippet": {
                    "text": "\"# Filter by attributes (more complex in PostgreSQL)\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'bantime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3444,
                  "startColumn": 29,
                  "endLine": 3444,
                  "endColumn": 44,
                  "charOffset": 115827,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'sessionmaker'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3332,
                  "startColumn": 29,
                  "endLine": 3332,
                  "endColumn": 77,
                  "charOffset": 112506,
                  "charLength": 48,
                  "snippet": {
                    "text": "\"# Create sessionmaker with reasonable defaults\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datetimes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4128,
                  "startColumn": 21,
                  "endLine": 4128,
                  "endColumn": 205,
                  "charOffset": 143414,
                  "charLength": 184,
                  "snippet": {
                    "text": "\"datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'spreadsheetml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2464,
                  "startColumn": 29,
                  "endLine": 2464,
                  "endColumn": 100,
                  "charOffset": 77094,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2364,
                  "startColumn": 21,
                  "endLine": 2364,
                  "endColumn": 50,
                  "charOffset": 74014,
                  "charLength": 29,
                  "snippet": {
                    "text": "\"Typo: In word 'composables'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 34,
                  "charOffset": 2414,
                  "charLength": 33,
                  "snippet": {
                    "text": "# Update PostgreSQL configuration"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/init_db.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 45,
                  "endColumn": 8,
                  "charOffset": 911,
                  "charLength": 264,
                  "snippet": {
                    "text": "\"\"\"\n    Connect to the PostgreSQL server and check if our database exists.\n\n    Returns:\n        Tuple[Connection, bool]: Connection to postgres database and whether our DB exists\n\n    Raises:\n        PostgresError: If connection to PostgreSQL server fails\n    \"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/server_setup.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 1238,
                  "charLength": 1660,
                  "snippet": {
                    "text": "#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\n\n{% if 'load_balancer' in server.assigned_roles or 'frontend' in server.assigned_roles %}\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\n{% endif %}\n\n{% if 'backend' in server.assigned_roles %}\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\n{% endif %}\n\n{% if 'database' in server.assigned_roles %}\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\n{% endif %}\n\n{% if 'elasticsearch' in server.assigned_roles %}\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\n{% endif %}\n\n{% if 'redis' in server.assigned_roles %}\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\n{% endif %}\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4088,
                  "startColumn": 29,
                  "endLine": 4088,
                  "endColumn": 62,
                  "charOffset": 142284,
                  "charLength": 33,
                  "snippet": {
                    "text": "\"This will start the PostgreSQL,\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8894,
                  "startColumn": 26,
                  "endLine": 8894,
                  "endColumn": 78,
                  "charOffset": 291535,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'noexec'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 1,
                  "endLine": 720,
                  "endColumn": 1,
                  "charOffset": 19680,
                  "charLength": 1827,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\necho \"=== Hardening security settings ===\"\n\n# Configure SSH\necho \"Configuring secure SSH...\"\nsudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config\nsudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nsudo systemctl restart ssh\n\n# Setup automatic security updates\necho \"Setting up automatic security updates...\"\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Configure fail2ban\necho \"Configuring fail2ban...\"\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Setup firewall basic rules\necho \"Configuring basic firewall rules...\"\nsudo ufw allow OpenSSH\nsudo ufw --force enable\n\n# Secure shared memory\necho \"Securing shared memory...\"\necho \"tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0\" | sudo tee -a /etc/fstab\n\n# Configure system security settings\necho \"Configuring system security settings...\"\nsudo bash -c \"cat > /etc/sysctl.d/99-security.conf\" << 'SYSCTLEOF'\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n\n# Ignore ICMP broadcast requests\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Block SYN attacks\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 2048\nnet.ipv4.tcp_synack_retries = 2\nnet.ipv4.tcp_syn_retries = 5\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Disable IP forwarding\nnet.ipv4.ip_forward = 0\nSYSCTLEOF\n\nsudo sysctl -p /etc/sysctl.d/99-security.conf\n\necho \"=== Security hardening completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3708,
                  "startColumn": 21,
                  "endLine": 3708,
                  "endColumn": 46,
                  "charOffset": 127220,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'alertmanagers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 830,
                  "endColumn": 1,
                  "charOffset": 21611,
                  "charLength": 2990,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up advanced monitoring ===\"\n\n# Install monitoring tools\necho \"Installing monitoring tools...\"\nsudo apt install -y prometheus prometheus-node-exporter\n\n# Configure Prometheus\necho \"Configuring Prometheus...\"\nsudo cat > /etc/prometheus/prometheus.yml << 'PROMETHEUSEOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: \"node\"\n    static_configs:\n      - targets: [\"localhost:9100\", \"$SERVER1_PRIVATE_IP:9100\", \"$SERVER2_PRIVATE_IP:9100\"]\nPROMETHEUSEOF\n\nsudo systemctl restart prometheus\nsudo systemctl enable prometheus\n\n# Create basic system health check script\necho \"Creating health check script...\"\ncat > /home/crown/health_check.sh << 'HEALTHEOF'\n#!/bin/bash\n\n# System health check script\nREPORT_FILE=\"/home/crown/health_report.txt\"\nALERT_EMAIL=\"$ADMIN_EMAIL\"\n\n# Start fresh report\necho \"System Health Report - $(date)\" > $REPORT_FILE\necho \"=======================================\" >> $REPORT_FILE\n\n# Check disk space\necho -e \"\\n== Disk Space ==\" >> $REPORT_FILE\ndf -h / | grep -v Filesystem >> $REPORT_FILE\n\n# Check memory\necho -e \"\\n== Memory Usage ==\" >> $REPORT_FILE\nfree -h >> $REPORT_FILE\n\n# Check load average\necho -e \"\\n== Load Average ==\" >> $REPORT_FILE\nuptime >> $REPORT_FILE\n\n# Check for failed services\necho -e \"\\n== Failed Services ==\" >> $REPORT_FILE\nsystemctl --failed >> $REPORT_FILE\n\n# Check system logs for errors\necho -e \"\\n== Recent System Errors ==\" >> $REPORT_FILE\njournalctl -p err..emerg --since \"1 hour ago\" | tail -n 20 >> $REPORT_FILE\n\n# Check application specific logs\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    echo -e \"\\n== Application Errors ==\" >> $REPORT_FILE\n    tail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error >> $REPORT_FILE\nfi\n\n# Check if we need to send alerts\nDISK_USAGE=$(df -h / | grep / | awk '{print $5}' | sed 's/%//')\nMEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\nLOAD=$(uptime | awk '{print $(NF-2)}' | sed 's/,//')\n\n# Send email alert if thresholds exceeded\nif [ $DISK_USAGE -gt 85 ] || [ $MEMORY_USAGE -gt 90 ] || [ $(echo \"$LOAD > 5\" | bc) -eq 1 ]; then\n    # Install mailutils if not present\n    if ! command -v mail &> /dev/null; then\n        sudo apt-get install -y mailutils\n    fi\n\n    echo \"ALERT: System resources critical on $(hostname) at $(date)\" | mail -s \"System Alert: $(hostname)\" $ALERT_EMAIL\nfi\nHEALTHEOF\n\nchmod +x /home/crown/health_check.sh\nchown crown:crown /home/crown/health_check.sh\n\n# Set up cron job for health checks\n(crontab -l 2>/dev/null; echo \"*/15 * * * * /home/crown/health_check.sh\") | crontab -\n\necho \"=== Monitoring setup completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'spreadsheetml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2756,
                  "startColumn": 21,
                  "endLine": 2756,
                  "endColumn": 52,
                  "charOffset": 86606,
                  "charLength": 31,
                  "snippet": {
                    "text": "\"Typo: In word 'spreadsheetml'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2672,
                  "startColumn": 21,
                  "endLine": 2672,
                  "endColumn": 48,
                  "charOffset": 84100,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/architecture/overview.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 4,
                  "endLine": 34,
                  "endColumn": 61,
                  "charOffset": 1074,
                  "charLength": 57,
                  "snippet": {
                    "text": "Data is stored in PostgreSQL and indexed in Elasticsearch"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4778,
                  "startColumn": 26,
                  "endLine": 4778,
                  "endColumn": 78,
                  "charOffset": 163821,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'securepassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 20,
                  "endLine": 216,
                  "endColumn": 36,
                  "charOffset": 6539,
                  "charLength": 16,
                  "snippet": {
                    "text": "\"securepassword\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/UserManagement.vue"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 9,
                  "endLine": 472,
                  "endColumn": 45,
                  "charOffset": 14446,
                  "charLength": 36,
                  "snippet": {
                    "text": "// Remove from local list or refetch"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3752,
                  "startColumn": 29,
                  "endLine": 3752,
                  "endColumn": 3470,
                  "charOffset": 128618,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3036,
                  "startColumn": 21,
                  "endLine": 3036,
                  "endColumn": 46,
                  "charOffset": 99232,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'nosuid'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 1,
                  "endLine": 720,
                  "endColumn": 1,
                  "charOffset": 19680,
                  "charLength": 1827,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\necho \"=== Hardening security settings ===\"\n\n# Configure SSH\necho \"Configuring secure SSH...\"\nsudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config\nsudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nsudo systemctl restart ssh\n\n# Setup automatic security updates\necho \"Setting up automatic security updates...\"\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Configure fail2ban\necho \"Configuring fail2ban...\"\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Setup firewall basic rules\necho \"Configuring basic firewall rules...\"\nsudo ufw allow OpenSSH\nsudo ufw --force enable\n\n# Secure shared memory\necho \"Securing shared memory...\"\necho \"tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0\" | sudo tee -a /etc/fstab\n\n# Configure system security settings\necho \"Configuring system security settings...\"\nsudo bash -c \"cat > /etc/sysctl.d/99-security.conf\" << 'SYSCTLEOF'\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n\n# Ignore ICMP broadcast requests\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Block SYN attacks\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 2048\nnet.ipv4.tcp_synack_retries = 2\nnet.ipv4.tcp_syn_retries = 5\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Disable IP forwarding\nnet.ipv4.ip_forward = 0\nSYSCTLEOF\n\nsudo sysctl -p /etc/sysctl.d/99-security.conf\n\necho \"=== Security hardening completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5758,
                  "startColumn": 26,
                  "endLine": 5758,
                  "endColumn": 78,
                  "charOffset": 192609,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Altima'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/views/FitmentCatalog.vue"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 48,
                  "endLine": 319,
                  "endColumn": 56,
                  "charOffset": 9889,
                  "charLength": 8,
                  "snippet": {
                    "text": "'Altima'"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8008,
                  "startColumn": 29,
                  "endLine": 8008,
                  "endColumn": 43,
                  "charOffset": 264811,
                  "charLength": 14,
                  "snippet": {
                    "text": "\"selectinload\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ENVEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5870,
                  "startColumn": 26,
                  "endLine": 5870,
                  "endColumn": 78,
                  "charOffset": 195855,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'composables'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2380,
                  "startColumn": 29,
                  "endLine": 2380,
                  "endColumn": 43,
                  "charOffset": 74555,
                  "charLength": 14,
                  "snippet": {
                    "text": "\"composables/\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 9118,
                  "startColumn": 26,
                  "endLine": 9118,
                  "endColumn": 78,
                  "charOffset": 298238,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGPASSWORD'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 1,
                  "charOffset": 3252,
                  "charLength": 657,
                  "snippet": {
                    "text": "#!/bin/bash\nBACKUP_DIR=\"/opt/{{ cluster.deployment_config.app_name }}/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/{{ cluster.deployment_config.app_name }}_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=\"{{ cluster.deployment_config.db_password }}\"\n\n# Backup database\npg_dump -U {{ cluster.deployment_config.db_user }} -h localhost {{ cluster.deployment_config.db_name }} > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"{{ cluster.deployment_config.app_name }}_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'MONITOREOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3248,
                  "startColumn": 29,
                  "endLine": 3248,
                  "endColumn": 100,
                  "charOffset": 109993,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'bgsave'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'allkeys'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3232,
                  "startColumn": 21,
                  "endLine": 3232,
                  "endColumn": 53,
                  "charOffset": 109437,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"Typo: In word 'openxmlformats'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3892,
                  "startColumn": 29,
                  "endLine": 3892,
                  "endColumn": 106,
                  "charOffset": 136206,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/architecture/overview.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "endLine": 52,
                  "endColumn": 35,
                  "charOffset": 1762,
                  "charLength": 18,
                  "snippet": {
                    "text": "PostgreSQL cluster"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3820,
                  "startColumn": 21,
                  "endLine": 3820,
                  "endColumn": 46,
                  "charOffset": 134001,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 21,
                  "endLine": 198,
                  "endColumn": 38,
                  "charOffset": 5103,
                  "charLength": 17,
                  "snippet": {
                    "text": "\"testpassword123\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'rolname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "endLine": 23,
                  "endColumn": 105,
                  "charOffset": 932,
                  "charLength": 78,
                  "snippet": {
                    "text": "SELECT 1 FROM pg_roles WHERE rolname='{{ cluster.deployment_config.db_user }}'"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ASGI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2616,
                  "startColumn": 21,
                  "endLine": 2616,
                  "endColumn": 43,
                  "charOffset": 82050,
                  "charLength": 22,
                  "snippet": {
                    "text": "\"Typo: In word 'ASGI'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'asctime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3920,
                  "startColumn": 29,
                  "endLine": 3920,
                  "endColumn": 87,
                  "charOffset": 137071,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'asctime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/main.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 66,
                  "charOffset": 927,
                  "charLength": 54,
                  "snippet": {
                    "text": "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3668,
                  "startColumn": 29,
                  "endLine": 3668,
                  "endColumn": 44,
                  "charOffset": 126165,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"__tablename__\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4044,
                  "startColumn": 21,
                  "endLine": 4044,
                  "endColumn": 46,
                  "charOffset": 140907,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2896,
                  "startColumn": 21,
                  "endLine": 2896,
                  "endColumn": 46,
                  "charOffset": 91689,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 7746,
                  "startColumn": 26,
                  "endLine": 7746,
                  "endColumn": 78,
                  "charOffset": 257001,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3080,
                  "startColumn": 29,
                  "endLine": 3080,
                  "endColumn": 3470,
                  "charOffset": 100627,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5030,
                  "startColumn": 26,
                  "endLine": 5030,
                  "endColumn": 78,
                  "charOffset": 171194,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/product.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 18,
                  "charOffset": 2175,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 29,
                  "endLine": 2940,
                  "endColumn": 3470,
                  "charOffset": 93082,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/STRUCTURE.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "endLine": 45,
                  "endColumn": 24,
                  "charOffset": 1920,
                  "charLength": 11,
                  "snippet": {
                    "text": "conftest.py"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2980,
                  "startColumn": 21,
                  "endLine": 2980,
                  "endColumn": 47,
                  "charOffset": 97576,
                  "charLength": 26,
                  "snippet": {
                    "text": "\"Typo: In word 'conftest'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'spreadsheetml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2772,
                  "startColumn": 29,
                  "endLine": 2772,
                  "endColumn": 100,
                  "charOffset": 87161,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pgdg'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3836,
                  "startColumn": 29,
                  "endLine": 3836,
                  "endColumn": 44,
                  "charOffset": 134554,
                  "charLength": 15,
                  "snippet": {
                    "text": "\"PostgreSQL 15\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'nopush'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3976,
                  "startColumn": 29,
                  "endLine": 3976,
                  "endColumn": 106,
                  "charOffset": 138729,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 84,
                  "charOffset": 1256,
                  "charLength": 75,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.presentationml.presentation\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2772,
                  "startColumn": 29,
                  "endLine": 2772,
                  "endColumn": 100,
                  "charOffset": 87161,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2856,
                  "startColumn": 29,
                  "endLine": 2856,
                  "endColumn": 960,
                  "charOffset": 89665,
                  "charLength": 931,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\n    Application settings.\\n\\n    Attributes:\\n        PROJECT_NAME: Name of the project\\n        DESCRIPTION: Project description\\n        VERSION: API version\\n        API_V1_STR: API v1 prefix\\n        SECRET_KEY: Secret key for JWT tokens\\n        ACCESS_TOKEN_EXPIRE_MINUTES: Expiration time for access tokens in minutes\\n        BACKEND_CORS_ORIGINS: List of origins that should be allowed by CORS\\n        POSTGRES_SERVER: PostgreSQL server hostname\\n        POSTGRES_USER: PostgreSQL username\\n        POSTGRES_PASSWORD: PostgreSQL password\\n        POSTGRES_DB: PostgreSQL database name\\n        SQLALCHEMY_DATABASE_URI: SQLAlchemy database URI\\n        ELASTICSEARCH_HOST: Elasticsearch host\\n        ELASTICSEARCH_PORT: Elasticsearch port\\n        REDIS_HOST: Redis host\\n        REDIS_PORT: Redis port\\n        MEDIA_ROOT: Root directory for media files\\n        MEDIA_URL: Base URL for media files\\n    \\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGPASSWORD'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 1,
                  "endLine": 947,
                  "endColumn": 1,
                  "charOffset": 24708,
                  "charLength": 3692,
                  "snippet": {
                    "text": "#!/bin/bash\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Crown Nexus Troubleshooting Tool ===\"\necho \"Running diagnostics...\"\n\n# Check system resources\necho -e \"\\n== System Resources ==\"\necho \"CPU Usage:\"\ntop -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1\"%\"}'\necho \"Memory Usage:\"\nfree -h | awk '/^Mem:/ {print $3 \"/\" $2 \" (\" int($3/$2*100)\")%\"}'\necho \"Disk Space:\"\ndf -h / | awk 'NR==2 {print $3 \"/\" $2 \" (\" $5 \")\"}'\n\n# Check key services\necho -e \"\\n== Service Status ==\"\nfor SERVICE in nginx postgresql elasticsearch redis-server crown-nexus; do\n    if systemctl is-active --quiet $SERVICE 2>/dev/null; then\n        echo \"$SERVICE: ✅ Running\"\n    else\n        echo \"$SERVICE: ❌ Not running\"\n        echo \"  - Checking logs: \"\n        journalctl -u $SERVICE --no-pager -n 20 | grep -i \"error\\|failed\\|warn\" | tail -5\n    fi\ndone\n\n# Check network connectivity\necho -e \"\\n== Network Connectivity ==\"\n\n# Check if server can reach other server\nif [ \"$(hostname -I | awk '{print $1}')\" = \"$SERVER1_PRIVATE_IP\" ]; then\n    if ping -c 1 $SERVER2_PRIVATE_IP &> /dev/null; then\n        echo \"Server 1 -> Server 2: ✅ Connected\"\n    else\n        echo \"Server 1 -> Server 2: ❌ Connection failed\"\n    fi\nelse\n    if ping -c 1 $SERVER1_PRIVATE_IP &> /dev/null; then\n        echo \"Server 2 -> Server 1: ✅ Connected\"\n    else\n        echo \"Server 2 -> Server 1: ❌ Connection failed\"\n    fi\nfi\n\n# Check database connectivity\necho -e \"\\n== Database Connectivity ==\"\nif command -v psql &> /dev/null; then\n    if [ -z \"$DB_PASSWORD\" ] || [ -z \"$DB_USER\" ] || [ -z \"$DB_NAME\" ]; then\n        echo \"Database credentials not found in environment\"\n    else\n        export PGPASSWORD=$DB_PASSWORD\n        if psql -U $DB_USER -h $SERVER2_PRIVATE_IP -d $DB_NAME -c \"SELECT 1\" &> /dev/null; then\n            echo \"Database connection: ✅ Successful\"\n        else\n            echo \"Database connection: ❌ Failed\"\n            echo \"  - Checking PostgreSQL logs:\"\n            sudo tail -5 /var/log/postgresql/postgresql-15-main.log\n        fi\n        unset PGPASSWORD\n    fi\nelse\n    echo \"psql command not found. Install postgresql-client package.\"\nfi\n\n# Check application logs for errors\necho -e \"\\n== Recent Application Errors ==\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/logs/error.log ]; then\n    grep -i \"error\\|exception\\|fail\" /home/crown/$CROWN_APP_NAME/backend/logs/error.log | tail -10\nelse\n    echo \"No application logs found at expected location.\"\nfi\n\n# Check for common issues\necho -e \"\\n== Common Issues Check ==\"\n\n# Check permissions\necho \"Directory Permissions:\"\nls -ld /home/crown/$CROWN_APP_NAME/backend/media /home/crown/$CROWN_APP_NAME/backend/logs 2>/dev/null || echo \"Directories not found\"\n\n# Check environment file\necho \"Environment File:\"\nif [ -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"  ✅ .env file exists\"\nelse\n    echo \"  ❌ .env file missing\"\nfi\n\necho -e \"\\n== Troubleshooting Recommendations ==\"\n\n# Based on checks, provide recommendations\nif ! systemctl is-active --quiet nginx 2>/dev/null; then\n    echo \"- Start/restart Nginx: sudo systemctl restart nginx\"\nfi\n\nif ! systemctl is-active --quiet postgresql 2>/dev/null; then\n    echo \"- Start/restart PostgreSQL: sudo systemctl restart postgresql\"\nfi\n\nif ! systemctl is-active --quiet crown-nexus 2>/dev/null; then\n    echo \"- Start/restart Crown Nexus: sudo systemctl restart crown-nexus\"\n    echo \"- Check logs: sudo journalctl -u crown-nexus -n 50\"\nfi\n\nif [ ! -f /home/crown/$CROWN_APP_NAME/backend/.env ]; then\n    echo \"- Create missing .env file from example\"\nfi\n\necho -e \"\\nFor more detailed troubleshooting, check the full logs or run specific diagnoses.\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'openxmlformats'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3976,
                  "startColumn": 29,
                  "endLine": 3976,
                  "endColumn": 106,
                  "charOffset": 138729,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5898,
                  "startColumn": 26,
                  "endLine": 5898,
                  "endColumn": 78,
                  "charOffset": 196658,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3680,
                  "startColumn": 21,
                  "endLine": 3680,
                  "endColumn": 46,
                  "charOffset": 126425,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5086,
                  "startColumn": 26,
                  "endLine": 5086,
                  "endColumn": 78,
                  "charOffset": 172854,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Altima'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3780,
                  "startColumn": 29,
                  "endLine": 3780,
                  "endColumn": 39,
                  "charOffset": 132866,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"'Altima'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'pathsep'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3080,
                  "startColumn": 29,
                  "endLine": 3080,
                  "endColumn": 3470,
                  "charOffset": 100627,
                  "charLength": 3441,
                  "snippet": {
                    "text": "\"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3988,
                  "startColumn": 21,
                  "endLine": 3988,
                  "endColumn": 46,
                  "charOffset": 139051,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 55,
                  "endColumn": 8,
                  "charOffset": 858,
                  "charLength": 901,
                  "snippet": {
                    "text": "\"\"\"\n    Application settings.\n\n    Attributes:\n        PROJECT_NAME: Name of the project\n        DESCRIPTION: Project description\n        VERSION: API version\n        API_V1_STR: API v1 prefix\n        SECRET_KEY: Secret key for JWT tokens\n        ACCESS_TOKEN_EXPIRE_MINUTES: Expiration time for access tokens in minutes\n        BACKEND_CORS_ORIGINS: List of origins that should be allowed by CORS\n        POSTGRES_SERVER: PostgreSQL server hostname\n        POSTGRES_USER: PostgreSQL username\n        POSTGRES_PASSWORD: PostgreSQL password\n        POSTGRES_DB: PostgreSQL database name\n        SQLALCHEMY_DATABASE_URI: SQLAlchemy database URI\n        ELASTICSEARCH_HOST: Elasticsearch host\n        ELASTICSEARCH_PORT: Elasticsearch port\n        REDIS_HOST: Redis host\n        REDIS_PORT: Redis port\n        MEDIA_ROOT: Root directory for media files\n        MEDIA_URL: Base URL for media files\n    \"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/user.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 18,
                  "charOffset": 2231,
                  "charLength": 13,
                  "snippet": {
                    "text": "__tablename__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'lscpu'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/server-analyzer.sh"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 68,
                  "endLine": 179,
                  "endColumn": 116,
                  "charOffset": 6032,
                  "charLength": 48,
                  "snippet": {
                    "text": "lscpu | grep -E 'Model name|CPU\\(s\\):' | head -2"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2560,
                  "startColumn": 21,
                  "endLine": 2560,
                  "endColumn": 46,
                  "charOffset": 80418,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2868,
                  "startColumn": 21,
                  "endLine": 2868,
                  "endColumn": 46,
                  "charOffset": 90841,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3932,
                  "startColumn": 21,
                  "endLine": 3932,
                  "endColumn": 46,
                  "charOffset": 137374,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5702,
                  "startColumn": 26,
                  "endLine": 5702,
                  "endColumn": 78,
                  "charOffset": 190966,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/templates/roles/database.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 23,
                  "charOffset": 710,
                  "charLength": 22,
                  "snippet": {
                    "text": "# Configure PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5422,
                  "startColumn": 26,
                  "endLine": 5422,
                  "endColumn": 78,
                  "charOffset": 182724,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'synack'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 1,
                  "endLine": 720,
                  "endColumn": 1,
                  "charOffset": 19680,
                  "charLength": 1827,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\necho \"=== Hardening security settings ===\"\n\n# Configure SSH\necho \"Configuring secure SSH...\"\nsudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config\nsudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nsudo systemctl restart ssh\n\n# Setup automatic security updates\necho \"Setting up automatic security updates...\"\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Configure fail2ban\necho \"Configuring fail2ban...\"\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Setup firewall basic rules\necho \"Configuring basic firewall rules...\"\nsudo ufw allow OpenSSH\nsudo ufw --force enable\n\n# Secure shared memory\necho \"Securing shared memory...\"\necho \"tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0\" | sudo tee -a /etc/fstab\n\n# Configure system security settings\necho \"Configuring system security settings...\"\nsudo bash -c \"cat > /etc/sysctl.d/99-security.conf\" << 'SYSCTLEOF'\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n\n# Ignore ICMP broadcast requests\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Block SYN attacks\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 2048\nnet.ipv4.tcp_synack_retries = 2\nnet.ipv4.tcp_syn_retries = 5\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Disable IP forwarding\nnet.ipv4.ip_forward = 0\nSYSCTLEOF\n\nsudo sysctl -p /etc/sysctl.d/99-security.conf\n\necho \"=== Security hardening completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2392,
                  "startColumn": 21,
                  "endLine": 2392,
                  "endColumn": 46,
                  "charOffset": 74814,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'SAST'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 5,
                  "endLine": 153,
                  "endColumn": 9,
                  "charOffset": 7323,
                  "charLength": 4,
                  "snippet": {
                    "text": "SAST"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'NGINXCONFEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "endLine": 43,
                  "endColumn": 82,
                  "charOffset": 1019,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGMAINEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5478,
                  "startColumn": 26,
                  "endLine": 5478,
                  "endColumn": 78,
                  "charOffset": 184392,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/development/getting-started.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 32,
                  "charOffset": 690,
                  "charLength": 31,
                  "snippet": {
                    "text": "This will start the PostgreSQL,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2996,
                  "startColumn": 29,
                  "endLine": 2996,
                  "endColumn": 58,
                  "charOffset": 98121,
                  "charLength": 29,
                  "snippet": {
                    "text": "\"# backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2660,
                  "startColumn": 29,
                  "endLine": 2660,
                  "endColumn": 41,
                  "charOffset": 83843,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"PostgreSQL\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2604,
                  "startColumn": 29,
                  "endLine": 2604,
                  "endColumn": 42,
                  "charOffset": 81792,
                  "charLength": 13,
                  "snippet": {
                    "text": "\"conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'officedocument'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2464,
                  "startColumn": 29,
                  "endLine": 2464,
                  "endColumn": 100,
                  "charOffset": 77094,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'keyrings'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'refetch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 2744,
                  "startColumn": 29,
                  "endLine": 2744,
                  "endColumn": 67,
                  "charOffset": 86323,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"// Remove from local list or refetch\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8176,
                  "startColumn": 29,
                  "endLine": 8176,
                  "endColumn": 70,
                  "charOffset": 269922,
                  "charLength": 41,
                  "snippet": {
                    "text": "\"from sqlalchemy.orm import selectinload\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Vuetify's'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/utils/notification.ts"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 4,
                  "endLine": 6,
                  "endColumn": 68,
                  "charOffset": 151,
                  "charLength": 64,
                  "snippet": {
                    "text": "throughout the application. It uses Vuetify's snackbar component"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'levelname'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic.ini"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 1,
                  "charOffset": 0,
                  "charLength": 3323,
                  "snippet": {
                    "text": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# asyncpg FIX: Notice the database name is now 'crown_nexus' without a leading slash\nsqlalchemy.url = postgresql+asyncpg://postgres:postgres@localhost/crown_nexus\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3260,
                  "startColumn": 21,
                  "endLine": 3260,
                  "endColumn": 51,
                  "charOffset": 110309,
                  "charLength": 30,
                  "snippet": {
                    "text": "\"Typo: In word 'testpassword'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testpassword'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3400,
                  "startColumn": 21,
                  "endLine": 3400,
                  "endColumn": 51,
                  "charOffset": 114438,
                  "charLength": 30,
                  "snippet": {
                    "text": "\"Typo: In word 'testpassword'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'PGPASSWORD'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4004,
                  "startColumn": 29,
                  "endLine": 4004,
                  "endColumn": 309,
                  "charOffset": 139600,
                  "charLength": 280,
                  "snippet": {
                    "text": "\"\\\"\\\"\\\"\\n    Connect to the PostgreSQL server and check if our database exists.\\n\\n    Returns:\\n        Tuple[Connection, bool]: Connection to postgres database and whether our DB exists\\n\\n    Raises:\\n        PostgresError: If connection to PostgreSQL server fails\\n    \\\"\\\"\\\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4610,
                  "startColumn": 26,
                  "endLine": 4610,
                  "endColumn": 78,
                  "charOffset": 158894,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'maxretry'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 274,
                  "endColumn": 1,
                  "charOffset": 2670,
                  "charLength": 4721,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 1: Load Balancer & Frontend ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y nginx certbot python3-certbot-nginx fail2ban ufw \\\n                   git nodejs npm unzip curl wget build-essential\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Node.js 18\necho \"Installing Node.js 18...\"\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt update\nsudo apt install -y nodejs\n\n# Build frontend\necho \"Building frontend application...\"\ncd /home/crown/$CROWN_APP_NAME/frontend\nsudo -u crown npm install\nsudo -u crown npm run build\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /tmp/nginx-config << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $CROWN_DOMAIN www.$CROWN_DOMAIN;\n\n    location / {\n        root /home/crown/$CROWN_APP_NAME/frontend/dist;\n        try_files $uri $uri/ /index.html;\n        add_header Cache-Control \"public, max-age=3600\";\n    }\n\n    location /api {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /api/v1/docs {\n        proxy_pass http://$SERVER2_PRIVATE_IP:8000/api/v1/docs;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nNGINXEOF\n\n# Replace environment variables in Nginx config\nenvsubst < /tmp/nginx-config > /etc/nginx/sites-available/$CROWN_APP_NAME\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/$CROWN_APP_NAME /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Optimize Nginx\ncat > /etc/nginx/nginx.conf << 'NGINXCONFEOF'\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 2048;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1d;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nNGINXCONFEOF\n\nsudo systemctl restart nginx\n\n# Configure fail2ban\ncat > /etc/fail2ban/jail.local << 'FAIL2BANEOF'\n[DEFAULT]\nbantime = 86400\nfindtime = 3600\nmaxretry = 5\n\n[sshd]\nenabled = true\n\n[nginx-http-auth]\nenabled = true\nFAIL2BANEOF\n\nsudo systemctl restart fail2ban\n\n# Setup SSL with Let's Encrypt\necho \"Setting up SSL...\"\nsudo certbot --nginx -d $CROWN_DOMAIN -d www.$CROWN_DOMAIN --non-interactive --agree-tos --email $ADMIN_EMAIL\n\n# Create monitoring script\ncat > /home/crown/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Nginx status:\"\nsystemctl status nginx | grep Active\necho \"------------------------------------------------------\"\necho \"Recent errors in Nginx:\"\ntail -n 50 /var/log/nginx/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nchmod +x /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(crontab -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | crontab -\n\necho \"=== Server 1 setup completed successfully ===\"\necho \"Frontend deployed at: https://$CROWN_DOMAIN\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/OUTLINE.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 74,
                  "endLine": 16,
                  "endColumn": 84,
                  "charOffset": 928,
                  "charLength": 10,
                  "snippet": {
                    "text": "PostgreSQL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'delaycompress'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'LOGROTATEEOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'notifempty'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'MONITOREOF'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'testclient'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 8848,
                  "startColumn": 29,
                  "endLine": 8848,
                  "endColumn": 72,
                  "charOffset": 290207,
                  "charLength": 43,
                  "snippet": {
                    "text": "\"from fastapi.testclient import TestClient\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'endscript'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 1,
                  "charOffset": 7486,
                  "charLength": 12095,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\n# Load environment variables\nsource ../common/env.sh\n\necho \"=== Setting up Server 2: Backend & Database ===\"\n\n# Update system\necho \"Updating system packages...\"\nsudo apt update\nsudo apt upgrade -y\n\n# Install necessary packages\necho \"Installing required packages...\"\nsudo apt install -y build-essential python3-dev python3-pip python3-venv \\\n                   git curl wget unzip software-properties-common \\\n                   apt-transport-https ca-certificates gnupg lsb-release \\\n                   fail2ban ufw\n\n# Setup firewall\necho \"Configuring firewall...\"\nsudo ufw allow OpenSSH\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 8000 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 5432 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 9200 proto tcp\nsudo ufw allow from $SERVER1_PRIVATE_IP to any port 6379 proto tcp\nsudo ufw --force enable\n\n# Install PostgreSQL 15\necho \"Installing PostgreSQL...\"\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\nsudo apt install -y postgresql-15 postgresql-contrib-15\n\n# Configure PostgreSQL\necho \"Configuring PostgreSQL...\"\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Setup database user and database\nsudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';\"\nsudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n\n# Configure PostgreSQL for access from backend\ncat > /tmp/pg_hba.conf << 'PGCONFEOF'\n# Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    $DB_NAME        $DB_USER        $SERVER2_PRIVATE_IP/32  md5\nPGCONFEOF\n\nenvsubst < /tmp/pg_hba.conf | sudo tee /etc/postgresql/15/main/pg_hba.conf > /dev/null\n\n# Update PostgreSQL configuration\ncat > /tmp/postgresql.conf << 'PGMAINEOF'\n# Default PostgreSQL configuration with optimizations\nlisten_addresses = 'localhost,$SERVER2_PRIVATE_IP'\nmax_connections = 100\nshared_buffers = 2GB\neffective_cache_size = 6GB\nwork_mem = 32MB\nmaintenance_work_mem = 256MB\nwal_buffers = 16MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\ncheckpoint_completion_target = 0.9\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nPGMAINEOF\n\nenvsubst < /tmp/postgresql.conf | sudo tee /etc/postgresql/15/main/postgresql.conf > /dev/null\n\nsudo systemctl restart postgresql\n\n# Install Elasticsearch\necho \"Installing Elasticsearch...\"\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg\nsudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main\" > /etc/apt/sources.list.d/elastic-8.x.list'\nsudo apt update\nsudo apt install -y elasticsearch\n\n# Configure Elasticsearch\necho \"Configuring Elasticsearch...\"\ncat > /tmp/elasticsearch.yml << 'ESCONFEOF'\ncluster.name: crown-nexus\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\nnetwork.host: [$SERVER2_PRIVATE_IP, localhost]\nhttp.port: 9200\ndiscovery.type: single-node\nxpack.security.enabled: false\nESCONFEOF\n\nenvsubst < /tmp/elasticsearch.yml | sudo tee /etc/elasticsearch/elasticsearch.yml > /dev/null\n\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch\nsudo systemctl start elasticsearch\n\n# Install Redis\necho \"Installing Redis...\"\nsudo apt install -y redis-server\n\n# Configure Redis\necho \"Configuring Redis...\"\ncat > /tmp/redis.conf << 'REDISCONFEOF'\nbind 127.0.0.1 $SERVER2_PRIVATE_IP\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize yes\nsupervised systemd\npidfile /var/run/redis/redis-server.pid\nloglevel notice\nlogfile /var/log/redis/redis-server.log\ndatabases 16\nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nrequirepass $REDIS_PASSWORD\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nREDISCONFEOF\n\nenvsubst < /tmp/redis.conf | sudo tee /etc/redis/redis.conf > /dev/null\n\nsudo systemctl restart redis-server\n\n# Setup application user\necho \"Creating application user...\"\nsudo useradd -m -s /bin/bash crown\nsudo usermod -aG sudo crown\n\n# Clone repository\necho \"Cloning application repository...\"\nsudo -u crown git clone $CROWN_REPO_URL -b $CROWN_BRANCH /home/crown/$CROWN_APP_NAME\n\n# Setup Python environment for backend\necho \"Setting up Python environment...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown python3 -m venv venv\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install --upgrade pip\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install -r requirements.txt\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/pip install gunicorn uvloop httptools\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > /tmp/.env << 'ENVEOF'\nPROJECT_NAME=\"Crown Nexus\"\nAPI_V1_STR=\"/api/v1\"\nSECRET_KEY=\"$SECRET_KEY\"\nBACKEND_CORS_ORIGINS=[\"https://$CROWN_DOMAIN\", \"https://www.$CROWN_DOMAIN\"]\nPOSTGRES_SERVER=$SERVER2_PRIVATE_IP\nPOSTGRES_USER=$DB_USER\nPOSTGRES_PASSWORD=$DB_PASSWORD\nPOSTGRES_DB=$DB_NAME\nELASTICSEARCH_HOST=$SERVER2_PRIVATE_IP\nELASTICSEARCH_PORT=9200\nREDIS_HOST=$SERVER2_PRIVATE_IP\nREDIS_PORT=6379\nREDIS_PASSWORD=$REDIS_PASSWORD\nENVEOF\n\nenvsubst < /tmp/.env | sudo tee /home/crown/$CROWN_APP_NAME/backend/.env > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/.env\n\n# Initialize database and run migrations\necho \"Initializing database...\"\ncd /home/crown/$CROWN_APP_NAME/backend\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/init_db.py\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/alembic upgrade head\n\n# Create admin user\necho \"Creating admin user...\"\nsudo -u crown /home/crown/$CROWN_APP_NAME/backend/venv/bin/python scripts/create_admin.py \"$ADMIN_EMAIL\" \"$ADMIN_PASSWORD\" \"$ADMIN_NAME\"\n\n# Create media directories\necho \"Creating media directories...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/media/{image,document,video,other,thumbnails}\n\n# Create gunicorn configuration\necho \"Creating Gunicorn configuration...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/gunicorn\ncat > /tmp/gunicorn_conf.py << 'GUNICORNEOF'\nimport multiprocessing\n\nworkers_per_core_str = \"1\"\nweb_concurrency_str = \"2\"\nhost = \"0.0.0.0\"\nport = \"8000\"\nbind_env = f\"{host}:{port}\"\nuse_loglevel = \"info\"\nworkers_per_core = int(workers_per_core_str)\ncores = multiprocessing.cpu_count()\nworkers = max(int(web_concurrency_str), workers_per_core * cores)\naccesslog = \"/home/crown/$CROWN_APP_NAME/backend/logs/access.log\"\nerrorlog = \"/home/crown/$CROWN_APP_NAME/backend/logs/error.log\"\n\n# Gunicorn config\nbind = bind_env\nworkers = workers\nworker_class = \"uvicorn.workers.UvicornWorker\"\nloglevel = use_loglevel\nGUNICORNEOF\n\nenvsubst < /tmp/gunicorn_conf.py | sudo tee /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py > /dev/null\nsudo chown crown:crown /home/crown/$CROWN_APP_NAME/backend/gunicorn/gunicorn_conf.py\n\n# Create logs directory\necho \"Creating logs directory...\"\nsudo -u crown mkdir -p /home/crown/$CROWN_APP_NAME/backend/logs\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /tmp/crown-nexus.service << 'SERVICEEOF'\n[Unit]\nDescription=Crown Nexus API service\nAfter=network.target postgresql.service elasticsearch.service redis-server.service\n\n[Service]\nUser=crown\nGroup=crown\nWorkingDirectory=/home/crown/$CROWN_APP_NAME/backend\nEnvironment=\"PATH=/home/crown/$CROWN_APP_NAME/backend/venv/bin\"\nExecStart=/home/crown/$CROWN_APP_NAME/backend/venv/bin/gunicorn -c gunicorn/gunicorn_conf.py app.main:app\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\nenvsubst < /tmp/crown-nexus.service | sudo tee /etc/systemd/system/$CROWN_APP_NAME.service > /dev/null\n\n# Enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable $CROWN_APP_NAME\nsudo systemctl start $CROWN_APP_NAME\n\n# Configure log rotation\necho \"Configuring log rotation...\"\ncat > /tmp/logrotate-config << 'LOGROTATEEOF'\n/home/crown/$CROWN_APP_NAME/backend/logs/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 crown crown\n    sharedscripts\n    postrotate\n        systemctl reload $CROWN_APP_NAME\n    endscript\n}\nLOGROTATEEOF\n\nenvsubst < /tmp/logrotate-config | sudo tee /etc/logrotate.d/$CROWN_APP_NAME > /dev/null\n\n# Create backup script\necho \"Setting up backup script...\"\nsudo mkdir -p /opt/$CROWN_APP_NAME/scripts\nsudo mkdir -p /opt/$CROWN_APP_NAME/backups\n\ncat > /tmp/backup_db.sh << 'BACKUPEOF'\n#!/bin/bash\nBACKUP_DIR=\"/opt/$CROWN_APP_NAME/backups\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_FILE=\"$BACKUP_DIR/$CROWN_APP_NAME_$TIMESTAMP.sql\"\n\nmkdir -p $BACKUP_DIR\n\n# Export DB credentials\nexport PGPASSWORD=$DB_PASSWORD\n\n# Backup database\npg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Rotate backups (keep last 30 days)\nfind $BACKUP_DIR -name \"$CROWN_APP_NAME_*.sql.gz\" -type f -mtime +30 -delete\n\n# Unset password\nunset PGPASSWORD\nBACKUPEOF\n\nenvsubst < /tmp/backup_db.sh | sudo tee /opt/$CROWN_APP_NAME/scripts/backup_db.sh > /dev/null\nsudo chmod +x /opt/$CROWN_APP_NAME/scripts/backup_db.sh\nsudo chown -R crown:crown /opt/$CROWN_APP_NAME\n\n# Add backup to crontab\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 2 * * * /opt/$CROWN_APP_NAME/scripts/backup_db.sh\") | sudo crontab -u crown -\n\n# Create monitoring script\ncat > /tmp/monitor.sh << 'MONITOREOF'\n#!/bin/bash\n\necho \"System monitoring report for $(hostname) - $(date)\"\necho \"------------------------------------------------------\"\necho \"Load average: $(cat /proc/loadavg)\"\necho \"Memory usage:\"\nfree -h\necho \"------------------------------------------------------\"\necho \"Disk usage:\"\ndf -h\necho \"------------------------------------------------------\"\necho \"Crown Nexus service status:\"\nsystemctl status $CROWN_APP_NAME | grep Active\necho \"------------------------------------------------------\"\necho \"PostgreSQL status:\"\nsystemctl status postgresql | grep Active\necho \"------------------------------------------------------\"\necho \"Elasticsearch status:\"\nsystemctl status elasticsearch | grep Active\necho \"------------------------------------------------------\"\necho \"Redis status:\"\nsystemctl status redis-server | grep Active\necho \"------------------------------------------------------\"\necho \"Recent backend errors:\"\ntail -n 50 /home/crown/$CROWN_APP_NAME/backend/logs/error.log | grep -i error\necho \"------------------------------------------------------\"\nMONITOREOF\n\nenvsubst < /tmp/monitor.sh | sudo tee /home/crown/monitor.sh > /dev/null\nsudo chmod +x /home/crown/monitor.sh\nsudo chown crown:crown /home/crown/monitor.sh\n\n# Set up cron job for monitoring\n(sudo crontab -u crown -l 2>/dev/null; echo \"0 * * * * /home/crown/monitor.sh > /home/crown/monitoring_report.txt\") | sudo crontab -u crown -\n\necho \"=== Server 2 setup completed successfully ===\"\necho \"Backend running at: http://$SERVER2_PRIVATE_IP:8000\"\necho \"API documentation available at: https://$CROWN_DOMAIN/api/v1/docs\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'syncookies'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/deploy-crown-nexus.sh"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 1,
                  "endLine": 720,
                  "endColumn": 1,
                  "charOffset": 19680,
                  "charLength": 1827,
                  "snippet": {
                    "text": "#!/bin/bash\nset -e\n\necho \"=== Hardening security settings ===\"\n\n# Configure SSH\necho \"Configuring secure SSH...\"\nsudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config\nsudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config\nsudo systemctl restart ssh\n\n# Setup automatic security updates\necho \"Setting up automatic security updates...\"\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Configure fail2ban\necho \"Configuring fail2ban...\"\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Setup firewall basic rules\necho \"Configuring basic firewall rules...\"\nsudo ufw allow OpenSSH\nsudo ufw --force enable\n\n# Secure shared memory\necho \"Securing shared memory...\"\necho \"tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0\" | sudo tee -a /etc/fstab\n\n# Configure system security settings\necho \"Configuring system security settings...\"\nsudo bash -c \"cat > /etc/sysctl.d/99-security.conf\" << 'SYSCTLEOF'\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1\n\n# Ignore ICMP broadcast requests\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Block SYN attacks\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 2048\nnet.ipv4.tcp_synack_retries = 2\nnet.ipv4.tcp_syn_retries = 5\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Disable IP forwarding\nnet.ipv4.ip_forward = 0\nSYSCTLEOF\n\nsudo sysctl -p /etc/sysctl.d/99-security.conf\n\necho \"=== Security hardening completed ===\"\n"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/docs/deployment/self-hosted.md"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 1,
                  "endLine": 133,
                  "endColumn": 34,
                  "charOffset": 2421,
                  "charLength": 33,
                  "snippet": {
                    "text": "Set up regular PostgreSQL backups"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'Postgre'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3344,
                  "startColumn": 21,
                  "endLine": 3344,
                  "endColumn": 46,
                  "charOffset": 112799,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'Postgre'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'tablename'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 4100,
                  "startColumn": 21,
                  "endLine": 4100,
                  "endColumn": 48,
                  "charOffset": 142562,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"Typo: In word 'tablename'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'datefmt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 3064,
                  "startColumn": 21,
                  "endLine": 3064,
                  "endColumn": 46,
                  "charOffset": 100086,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"Typo: In word 'datefmt'\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'conftest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/inspection/report_2025-03-06_10-54-50.sarif.json"
                },
                "region": {
                  "startLine": 5926,
                  "startColumn": 26,
                  "endLine": 5926,
                  "endColumn": 78,
                  "charOffset": 197460,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"..\\\\ile://D:/crown-nexus/backend/tests/conftest.py\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/user.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 25,
                  "endLine": 245,
                  "endColumn": 31,
                  "charOffset": 7129,
                  "charLength": 6,
                  "snippet": {
                    "text": "utcnow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The `dict` method is deprecated; use `model_dump` instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/deployment.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 72,
                  "endLine": 57,
                  "endColumn": 76,
                  "charOffset": 2009,
                  "charLength": 4,
                  "snippet": {
                    "text": "dict"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/media.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 6,
                  "endLine": 129,
                  "endColumn": 15,
                  "charOffset": 3761,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/user.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 27,
                  "endLine": 236,
                  "endColumn": 33,
                  "charOffset": 6887,
                  "charLength": 6,
                  "snippet": {
                    "text": "utcnow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 6,
                  "endLine": 133,
                  "endColumn": 15,
                  "charOffset": 4202,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/deps.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 42,
                  "endLine": 74,
                  "endColumn": 48,
                  "charOffset": 2161,
                  "charLength": 6,
                  "snippet": {
                    "text": "utcnow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 6,
                  "endLine": 66,
                  "endColumn": 15,
                  "charOffset": 2119,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 6,
                  "endLine": 93,
                  "endColumn": 15,
                  "charOffset": 3011,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/config.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 6,
                  "endLine": 39,
                  "endColumn": 15,
                  "charOffset": 1004,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/user.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 27,
                  "endLine": 234,
                  "endColumn": 33,
                  "charOffset": 6826,
                  "charLength": 6,
                  "snippet": {
                    "text": "utcnow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/deps.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 42,
                  "endLine": 239,
                  "endColumn": 48,
                  "charOffset": 6667,
                  "charLength": 6,
                  "snippet": {
                    "text": "utcnow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The `__fields__` attribute is deprecated, use `model_fields` instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/media.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 51,
                  "endLine": 153,
                  "endColumn": 61,
                  "charOffset": 4760,
                  "charLength": 10,
                  "snippet": {
                    "text": "__fields__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The `dict` method is deprecated; use `model_dump` instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/deployment.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 27,
                  "endLine": 45,
                  "endColumn": 31,
                  "charOffset": 1525,
                  "charLength": 4,
                  "snippet": {
                    "text": "dict"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyDeprecation",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/user.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 6,
                  "endLine": 205,
                  "endColumn": 15,
                  "charOffset": 5389,
                  "charLength": 9,
                  "snippet": {
                    "text": "validator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 34,
                  "endLine": 134,
                  "endColumn": 37,
                  "charOffset": 4269,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/user.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 27,
                  "endLine": 206,
                  "endColumn": 30,
                  "charOffset": 5437,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 32,
                  "endLine": 94,
                  "endColumn": 35,
                  "charOffset": 3089,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/media.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 18,
                  "endLine": 130,
                  "endColumn": 21,
                  "charOffset": 3835,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/config.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 27,
                  "endLine": 40,
                  "endColumn": 30,
                  "charOffset": 1052,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/core/config.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 31,
                  "endLine": 67,
                  "endColumn": 34,
                  "charOffset": 2193,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodParameters",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Usually first parameter of a method is named 'self'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 23,
                  "endLine": 51,
                  "endColumn": 26,
                  "charOffset": 1882,
                  "charLength": 3,
                  "snippet": {
                    "text": "cls"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 9,
                  "endLine": 196,
                  "endColumn": 33,
                  "charOffset": 5258,
                  "charLength": 24,
                  "snippet": {
                    "text": "email=\"user@example.com\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 13,
                  "endLine": 95,
                  "endColumn": 66,
                  "charOffset": 2901,
                  "charLength": 53,
                  "snippet": {
                    "text": "is_approved=current_user.role in [\"admin\", \"manager\"]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 9,
                  "endLine": 270,
                  "endColumn": 29,
                  "charOffset": 6994,
                  "charLength": 20,
                  "snippet": {
                    "text": "slug=\"test-category\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 13,
                  "endLine": 94,
                  "endColumn": 43,
                  "charOffset": 2857,
                  "charLength": 30,
                  "snippet": {
                    "text": "uploaded_by_id=current_user.id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 30,
                  "endLine": 125,
                  "endColumn": 61,
                  "charOffset": 3625,
                  "charLength": 31,
                  "snippet": {
                    "text": "hashed_password=hashed_password"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "endLine": 88,
                  "endColumn": 32,
                  "charOffset": 2511,
                  "charLength": 19,
                  "snippet": {
                    "text": "file_path=\"pending\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 23,
                  "endLine": 133,
                  "endColumn": 48,
                  "charOffset": 3973,
                  "charLength": 25,
                  "snippet": {
                    "text": "**product_in.model_dump()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 9,
                  "endLine": 301,
                  "endColumn": 37,
                  "charOffset": 7758,
                  "charLength": 28,
                  "snippet": {
                    "text": "category_id=test_category.id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 24,
                  "charOffset": 2579,
                  "charLength": 11,
                  "snippet": {
                    "text": "file_size=0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "endLine": 91,
                  "endColumn": 70,
                  "charOffset": 2685,
                  "charLength": 57,
                  "snippet": {
                    "text": "mime_type=file.content_type or \"application/octet-stream\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 28,
                  "charOffset": 1724,
                  "charLength": 11,
                  "snippet": {
                    "text": "email=email"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 9,
                  "endLine": 332,
                  "endColumn": 33,
                  "charOffset": 8441,
                  "charLength": 24,
                  "snippet": {
                    "text": "transmission=\"Automatic\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "endLine": 331,
                  "endColumn": 25,
                  "charOffset": 8415,
                  "charLength": 16,
                  "snippet": {
                    "text": "engine=\"2.5L I4\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 13,
                  "endLine": 93,
                  "endColumn": 42,
                  "charOffset": 2791,
                  "charLength": 29,
                  "snippet": {
                    "text": "file_metadata=parsed_metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 23,
                  "endLine": 375,
                  "endColumn": 48,
                  "charOffset": 10359,
                  "charLength": 25,
                  "snippet": {
                    "text": "**company_in.model_dump()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 9,
                  "endLine": 299,
                  "endColumn": 54,
                  "charOffset": 7674,
                  "charLength": 45,
                  "snippet": {
                    "text": "description=\"A test product for unit testing\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 9,
                  "endLine": 197,
                  "endColumn": 40,
                  "charOffset": 5292,
                  "charLength": 31,
                  "snippet": {
                    "text": "hashed_password=hashed_password"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 9,
                  "endLine": 271,
                  "endColumn": 55,
                  "charOffset": 7024,
                  "charLength": 46,
                  "snippet": {
                    "text": "description=\"A test category for unit testing\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 9,
                  "endLine": 303,
                  "endColumn": 23,
                  "charOffset": 7853,
                  "charLength": 14,
                  "snippet": {
                    "text": "is_active=True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 36,
                  "charOffset": 1839,
                  "charLength": 19,
                  "snippet": {
                    "text": "role=UserRole.ADMIN"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 9,
                  "endLine": 297,
                  "endColumn": 23,
                  "charOffset": 7621,
                  "charLength": 14,
                  "snippet": {
                    "text": "sku=\"TEST-001\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "endLine": 269,
                  "endColumn": 29,
                  "charOffset": 6964,
                  "charLength": 20,
                  "snippet": {
                    "text": "name=\"Test Category\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 48,
                  "charOffset": 2462,
                  "charLength": 35,
                  "snippet": {
                    "text": "filename=file.filename or \"unknown\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 48,
                  "charOffset": 1753,
                  "charLength": 31,
                  "snippet": {
                    "text": "hashed_password=hashed_password"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "endLine": 62,
                  "endColumn": 36,
                  "charOffset": 1802,
                  "charLength": 19,
                  "snippet": {
                    "text": "full_name=full_name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 9,
                  "endLine": 170,
                  "endColumn": 23,
                  "charOffset": 4678,
                  "charLength": 14,
                  "snippet": {
                    "text": "is_active=True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 9,
                  "endLine": 328,
                  "endColumn": 18,
                  "charOffset": 8350,
                  "charLength": 9,
                  "snippet": {
                    "text": "year=2022"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 9,
                  "endLine": 167,
                  "endColumn": 40,
                  "charOffset": 4576,
                  "charLength": 31,
                  "snippet": {
                    "text": "hashed_password=hashed_password"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 9,
                  "endLine": 302,
                  "endColumn": 56,
                  "charOffset": 7796,
                  "charLength": 47,
                  "snippet": {
                    "text": "attributes={\"material\": \"steel\", \"weight\": 1.5}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 9,
                  "endLine": 367,
                  "endColumn": 48,
                  "charOffset": 9943,
                  "charLength": 39,
                  "snippet": {
                    "text": "sku=f\"DELETE-{create_random_string(5)}\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 9,
                  "endLine": 330,
                  "endColumn": 22,
                  "charOffset": 8392,
                  "charLength": 13,
                  "snippet": {
                    "text": "model=\"Camry\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 9,
                  "endLine": 169,
                  "endColumn": 28,
                  "charOffset": 4649,
                  "charLength": 19,
                  "snippet": {
                    "text": "role=UserRole.ADMIN"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 9,
                  "endLine": 300,
                  "endColumn": 28,
                  "charOffset": 7729,
                  "charLength": 19,
                  "snippet": {
                    "text": "part_number=\"TP001\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "endLine": 125,
                  "endColumn": 28,
                  "charOffset": 3612,
                  "charLength": 11,
                  "snippet": {
                    "text": "**user_data"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 9,
                  "endLine": 200,
                  "endColumn": 23,
                  "charOffset": 5394,
                  "charLength": 14,
                  "snippet": {
                    "text": "is_active=True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 9,
                  "endLine": 199,
                  "endColumn": 29,
                  "charOffset": 5364,
                  "charLength": 20,
                  "snippet": {
                    "text": "role=UserRole.CLIENT"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 9,
                  "endLine": 168,
                  "endColumn": 31,
                  "charOffset": 4617,
                  "charLength": 22,
                  "snippet": {
                    "text": "full_name=\"Test Admin\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 9,
                  "endLine": 198,
                  "endColumn": 30,
                  "charOffset": 5333,
                  "charLength": 21,
                  "snippet": {
                    "text": "full_name=\"Test User\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 9,
                  "endLine": 298,
                  "endColumn": 28,
                  "charOffset": 7645,
                  "charLength": 19,
                  "snippet": {
                    "text": "name=\"Test Product\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 9,
                  "endLine": 370,
                  "endColumn": 23,
                  "charOffset": 10107,
                  "charLength": 14,
                  "snippet": {
                    "text": "is_active=True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 9,
                  "endLine": 166,
                  "endColumn": 34,
                  "charOffset": 4541,
                  "charLength": 25,
                  "snippet": {
                    "text": "email=\"admin@example.com\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 25,
                  "endLine": 336,
                  "endColumn": 51,
                  "charOffset": 9921,
                  "charLength": 26,
                  "snippet": {
                    "text": "**category_in.model_dump()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 9,
                  "endLine": 333,
                  "endColumn": 57,
                  "charOffset": 8475,
                  "charLength": 48,
                  "snippet": {
                    "text": "attributes={\"trim\": \"SE\", \"body_style\": \"Sedan\"}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 34,
                  "charOffset": 2756,
                  "charLength": 21,
                  "snippet": {
                    "text": "visibility=visibility"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 9,
                  "endLine": 368,
                  "endColumn": 60,
                  "charOffset": 9992,
                  "charLength": 51,
                  "snippet": {
                    "text": "name=f\"Product to Delete {create_random_string(5)}\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 9,
                  "endLine": 369,
                  "endColumn": 53,
                  "charOffset": 10053,
                  "charLength": 44,
                  "snippet": {
                    "text": "description=\"A product that will be deleted\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "endLine": 90,
                  "endColumn": 45,
                  "charOffset": 2639,
                  "charLength": 32,
                  "snippet": {
                    "text": "media_type=determined_media_type"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 31,
                  "charOffset": 1876,
                  "charLength": 14,
                  "snippet": {
                    "text": "is_active=True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 9,
                  "endLine": 329,
                  "endColumn": 22,
                  "charOffset": 8369,
                  "charLength": 13,
                  "snippet": {
                    "text": "make=\"Toyota\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyArgumentList",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 23,
                  "endLine": 131,
                  "endColumn": 48,
                  "charOffset": 3884,
                  "charLength": 25,
                  "snippet": {
                    "text": "**fitment_in.model_dump()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bool', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 30,
                  "endLine": 73,
                  "endColumn": 34,
                  "charOffset": 2044,
                  "charLength": 4,
                  "snippet": {
                    "text": "bool"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 33,
                  "endLine": 332,
                  "endColumn": 75,
                  "charOffset": 10616,
                  "charLength": 42,
                  "snippet": {
                    "text": "func.lower(Fitment.model) == model.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected type(s): (Generator[() -> Any, Any, None]) Possible type(s): (Iterable[LiteralString]) (Iterable[str])"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 71,
                  "endLine": 134,
                  "endColumn": 101,
                  "charOffset": 3739,
                  "charLength": 30,
                  "snippet": {
                    "text": "t.value for t in allowed_types"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 33,
                  "endLine": 335,
                  "endColumn": 77,
                  "charOffset": 10712,
                  "charLength": 44,
                  "snippet": {
                    "text": "func.lower(Fitment.engine) == engine.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Type[BindableLogger] | None', got 'Type[BoundLogger]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/main.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 47,
                  "charOffset": 1201,
                  "charLength": 42,
                  "snippet": {
                    "text": "wrapper_class=structlog.stdlib.BoundLogger"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 33,
                  "endLine": 177,
                  "endColumn": 77,
                  "charOffset": 5078,
                  "charLength": 44,
                  "snippet": {
                    "text": "func.lower(Fitment.engine) == engine.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 16,
                  "endLine": 320,
                  "endColumn": 70,
                  "charOffset": 9520,
                  "charLength": 54,
                  "snippet": {
                    "text": "product_fitment_association.c.fitment_id == fitment_id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'SupportsWrite[str]', got 'TextIO' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/deployment.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 35,
                  "endLine": 65,
                  "endColumn": 36,
                  "charOffset": 2258,
                  "charLength": 1,
                  "snippet": {
                    "text": "f"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 9,
                  "endLine": 597,
                  "endColumn": 59,
                  "charOffset": 18047,
                  "charLength": 115,
                  "snippet": {
                    "text": "(product_media_association.c.product_id == product_id) &\n        (product_media_association.c.media_id == media_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 33,
                  "endLine": 134,
                  "endColumn": 75,
                  "charOffset": 3728,
                  "charLength": 42,
                  "snippet": {
                    "text": "func.lower(Fitment.model) == model.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 33,
                  "endLine": 208,
                  "endColumn": 77,
                  "charOffset": 6066,
                  "charLength": 44,
                  "snippet": {
                    "text": "func.lower(Fitment.engine) == engine.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 9,
                  "endLine": 373,
                  "endColumn": 65,
                  "charOffset": 11026,
                  "charLength": 123,
                  "snippet": {
                    "text": "(product_fitment_association.c.product_id == product_id) &\n        (product_fitment_association.c.fitment_id == fitment_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 9,
                  "endLine": 558,
                  "endColumn": 59,
                  "charOffset": 16925,
                  "charLength": 115,
                  "snippet": {
                    "text": "(product_media_association.c.product_id == product_id) &\n        (product_media_association.c.media_id == media_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 33,
                  "endLine": 338,
                  "endColumn": 89,
                  "charOffset": 10816,
                  "charLength": 56,
                  "snippet": {
                    "text": "func.lower(Fitment.transmission) == transmission.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 33,
                  "endLine": 99,
                  "endColumn": 73,
                  "charOffset": 2676,
                  "charLength": 40,
                  "snippet": {
                    "text": "func.lower(Fitment.make) == make.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 20,
                  "endLine": 208,
                  "endColumn": 72,
                  "charOffset": 6404,
                  "charLength": 52,
                  "snippet": {
                    "text": "product_media_association.c.product_id == product_id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'Literal[\"SSD\", \"HDD\", \"NVMe\", \"Unknown\"]', got 'str' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 13,
                  "endLine": 139,
                  "endColumn": 32,
                  "charOffset": 5749,
                  "charLength": 19,
                  "snippet": {
                    "text": "disk_type=disk_type"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected type(s): (AsyncEngine, Type[AsyncSession], bool, bool) Possible type(s): (Engine | Connection | None, Type[_S], bool, bool) (Engine | Connection | None, bool, bool, Any)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "endLine": 54,
                  "endColumn": 2,
                  "charOffset": 1349,
                  "charLength": 94,
                  "snippet": {
                    "text": "(\n    test_engine,\n    expire_on_commit=False,\n    class_=AsyncSession,\n    autoflush=False,\n)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bool', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 33,
                  "endLine": 49,
                  "endColumn": 37,
                  "charOffset": 1350,
                  "charLength": 4,
                  "snippet": {
                    "text": "bool"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 33,
                  "endLine": 168,
                  "endColumn": 73,
                  "charOffset": 4781,
                  "charLength": 40,
                  "snippet": {
                    "text": "func.lower(Fitment.make) == make.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 33,
                  "endLine": 211,
                  "endColumn": 89,
                  "charOffset": 6182,
                  "charLength": 56,
                  "snippet": {
                    "text": "func.lower(Fitment.transmission) == transmission.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "endLine": 269,
                  "endColumn": 63,
                  "charOffset": 8017,
                  "charLength": 54,
                  "snippet": {
                    "text": "product_fitment_association.c.fitment_id == fitment_id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 9,
                  "endLine": 412,
                  "endColumn": 65,
                  "charOffset": 12182,
                  "charLength": 123,
                  "snippet": {
                    "text": "(product_fitment_association.c.product_id == product_id) &\n        (product_fitment_association.c.fitment_id == fitment_id)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 16,
                  "endLine": 650,
                  "endColumn": 68,
                  "charOffset": 19742,
                  "charLength": 52,
                  "snippet": {
                    "text": "product_media_association.c.product_id == product_id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bool', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/init_db.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 24,
                  "endLine": 111,
                  "endColumn": 28,
                  "charOffset": 3342,
                  "charLength": 4,
                  "snippet": {
                    "text": "bool"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 33,
                  "endLine": 131,
                  "endColumn": 73,
                  "charOffset": 3623,
                  "charLength": 40,
                  "snippet": {
                    "text": "func.lower(Fitment.make) == make.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 33,
                  "endLine": 171,
                  "endColumn": 75,
                  "charOffset": 4886,
                  "charLength": 42,
                  "snippet": {
                    "text": "func.lower(Fitment.model) == model.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 33,
                  "endLine": 329,
                  "endColumn": 73,
                  "charOffset": 10523,
                  "charLength": 40,
                  "snippet": {
                    "text": "func.lower(Fitment.make) == make.lower()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'set[ServerRole]', got 'set[str]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/server.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "endLine": 28,
                  "endColumn": 24,
                  "charOffset": 779,
                  "charLength": 8,
                  "snippet": {
                    "text": "set(cls)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyTypeChecker",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'ColumnElement[bool] | _HasClauseElement[bool] | SQLCoreOperations[bool] | ExpressionElementRole[bool] | TypedColumnsClauseRole[bool] | () -> ColumnElement[bool] | LambdaElement', got 'bool' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 34,
                  "endLine": 88,
                  "endColumn": 46,
                  "charOffset": 2966,
                  "charLength": 12,
                  "snippet": {
                    "text": "cls.id == id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodMayBeStatic",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_parse_recommended_roles' may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 9,
                  "endLine": 143,
                  "endColumn": 33,
                  "charOffset": 5817,
                  "charLength": 24,
                  "snippet": {
                    "text": "_parse_recommended_roles"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodMayBeStatic",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_parse_specs' may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 9,
                  "endLine": 81,
                  "endColumn": 21,
                  "charOffset": 3513,
                  "charLength": 12,
                  "snippet": {
                    "text": "_parse_specs"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyMethodMayBeStatic",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_find_best_server_for_role' may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 9,
                  "endLine": 246,
                  "endColumn": 35,
                  "charOffset": 10306,
                  "charLength": 26,
                  "snippet": {
                    "text": "_find_best_server_for_role"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyAsyncCall",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Coroutine 'create_media_directories' is not awaited"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 5,
                  "endLine": 196,
                  "endColumn": 31,
                  "charOffset": 5960,
                  "charLength": 26,
                  "snippet": {
                    "text": "create_media_directories()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyNestedDecorators",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This decorator will not receive a callable it may expect; the built-in decorator returns a special object"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/product.py"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 5,
                  "endLine": 229,
                  "endColumn": 29,
                  "charOffset": 6247,
                  "charLength": 24,
                  "snippet": {
                    "text": "@field_validator(\"year\")"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyNestedDecorators",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This decorator will not receive a callable it may expect; the built-in decorator returns a special object"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/schemas/product.py"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 5,
                  "endLine": 281,
                  "endColumn": 29,
                  "charOffset": 7720,
                  "charLength": 24,
                  "snippet": {
                    "text": "@field_validator(\"year\")"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingBuiltins",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 36,
                  "endLine": 77,
                  "endColumn": 38,
                  "charOffset": 2663,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingBuiltins",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 61,
                  "charOffset": 2284,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingBuiltins",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 55,
                  "endLine": 31,
                  "endColumn": 57,
                  "charOffset": 868,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingBuiltins",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'id'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 39,
                  "endLine": 67,
                  "endColumn": 41,
                  "charOffset": 1669,
                  "charLength": 2,
                  "snippet": {
                    "text": "id"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingNames",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'password' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 41,
                  "endLine": 25,
                  "endColumn": 49,
                  "charOffset": 571,
                  "charLength": 8,
                  "snippet": {
                    "text": "password"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingNames",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'app' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/main.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 20,
                  "endLine": 40,
                  "endColumn": 23,
                  "charOffset": 1064,
                  "charLength": 3,
                  "snippet": {
                    "text": "app"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingNames",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'full_name' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 56,
                  "endLine": 25,
                  "endColumn": 65,
                  "charOffset": 586,
                  "charLength": 9,
                  "snippet": {
                    "text": "full_name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyShadowingNames",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'email' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 29,
                  "endLine": 25,
                  "endColumn": 34,
                  "charOffset": 559,
                  "charLength": 5,
                  "snippet": {
                    "text": "email"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnboundLocalVariable",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'media' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 44,
                  "endLine": 144,
                  "endColumn": 49,
                  "charOffset": 4484,
                  "charLength": 5,
                  "snippet": {
                    "text": "media"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnboundLocalVariable",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'media' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 44,
                  "endLine": 150,
                  "endColumn": 49,
                  "charOffset": 4707,
                  "charLength": 5,
                  "snippet": {
                    "text": "media"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnboundLocalVariable",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'engine' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 19,
                  "endLine": 70,
                  "endColumn": 25,
                  "charOffset": 1996,
                  "charLength": 6,
                  "snippet": {
                    "text": "engine"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Dict'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/config.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 41,
                  "endLine": 5,
                  "endColumn": 45,
                  "charOffset": 154,
                  "charLength": 4,
                  "snippet": {
                    "text": "Dict"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cannot find reference 'users' in '__init__.py'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/router.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 75,
                  "endLine": 15,
                  "endColumn": 80,
                  "charOffset": 442,
                  "charLength": 5,
                  "snippet": {
                    "text": "users"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Query'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 56,
                  "endLine": 5,
                  "endColumn": 61,
                  "charOffset": 142,
                  "charLength": 5,
                  "snippet": {
                    "text": "Query"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'dependency_overrides' for class 'FastAPI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 5,
                  "endLine": 146,
                  "endColumn": 29,
                  "charOffset": 4062,
                  "charLength": 24,
                  "snippet": {
                    "text": "app.dependency_overrides"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from fastapi.encoders import jsonable_encoder'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 46,
                  "charOffset": 156,
                  "charLength": 45,
                  "snippet": {
                    "text": "from fastapi.encoders import jsonable_encoder"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'User'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 29,
                  "endLine": 46,
                  "endColumn": 33,
                  "charOffset": 1282,
                  "charLength": 4,
                  "snippet": {
                    "text": "User"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/associations.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 5,
                  "endLine": 24,
                  "endColumn": 18,
                  "charOffset": 753,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Optional'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 37,
                  "endLine": 17,
                  "endColumn": 45,
                  "charOffset": 535,
                  "charLength": 8,
                  "snippet": {
                    "text": "Optional"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'datetime'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/auth.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 30,
                  "charOffset": 434,
                  "charLength": 8,
                  "snippet": {
                    "text": "datetime"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from typing import Optional'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic/env.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 28,
                  "charOffset": 727,
                  "charLength": 27,
                  "snippet": {
                    "text": "from typing import Optional"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from crown_deploy.models.deployment import DeploymentState'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/main.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 59,
                  "charOffset": 495,
                  "charLength": 58,
                  "snippet": {
                    "text": "from crown_deploy.models.deployment import DeploymentState"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'parent'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/product.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 5,
                  "endLine": 216,
                  "endColumn": 8,
                  "charOffset": 6543,
                  "charLength": 697,
                  "snippet": {
                    "text": "\"\"\"\n    Product category model for hierarchical organization.\n\n    This model supports organizing products into categories and subcategories:\n    - Hierarchical structure via self-referential relationship\n    - URL-friendly slugs for routing\n    - Optional description for additional context\n\n    Attributes:\n        id: Primary key UUID\n        name: Category name\n        slug: URL-friendly version of name\n        parent_id: Reference to parent category (optional)\n        description: Category description (optional)\n        children: List of child categories\n        parent: Reference to parent category\n        created_at: Creation timestamp\n        updated_at: Last update timestamp\n    \"\"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Dict'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 51,
                  "endLine": 18,
                  "endColumn": 55,
                  "charOffset": 464,
                  "charLength": 4,
                  "snippet": {
                    "text": "Dict"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Dict'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 24,
                  "charOffset": 190,
                  "charLength": 4,
                  "snippet": {
                    "text": "Dict"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from asyncpg.exceptions import PostgresError'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 45,
                  "charOffset": 974,
                  "charLength": 44,
                  "snippet": {
                    "text": "from asyncpg.exceptions import PostgresError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_tables_directly.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 33,
                  "endLine": 27,
                  "endColumn": 46,
                  "charOffset": 750,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 29,
                  "endLine": 88,
                  "endColumn": 42,
                  "charOffset": 2384,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 47,
                  "endLine": 18,
                  "endColumn": 50,
                  "charOffset": 464,
                  "charLength": 3,
                  "snippet": {
                    "text": "Set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'func'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 26,
                  "endLine": 212,
                  "endColumn": 30,
                  "charOffset": 4870,
                  "charLength": 4,
                  "snippet": {
                    "text": "func"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Query'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 56,
                  "endLine": 5,
                  "endColumn": 61,
                  "charOffset": 142,
                  "charLength": 5,
                  "snippet": {
                    "text": "Query"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Sequence'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 73,
                  "endLine": 18,
                  "endColumn": 81,
                  "charOffset": 473,
                  "charLength": 8,
                  "snippet": {
                    "text": "Sequence"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'BinaryIO'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 28,
                  "charOffset": 472,
                  "charLength": 8,
                  "snippet": {
                    "text": "BinaryIO"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 33,
                  "endLine": 90,
                  "endColumn": 46,
                  "charOffset": 2611,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from fastapi.testclient import TestClient'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 42,
                  "charOffset": 551,
                  "charLength": 41,
                  "snippet": {
                    "text": "from fastapi.testclient import TestClient"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'MediaCreate'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 16,
                  "charOffset": 840,
                  "charLength": 11,
                  "snippet": {
                    "text": "MediaCreate"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Depends'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/cache.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 28,
                  "charOffset": 624,
                  "charLength": 7,
                  "snippet": {
                    "text": "Depends"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cannot find reference '__module__' in '(...) -> Any'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/cache.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 20,
                  "endLine": 75,
                  "endColumn": 35,
                  "charOffset": 1725,
                  "charLength": 15,
                  "snippet": {
                    "text": "func.__module__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'UserRole'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/auth.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 35,
                  "endLine": 28,
                  "endColumn": 43,
                  "charOffset": 903,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserRole"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 29,
                  "endLine": 94,
                  "endColumn": 42,
                  "charOffset": 2525,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/database_bootstrap.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 33,
                  "endLine": 93,
                  "endColumn": 46,
                  "charOffset": 2708,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'delete'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 24,
                  "endLine": 20,
                  "endColumn": 30,
                  "charOffset": 521,
                  "charLength": 6,
                  "snippet": {
                    "text": "delete"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Any'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 20,
                  "endLine": 18,
                  "endColumn": 23,
                  "charOffset": 433,
                  "charLength": 3,
                  "snippet": {
                    "text": "Any"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base_class.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 31,
                  "endLine": 17,
                  "endColumn": 35,
                  "charOffset": 529,
                  "charLength": 4,
                  "snippet": {
                    "text": "List"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 36,
                  "endLine": 22,
                  "endColumn": 40,
                  "charOffset": 488,
                  "charLength": 4,
                  "snippet": {
                    "text": "List"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import uuid'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/utils.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 12,
                  "charOffset": 383,
                  "charLength": 11,
                  "snippet": {
                    "text": "import uuid"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cannot find reference 'async_session' in 'session.py'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 28,
                  "endLine": 21,
                  "endColumn": 41,
                  "charOffset": 453,
                  "charLength": 13,
                  "snippet": {
                    "text": "async_session"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Tuple'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 47,
                  "endLine": 18,
                  "endColumn": 52,
                  "charOffset": 443,
                  "charLength": 5,
                  "snippet": {
                    "text": "Tuple"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'get_pagination'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 75,
                  "endLine": 24,
                  "endColumn": 89,
                  "charOffset": 744,
                  "charLength": 14,
                  "snippet": {
                    "text": "get_pagination"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'dependency_overrides' for class 'FastAPI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 5,
                  "endLine": 139,
                  "endColumn": 29,
                  "charOffset": 3860,
                  "charLength": 24,
                  "snippet": {
                    "text": "app.dependency_overrides"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic/env.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 19,
                  "endLine": 55,
                  "endColumn": 32,
                  "charOffset": 1714,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from crown_deploy.utils.errors import ScriptGenerationError'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/script_generator.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 60,
                  "charOffset": 325,
                  "charLength": 59,
                  "snippet": {
                    "text": "from crown_deploy.utils.errors import ScriptGenerationError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import os'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/deployment.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 10,
                  "charOffset": 117,
                  "charLength": 9,
                  "snippet": {
                    "text": "import os"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Union'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 64,
                  "endLine": 22,
                  "endColumn": 69,
                  "charOffset": 516,
                  "charLength": 5,
                  "snippet": {
                    "text": "Union"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from typing import Dict, Any, List, Set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/script_generator.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 40,
                  "charOffset": 155,
                  "charLength": 39,
                  "snippet": {
                    "text": "from typing import Dict, Any, List, Set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'AsyncSession'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 36,
                  "endLine": 15,
                  "endColumn": 48,
                  "charOffset": 250,
                  "charLength": 12,
                  "snippet": {
                    "text": "AsyncSession"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from app.core.config import settings'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 37,
                  "charOffset": 555,
                  "charLength": 36,
                  "snippet": {
                    "text": "from app.core.config import settings"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'status'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 48,
                  "endLine": 16,
                  "endColumn": 54,
                  "charOffset": 423,
                  "charLength": 6,
                  "snippet": {
                    "text": "status"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from sqlalchemy.pool import NullPool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 37,
                  "charOffset": 1262,
                  "charLength": 36,
                  "snippet": {
                    "text": "from sqlalchemy.pool import NullPool"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/associations.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 18,
                  "charOffset": 1204,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'parent' for class 'Category'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/product.py"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 19,
                  "endLine": 270,
                  "endColumn": 30,
                  "charOffset": 8842,
                  "charLength": 11,
                  "snippet": {
                    "text": "self.parent"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import json'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/cache.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 12,
                  "charOffset": 470,
                  "charLength": 11,
                  "snippet": {
                    "text": "import json"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 41,
                  "endLine": 140,
                  "endColumn": 53,
                  "charOffset": 4359,
                  "charLength": 12,
                  "snippet": {
                    "text": "selectinload"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from fastapi import FastAPI'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 28,
                  "charOffset": 523,
                  "charLength": 27,
                  "snippet": {
                    "text": "from fastapi import FastAPI"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'AsyncGenerator'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/deps.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 31,
                  "endLine": 19,
                  "endColumn": 45,
                  "charOffset": 564,
                  "charLength": 14,
                  "snippet": {
                    "text": "AsyncGenerator"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Query'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 56,
                  "endLine": 19,
                  "endColumn": 61,
                  "charOffset": 533,
                  "charLength": 5,
                  "snippet": {
                    "text": "Query"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from app.db.base_class import Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/base.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 35,
                  "charOffset": 475,
                  "charLength": 34,
                  "snippet": {
                    "text": "from app.db.base_class import Base"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from sqlalchemy.orm import selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 40,
                  "charOffset": 425,
                  "charLength": 39,
                  "snippet": {
                    "text": "from sqlalchemy.orm import selectinload"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import json'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 12,
                  "charOffset": 406,
                  "charLength": 11,
                  "snippet": {
                    "text": "import json"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 42,
                  "endLine": 18,
                  "endColumn": 45,
                  "charOffset": 438,
                  "charLength": 3,
                  "snippet": {
                    "text": "Set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'update'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 48,
                  "endLine": 20,
                  "endColumn": 54,
                  "charOffset": 545,
                  "charLength": 6,
                  "snippet": {
                    "text": "update"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'AnalyzerError'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 52,
                  "charOffset": 422,
                  "charLength": 13,
                  "snippet": {
                    "text": "AnalyzerError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'Boolean'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/models/media.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "endLine": 125,
                  "endColumn": 16,
                  "charOffset": 4054,
                  "charLength": 7,
                  "snippet": {
                    "text": "Boolean"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Callable'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 18,
                  "endColumn": 49,
                  "charOffset": 441,
                  "charLength": 8,
                  "snippet": {
                    "text": "Callable"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import os'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/alembic/env.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 10,
                  "charOffset": 643,
                  "charLength": 9,
                  "snippet": {
                    "text": "import os"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from jose import JWTError, jwt'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/auth.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 31,
                  "charOffset": 628,
                  "charLength": 30,
                  "snippet": {
                    "text": "from jose import JWTError, jwt"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Optional'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/main.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 34,
                  "charOffset": 340,
                  "charLength": 8,
                  "snippet": {
                    "text": "Optional"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_tables_directly.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 33,
                  "endLine": 30,
                  "endColumn": 46,
                  "charOffset": 859,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 68,
                  "endLine": 18,
                  "endColumn": 72,
                  "charOffset": 481,
                  "charLength": 4,
                  "snippet": {
                    "text": "List"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 52,
                  "endLine": 6,
                  "endColumn": 55,
                  "charOffset": 139,
                  "charLength": 3,
                  "snippet": {
                    "text": "Set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'Any'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/vehicle.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 64,
                  "endLine": 217,
                  "endColumn": 67,
                  "charOffset": 6480,
                  "charLength": 3,
                  "snippet": {
                    "text": "Any"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from sqlalchemy import text'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 28,
                  "charOffset": 623,
                  "charLength": 27,
                  "snippet": {
                    "text": "from sqlalchemy import text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Any'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/deployment.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 51,
                  "endLine": 6,
                  "endColumn": 54,
                  "charOffset": 177,
                  "charLength": 3,
                  "snippet": {
                    "text": "Any"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/models/config.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 26,
                  "endLine": 5,
                  "endColumn": 29,
                  "charOffset": 139,
                  "charLength": 3,
                  "snippet": {
                    "text": "Set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Callable'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 41,
                  "endLine": 18,
                  "endColumn": 49,
                  "charOffset": 454,
                  "charLength": 8,
                  "snippet": {
                    "text": "Callable"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Response'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 13,
                  "charOffset": 258,
                  "charLength": 8,
                  "snippet": {
                    "text": "Response"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from typing import Dict, Any'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 29,
                  "charOffset": 349,
                  "charLength": 28,
                  "snippet": {
                    "text": "from typing import Dict, Any"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import json'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/utils.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 12,
                  "charOffset": 371,
                  "charLength": 11,
                  "snippet": {
                    "text": "import json"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from pydantic import ValidationError'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/auth.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 37,
                  "charOffset": 659,
                  "charLength": 36,
                  "snippet": {
                    "text": "from pydantic import ValidationError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved reference 'selectinload'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 23,
                  "endLine": 263,
                  "endColumn": 35,
                  "charOffset": 8385,
                  "charLength": 12,
                  "snippet": {
                    "text": "selectinload"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Union'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 59,
                  "endLine": 18,
                  "endColumn": 64,
                  "charOffset": 476,
                  "charLength": 5,
                  "snippet": {
                    "text": "Union"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_tables_directly.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 22,
                  "endLine": 36,
                  "endColumn": 35,
                  "charOffset": 1054,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'create_random_string'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 25,
                  "charOffset": 446,
                  "charLength": 20,
                  "snippet": {
                    "text": "create_random_string"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'from app.db.base import Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/reset_db.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 29,
                  "charOffset": 413,
                  "charLength": 28,
                  "snippet": {
                    "text": "from app.db.base import Base"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'AsyncEngine'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 36,
                  "endLine": 26,
                  "endColumn": 47,
                  "charOffset": 686,
                  "charLength": 11,
                  "snippet": {
                    "text": "AsyncEngine"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'Tuple'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/services/search.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 52,
                  "endLine": 18,
                  "endColumn": 57,
                  "charOffset": 469,
                  "charLength": 5,
                  "snippet": {
                    "text": "Tuple"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unresolved attribute reference 'metadata' for class 'Base'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 29,
                  "endLine": 86,
                  "endColumn": 42,
                  "charOffset": 2304,
                  "charLength": 13,
                  "snippet": {
                    "text": "Base.metadata"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import pytest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_auth.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 14,
                  "charOffset": 251,
                  "charLength": 13,
                  "snippet": {
                    "text": "import pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import pytest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 14,
                  "charOffset": 303,
                  "charLength": 13,
                  "snippet": {
                    "text": "import pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'import asyncpg'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 15,
                  "charOffset": 170,
                  "charLength": 14,
                  "snippet": {
                    "text": "import asyncpg"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnresolvedReferences",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused import statement 'insert'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/db.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "endLine": 20,
                  "endColumn": 38,
                  "charOffset": 529,
                  "charLength": 6,
                  "snippet": {
                    "text": "insert"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'structlog' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/script_generator.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "endLine": 9,
                  "endColumn": 17,
                  "charOffset": 203,
                  "charLength": 9,
                  "snippet": {
                    "text": "structlog"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'structlog' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/analyzer.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 8,
                  "endLine": 10,
                  "endColumn": 17,
                  "charOffset": 231,
                  "charLength": 9,
                  "snippet": {
                    "text": "structlog"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'pytest' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 8,
                  "endLine": 20,
                  "endColumn": 14,
                  "charOffset": 494,
                  "charLength": 6,
                  "snippet": {
                    "text": "pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'pytest_asyncio' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/conftest.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 22,
                  "charOffset": 508,
                  "charLength": 14,
                  "snippet": {
                    "text": "pytest_asyncio"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'PIL' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/file.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 9,
                  "charOffset": 582,
                  "charLength": 3,
                  "snippet": {
                    "text": "PIL"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'pytest' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_auth.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 8,
                  "endLine": 14,
                  "endColumn": 14,
                  "charOffset": 258,
                  "charLength": 6,
                  "snippet": {
                    "text": "pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'jinja2' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/services/script_generator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 8,
                  "endLine": 5,
                  "endColumn": 14,
                  "charOffset": 123,
                  "charLength": 6,
                  "snippet": {
                    "text": "jinja2"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'structlog' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/crown_deploy/main.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 8,
                  "endLine": 17,
                  "endColumn": 17,
                  "charOffset": 357,
                  "charLength": 9,
                  "snippet": {
                    "text": "structlog"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'pytest' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 8,
                  "endLine": 18,
                  "endColumn": 14,
                  "charOffset": 386,
                  "charLength": 6,
                  "snippet": {
                    "text": "pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyPackageRequirements",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package containing module 'pytest' is not listed in the project requirements"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 8,
                  "endLine": 14,
                  "endColumn": 14,
                  "charOffset": 310,
                  "charLength": 6,
                  "snippet": {
                    "text": "pytest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'cache_kwargs' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/utils/cache.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 13,
                  "endLine": 128,
                  "endColumn": 25,
                  "charOffset": 3122,
                  "charLength": 12,
                  "snippet": {
                    "text": "cache_kwargs"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 59,
                  "charOffset": 1137,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 5,
                  "endLine": 149,
                  "endColumn": 68,
                  "charOffset": 4367,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 5,
                  "endLine": 521,
                  "endColumn": 59,
                  "charOffset": 15885,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 5,
                  "endLine": 119,
                  "endColumn": 49,
                  "charOffset": 3761,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 5,
                  "endLine": 379,
                  "endColumn": 59,
                  "charOffset": 11040,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 5,
                  "endLine": 447,
                  "endColumn": 59,
                  "charOffset": 13246,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 49,
                  "charOffset": 778,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 5,
                  "endLine": 243,
                  "endColumn": 59,
                  "charOffset": 7287,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 5,
                  "endLine": 210,
                  "endColumn": 68,
                  "charOffset": 6683,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 5,
                  "endLine": 143,
                  "endColumn": 68,
                  "charOffset": 4163,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'app' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/main.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 20,
                  "endLine": 40,
                  "endColumn": 32,
                  "charOffset": 1064,
                  "charLength": 12,
                  "snippet": {
                    "text": "app: FastAPI"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 5,
                  "endLine": 348,
                  "endColumn": 68,
                  "charOffset": 10219,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 5,
                  "endLine": 165,
                  "endColumn": 59,
                  "charOffset": 4556,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 5,
                  "endLine": 199,
                  "endColumn": 59,
                  "charOffset": 5381,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 5,
                  "endLine": 290,
                  "endColumn": 68,
                  "charOffset": 8628,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 5,
                  "endLine": 395,
                  "endColumn": 59,
                  "charOffset": 11746,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 68,
                  "charOffset": 855,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 68,
                  "charOffset": 828,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "endLine": 120,
                  "endColumn": 68,
                  "charOffset": 3811,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 5,
                  "endLine": 347,
                  "endColumn": 59,
                  "charOffset": 9544,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 5,
                  "endLine": 580,
                  "endColumn": 59,
                  "charOffset": 17621,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 68,
                  "charOffset": 795,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 5,
                  "endLine": 187,
                  "endColumn": 49,
                  "charOffset": 5966,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 5,
                  "endLine": 477,
                  "endColumn": 59,
                  "charOffset": 13193,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 5,
                  "endLine": 174,
                  "endColumn": 59,
                  "charOffset": 4955,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 5,
                  "endLine": 322,
                  "endColumn": 49,
                  "charOffset": 10301,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'normal_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_products.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "endLine": 30,
                  "endColumn": 43,
                  "charOffset": 735,
                  "charLength": 17,
                  "snippet": {
                    "text": "normal_user: User"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 5,
                  "endLine": 288,
                  "endColumn": 68,
                  "charOffset": 9394,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 5,
                  "endLine": 167,
                  "endColumn": 49,
                  "charOffset": 5403,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "endLine": 98,
                  "endColumn": 59,
                  "charOffset": 2918,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/fitments.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 5,
                  "endLine": 336,
                  "endColumn": 59,
                  "charOffset": 9962,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 5,
                  "endLine": 278,
                  "endColumn": 68,
                  "charOffset": 8130,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 5,
                  "endLine": 188,
                  "endColumn": 68,
                  "charOffset": 6016,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'skip' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "endLine": 33,
                  "endColumn": 18,
                  "charOffset": 997,
                  "charLength": 13,
                  "snippet": {
                    "text": "skip: int = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 5,
                  "endLine": 233,
                  "endColumn": 49,
                  "charOffset": 7409,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/db/session.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 31,
                  "endLine": 83,
                  "endColumn": 32,
                  "charOffset": 2330,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 5,
                  "endLine": 243,
                  "endColumn": 59,
                  "charOffset": 7238,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 5,
                  "endLine": 287,
                  "endColumn": 49,
                  "charOffset": 9344,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 59,
                  "charOffset": 5241,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'limit' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "endLine": 34,
                  "endColumn": 21,
                  "charOffset": 1016,
                  "charLength": 16,
                  "snippet": {
                    "text": "limit: int = 100"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 5,
                  "endLine": 621,
                  "endColumn": 68,
                  "charOffset": 18901,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 5,
                  "endLine": 209,
                  "endColumn": 49,
                  "charOffset": 6633,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 5,
                  "endLine": 303,
                  "endColumn": 59,
                  "charOffset": 8867,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'engine' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/scripts/create_admin.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 9,
                  "endLine": 36,
                  "endColumn": 15,
                  "charOffset": 803,
                  "charLength": 6,
                  "snippet": {
                    "text": "engine"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 5,
                  "endLine": 168,
                  "endColumn": 68,
                  "charOffset": 5453,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 5,
                  "endLine": 422,
                  "endColumn": 59,
                  "charOffset": 11512,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'normal_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 44,
                  "endLine": 185,
                  "endColumn": 61,
                  "charOffset": 4788,
                  "charLength": 17,
                  "snippet": {
                    "text": "normal_user: User"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'token' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/auth.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 69,
                  "charOffset": 2954,
                  "charLength": 64,
                  "snippet": {
                    "text": "token: Annotated[TokenPayload, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "endLine": 73,
                  "endColumn": 49,
                  "charOffset": 2160,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 5,
                  "endLine": 323,
                  "endColumn": 68,
                  "charOffset": 10351,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 5,
                  "endLine": 89,
                  "endColumn": 59,
                  "charOffset": 2464,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 5,
                  "endLine": 74,
                  "endColumn": 68,
                  "charOffset": 2210,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 5,
                  "endLine": 309,
                  "endColumn": 59,
                  "charOffset": 8495,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 5,
                  "endLine": 260,
                  "endColumn": 68,
                  "charOffset": 8359,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'normal_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/api/v1/test_users.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 26,
                  "endLine": 58,
                  "endColumn": 43,
                  "charOffset": 1456,
                  "charLength": 17,
                  "snippet": {
                    "text": "normal_user: User"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'exclude_set' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/tests/utils.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 5,
                  "endLine": 92,
                  "endColumn": 16,
                  "charOffset": 2358,
                  "charLength": 11,
                  "snippet": {
                    "text": "exclude_set"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/user.py"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 5,
                  "endLine": 389,
                  "endColumn": 59,
                  "charOffset": 10672,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'db' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 5,
                  "endLine": 259,
                  "endColumn": 49,
                  "charOffset": 8309,
                  "charLength": 44,
                  "snippet": {
                    "text": "db: Annotated[AsyncSession, Depends(get_db)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/media.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 5,
                  "endLine": 161,
                  "endColumn": 68,
                  "charOffset": 5038,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/products.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "endLine": 100,
                  "endColumn": 59,
                  "charOffset": 2938,
                  "charLength": 54,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_admin_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "PyUnusedLocal",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'current_user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/app/api/v1/endpoints/search.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 5,
                  "endLine": 234,
                  "endColumn": 68,
                  "charOffset": 7459,
                  "charLength": 63,
                  "snippet": {
                    "text": "current_user: Annotated[User, Depends(get_current_active_user)]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "<html><body> Dependency pypi:python-jose:3.3.0 is vulnerable <ul><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-33663?utm_source=JetBrains\">CVE-2024-33663</a> 6.5 Use of a Broken or Risky Cryptographic Algorithm </li><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-33664?utm_source=JetBrains\">CVE-2024-33664</a> 5.3 Uncontrolled Resource Consumption ('Resource Exhaustion') </li></ul> Results powered by <a href=\"https://www.mend.io/?utm_source=JetBrains\">Mend.io</a></body> </html>"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/requirements.txt"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 33,
                  "charOffset": 2045,
                  "charLength": 32,
                  "snippet": {
                    "text": "python-jose[cryptography]==3.3.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "<html><body> Dependency pypi:starlette:0.27.0 is vulnerable <ul><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-47874?utm_source=JetBrains\">CVE-2024-47874</a> 0.0 Allocation of Resources Without Limits or Throttling </li></ul> Results powered by <a href=\"https://www.mend.io/?utm_source=JetBrains\">Mend.io</a></body> </html>"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/requirements.txt"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 18,
                  "charOffset": 2428,
                  "charLength": 17,
                  "snippet": {
                    "text": "starlette==0.27.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "<html><body> Dependency pypi:python-jose:3.3.0 is vulnerable <ul><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-33663?utm_source=JetBrains\">CVE-2024-33663</a> 6.5 Use of a Broken or Risky Cryptographic Algorithm </li><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-33664?utm_source=JetBrains\">CVE-2024-33664</a> 5.3 Uncontrolled Resource Consumption ('Resource Exhaustion') </li></ul> Results powered by <a href=\"https://www.mend.io/?utm_source=JetBrains\">Mend.io</a></body> </html>"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/backend/requirements.txt"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 33,
                  "charOffset": 2045,
                  "charLength": 32,
                  "snippet": {
                    "text": "python-jose[cryptography]==3.3.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "<html><body> Dependency pypi:starlette:0.27.0 is vulnerable <ul><li><a href=\"https://www.mend.io/vulnerability-database/CVE-2024-47874?utm_source=JetBrains\">CVE-2024-47874</a> 0.0 Allocation of Resources Without Limits or Throttling </li></ul> Results powered by <a href=\"https://www.mend.io/?utm_source=JetBrains\">Mend.io</a></body> </html>"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/requirements.txt"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 18,
                  "charOffset": 2428,
                  "charLength": 17,
                  "snippet": {
                    "text": "starlette==0.27.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 548,
                  "endLine": 1,
                  "endColumn": 594,
                  "charOffset": 547,
                  "charLength": 46,
                  "snippet": {
                    "text": "<stop offset=\"0%\" stop-color=\"#FFEA83\"></stop>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/assets/vue.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 400,
                  "endLine": 1,
                  "endColumn": 491,
                  "charOffset": 399,
                  "charLength": 91,
                  "snippet": {
                    "text": "<path fill=\"#35495E\" d=\"M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z\"></path>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 644,
                  "endLine": 1,
                  "endColumn": 692,
                  "charOffset": 643,
                  "charLength": 48,
                  "snippet": {
                    "text": "<stop offset=\"100%\" stop-color=\"#FFA800\"></stop>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 716,
                  "endLine": 1,
                  "endColumn": 986,
                  "charOffset": 715,
                  "charLength": 270,
                  "snippet": {
                    "text": "<path fill=\"url(#IconifyId1813088fe1fbc01fb466)\" d=\"M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z\"></path>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/assets/vue.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 229,
                  "endLine": 1,
                  "endColumn": 319,
                  "charOffset": 228,
                  "charLength": 90,
                  "snippet": {
                    "text": "<path fill=\"#41B883\" d=\"M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z\"></path>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 382,
                  "endLine": 1,
                  "endColumn": 430,
                  "charOffset": 381,
                  "charLength": 48,
                  "snippet": {
                    "text": "<stop offset=\"100%\" stop-color=\"#BD34FE\"></stop>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 336,
                  "endLine": 1,
                  "endColumn": 382,
                  "charOffset": 335,
                  "charLength": 46,
                  "snippet": {
                    "text": "<stop offset=\"0%\" stop-color=\"#41D1FF\"></stop>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 986,
                  "endLine": 1,
                  "endColumn": 1492,
                  "charOffset": 985,
                  "charLength": 506,
                  "snippet": {
                    "text": "<path fill=\"url(#IconifyId1813088fe1fbc01fb467)\" d=\"M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z\"></path>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 594,
                  "endLine": 1,
                  "endColumn": 644,
                  "charOffset": 593,
                  "charLength": 50,
                  "snippet": {
                    "text": "<stop offset=\"8.333%\" stop-color=\"#FFDD35\"></stop>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckTagEmptyBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XML tag has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/assets/vue.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 319,
                  "endLine": 1,
                  "endColumn": 400,
                  "charOffset": 318,
                  "charLength": 81,
                  "snippet": {
                    "text": "<path fill=\"#41B883\" d=\"m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z\"></path>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "XmlUnusedNamespaceDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Namespace declaration is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/public/vite.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 41,
                  "endLine": 1,
                  "endColumn": 83,
                  "charOffset": 40,
                  "charLength": 42,
                  "snippet": {
                    "text": "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "XmlUnusedNamespaceDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Namespace declaration is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "..\\ile://D:/crown-nexus/frontend/src/assets/vue.svg"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 41,
                  "endLine": 1,
                  "endColumn": 83,
                  "charOffset": 40,
                  "charLength": 42,
                  "snippet": {
                    "text": "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                  }
                }
              }
            }
          ]
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}