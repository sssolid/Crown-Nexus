from __future__ import annotations
import abc
from abc import ABC, abstractmethod
from typing import Any, Dict, Generic, List, Optional, Protocol, Type, TypeVar, Union
T = TypeVar('T')
ID = TypeVar('ID')
C = TypeVar('C')
U = TypeVar('U')
R = TypeVar('R')
class ServiceInterface(Protocol, Generic[T, ID]):
    async def initialize(self) -> None:
        ...
    async def shutdown(self) -> None:
        ...
    async def get_by_id(self, id: ID, user_id: Optional[str]=None) -> Optional[T]:
        ...
    async def get_all(self, page: int=1, page_size: int=20, filters: Optional[Dict[str, Any]]=None, user_id: Optional[str]=None) -> Dict[str, Any]:
        ...
    async def create(self, data: Dict[str, Any], user_id: Optional[str]=None) -> T:
        ...
    async def update(self, id: ID, data: Dict[str, Any], user_id: Optional[str]=None) -> Optional[T]:
        ...
    async def delete(self, id: ID, user_id: Optional[str]=None) -> bool:
        ...
class CrudServiceInterface(ServiceInterface[T, ID], Generic[T, ID, C, U, R]):
    async def create_with_schema(self, schema: C, user_id: Optional[str]=None) -> T:
        ...
    async def update_with_schema(self, id: ID, schema: U, user_id: Optional[str]=None) -> Optional[T]:
        ...
    async def to_response(self, entity: T) -> R:
        ...
    async def to_response_multi(self, entities: List[T]) -> List[R]:
        ...
class ReadOnlyServiceInterface(ServiceInterface[T, ID], Generic[T, ID, R]):
    async def to_response(self, entity: T) -> R:
        ...
    async def to_response_multi(self, entities: List[T]) -> List[R]:
        ...