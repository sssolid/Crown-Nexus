import{createI18n}from 'vue-i18n' import axios from 'axios' import{useAuthStore}from '@/stores/auth' import en from './locales/en.json' export const i18n=createI18n({legacy:false,locale:'en',fallbackLocale:'en',messages:{en},silentTranslationWarn:process.env.NODE_ENV==='production',silentFallbackWarn:process.env.NODE_ENV==='production'})const loadedLanguages:string[]=['en']export async function loadLanguageAsync(locale:string):Promise<string>{if(loadedLanguages.includes(locale)){i18n.global.locale.value=locale document.querySelector('html')?.setAttribute('lang',locale)return Promise.resolve(locale)}try{const response=await axios.get(`/api/v1/i18n/messages/${locale}`)i18n.global.setLocaleMessage(locale,response.data)loadedLanguages.push(locale)i18n.global.locale.value=locale document.querySelector('html')?.setAttribute('lang',locale)return locale}catch(error){console.error(`Could not load language: ${locale}`,error)return i18n.global.locale.value}}export async function setLocale(locale:string):Promise<string>{const authStore=useAuthStore()await loadLanguageAsync(locale)if(authStore.isLoggedIn){try{await authStore.updateUserPreferences(authStore.user!.id,{language:locale})}catch(error){console.error('Could not save language preference',error)}}localStorage.setItem('locale',locale)return locale}export async function initializeI18n():Promise<void>{const authStore=useAuthStore()let locale='en' if(authStore.isLoggedIn&&authStore.user?.preferences?.language){locale=authStore.user.preferences.language}else{const savedLocale=localStorage.getItem('locale')if(savedLocale){locale=savedLocale}else{const browserLang=navigator.language.split('-')[0]if(browserLang&&['en','es','fr','de'].includes(browserLang)){locale=browserLang}}}await loadLanguageAsync(locale)}