import{ApiService}from '../api';import{Make,Model,Year,SubModel,Region,DriveType,Vehicle,VehicleDetail,VehicleSearchParams,VehicleSearchResponse,BaseVehicle,EngineConfig,Transmission,WheelBase,BrakeConfig,BodyStyleConfig,VehicleConfigurationResponse,VehicleType,VCdbStats}from '@/types';export class VCdbService extends ApiService{private readonly baseUrl='/autocare/vcdb';async getVersion():Promise<string>{return this.get<string>(`${this.baseUrl}/version`);}async getStats():Promise<VCdbStats>{return this.get<VCdbStats>(`${this.baseUrl}/stats`);}async getYears():Promise<Year[]>{return this.get<Year[]>(`${this.baseUrl}/years`);}async getYearRange():Promise<[number,number]>{return this.get<[number,number]>(`${this.baseUrl}/years/range`);}async getMakes():Promise<Make[]>{return this.get<Make[]>(`${this.baseUrl}/makes`);}async getMakesByYear(year:number):Promise<Make[]>{return this.get<Make[]>(`${this.baseUrl}/years/${year}/makes`);}async searchMakes(searchTerm:string):Promise<Make[]>{return this.get<Make[]>(`${this.baseUrl}/makes/search${this.buildQueryParams({ search_term: searchTerm })}`);}async getMakeById(makeId:number):Promise<Make>{return this.get<Make>(`${this.baseUrl}/makes/${makeId}`);}async getModelsByYearMake(year:number,makeId:number):Promise<Model[]>{return this.get<Model[]>(`${this.baseUrl}/years/${year}/makes/${makeId}/models`);}async searchModels(searchTerm:string):Promise<Model[]>{return this.get<Model[]>(`${this.baseUrl}/models/search${this.buildQueryParams({ search_term: searchTerm })}`);}async getModelById(modelId:number):Promise<Model>{return this.get<Model>(`${this.baseUrl}/models/${modelId}`);}async getSubmodelsByBaseVehicle(baseVehicleId:number):Promise<SubModel[]>{return this.get<SubModel[]>(`${this.baseUrl}/base-vehicles/${baseVehicleId}/submodels`);}async getAllSubmodels():Promise<SubModel[]>{return this.get<SubModel[]>(`${this.baseUrl}/submodels`);}async searchSubmodels(searchTerm:string):Promise<SubModel[]>{return this.get<SubModel[]>(`${this.baseUrl}/submodels/search${this.buildQueryParams({ search_term: searchTerm })}`);}async getVehicleTypes():Promise<VehicleType[]>{return this.get<VehicleType[]>(`${this.baseUrl}/vehicle-types`);}async getVehicleTypesByGroup(groupId:number):Promise<VehicleType[]>{return this.get<VehicleType[]>(`${this.baseUrl}/vehicle-type-groups/${groupId}/vehicle-types`);}async getRegions():Promise<Region[]>{return this.get<Region[]>(`${this.baseUrl}/regions`);}async getRegionsByParent(parentId:number):Promise<Region[]>{return this.get<Region[]>(`${this.baseUrl}/regions/${parentId}/children`);}async getBaseVehicle(baseVehicleId:number):Promise<BaseVehicle>{return this.get<BaseVehicle>(`${this.baseUrl}/base-vehicles/${baseVehicleId}`);}async findBaseVehicle(yearId:number,makeId:number,modelId:number):Promise<BaseVehicle|null>{return this.get<BaseVehicle|null>(`${this.baseUrl}/base-vehicles/find${this.buildQueryParams({
      year_id: yearId,
      make_id: makeId,
      model_id: modelId
    })}`);}async searchBaseVehicles(params:{year?:number;make?:string;model?:string;page:number;page_size:number;}):Promise<VehicleSearchResponse>{return this.get<VehicleSearchResponse>(`${this.baseUrl}/base-vehicles/search${this.buildQueryParams(params)}`);}async searchVehicles(params:VehicleSearchParams):Promise<VehicleSearchResponse>{return this.get<VehicleSearchResponse>(`${this.baseUrl}/vehicles/search${this.buildQueryParams(params)}`);}async getVehicleById(vehicleId:number):Promise<Vehicle>{return this.get<Vehicle>(`${this.baseUrl}/vehicles/${vehicleId}`);}async getVehicleDetails(vehicleId:number):Promise<VehicleDetail>{return this.get<VehicleDetail>(`${this.baseUrl}/vehicles/${vehicleId}/details`);}async getVehicleConfigurations(vehicleId:number):Promise<VehicleConfigurationResponse>{return this.get<VehicleConfigurationResponse>(`${this.baseUrl}/vehicles/${vehicleId}/configurations`);}async getEngineConfig(engineConfigId:number):Promise<EngineConfig>{return this.get<EngineConfig>(`${this.baseUrl}/engine-configs/${engineConfigId}`);}async searchEngineConfigs(params:{engine_base_id?:number;fuel_type_id?:number;aspiration_id?:number;page:number;page_size:number;}):Promise<{items:EngineConfig[];total:number;page:number;page_size:number;pages:number}>{return this.get<{items:EngineConfig[];total:number;page:number;page_size:number;pages:number}>(`${this.baseUrl}/engine-configs/search${this.buildQueryParams(params)}`);}async getTransmission(transmissionId:number):Promise<Transmission>{return this.get<Transmission>(`${this.baseUrl}/transmissions/${transmissionId}`);}async searchTransmissions(params:{transmission_type_id?:number;transmission_num_speeds_id?:number;transmission_control_type_id?:number;page:number;page_size:number;}):Promise<{items:Transmission[];total:number;page:number;page_size:number;pages:number}>{return this.get<{items:Transmission[];total:number;page:number;page_size:number;pages:number}>(`${this.baseUrl}/transmissions/search${this.buildQueryParams(params)}`);}async getDriveTypes():Promise<DriveType[]>{return this.get<DriveType[]>(`${this.baseUrl}/drive-types`);}async getBodyStyleConfig(bodyStyleConfigId:number):Promise<BodyStyleConfig>{return this.get<BodyStyleConfig>(`${this.baseUrl}/body-style-configs/${bodyStyleConfigId}`);}async getBrakeConfig(brakeConfigId:number):Promise<BrakeConfig>{return this.get<BrakeConfig>(`${this.baseUrl}/brake-configs/${brakeConfigId}`);}async getWheelBases():Promise<WheelBase[]>{return this.get<WheelBase[]>(`${this.baseUrl}/wheel-bases`);}}export const vcdbService=new VCdbService();export default vcdbService;