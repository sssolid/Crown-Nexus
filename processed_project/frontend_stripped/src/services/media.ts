import api from '@/services/api';import{Media}from '@/types/media';export interface MediaListResponse{items:Media[];total:number;page:number;page_size:number;pages:number;}export interface MediaFilters{product_id?:string;mime_type?:string;search?:string;page?:number;page_size?:number;}export interface MediaMetadata{width?:number;height?:number;size:number;mime_type:string;extension:string;created_at:string;modified_at:string;additional_info?:Record<string,any>;}const mediaService={async getMediaList(filters?:MediaFilters):Promise<MediaListResponse>{return api.get<MediaListResponse>('/media/',{params:filters});},async getMedia(id:string):Promise<Media>{return api.get<Media>(`/media/${id}`);},async uploadMedia(file:File,productId?:string|null):Promise<Media>{const formData=new FormData();formData.append('file',file);const mediaType=file.type.startsWith('image/')?'image':file.type.includes('pdf')||file.type.includes('document')?'document':file.type.startsWith('video/')?'video':'other';formData.append('media_type',mediaType);formData.append('visibility','public');if(productId){formData.append('product_id',productId);}return api.uploadFile<Media>('/media/upload',formData);},async uploadMultipleMedia(files:File[],productId?:string):Promise<Media[]>{const uploadedMedia:Media[]=[];for(const file of files){const media=await this.uploadMedia(file,productId);uploadedMedia.push(media);}return uploadedMedia;},async updateMedia(id:string,metadata:Partial<Media>):Promise<Media>{return api.put<Media>(`/media/${id}`,metadata);},async deleteMedia(id:string):Promise<{message:string}>{return api.delete<{message:string}>(`/media/${id}`);},async associateMediaWithProduct(mediaId:string,productId:string):Promise<Media>{return api.post<Media>(`/media/${mediaId}/products/${productId}`,{});},async removeProductAssociation(mediaId:string,productId:string):Promise<{message:string}>{return api.delete<{message:string}>(`/media/${mediaId}/products/${productId}`);},async getProductMedia(productId:string):Promise<Media[]>{return api.get<Media[]>(`/media/products/${productId}`);},async setPrimaryMedia(productId:string,mediaId:string):Promise<{message:string}>{return api.post<{message:string}>(`/media/${mediaId}/products/${productId}`,{is_primary:true});},async reorderProductMedia(productId:string,mediaIds:string[]):Promise<{message:string}>{return api.post<{message:string}>(`/products/${productId}/media/reorder`,{media_ids:mediaIds});},async getMediaMetadata(id:string):Promise<MediaMetadata>{return api.get<MediaMetadata>(`/media/${id}/metadata`);},async getResizedImage(id:string,width:number,height:number):Promise<{url:string}>{return api.get<{url:string}>(`/media/${id}/resize`,{params:{width,height}});}};export default mediaService;