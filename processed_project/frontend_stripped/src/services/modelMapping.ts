import api from '@/services/api';export interface ModelMapping{id:number;pattern:string;mapping:string;priority:number;active:boolean;created_at?:string;updated_at?:string;}export interface ModelMappingListResponse{items:ModelMapping[];total:number;}export interface ModelMappingRequest{pattern:string;mapping:string;priority?:number;active?:boolean;}const modelMappingService={async getModelMappings(skip=0,limit=100,pattern?:string,sortBy?:string,sortOrder?:string):Promise<ModelMappingListResponse>{console.log(`API call with params: skip=${skip}, limit=${limit}, pattern=${pattern || __STRING_1__}, sortBy=${sortBy || __STRING_2__}, sortOrder=${sortOrder || __STRING_3__}`);return api.get<ModelMappingListResponse>('/fitment/model-mappings',{params:{skip,limit,pattern:pattern||undefined,sort_by:sortBy||undefined,sort_order:sortOrder||undefined}});},async getModelMapping(id:number):Promise<ModelMapping>{const response=await this.getModelMappings(0,1000);const mapping=response.items.find(m=>m.id===id);if(!mapping){throw new Error(`Model mapping with ID ${id} not found`);}return mapping;},async createModelMapping(mapping:ModelMappingRequest):Promise<ModelMapping>{return api.post<ModelMapping>('/fitment/model-mappings',mapping);},async updateModelMapping(id:number,mapping:ModelMappingRequest):Promise<ModelMapping>{return api.put<ModelMapping>(`/fitment/model-mappings/${id}`,mapping);},async deleteModelMapping(id:number):Promise<{message:string}>{return api.delete<{message:string}>(`/fitment/model-mappings/${id}`);},async uploadModelMappings(file:File):Promise<{message:string,mapping_count:number}>{const formData=new FormData();formData.append('file',file);return api.uploadFile<{message:string,mapping_count:number}>('/fitment/upload-model-mappings',formData);},async refreshMappings():Promise<{message:string}>{return api.post<{message:string}>('/fitment/refresh-mappings');}};export default modelMappingService;