import api,{ApiService}from '@/services/api';import{User,UserRole}from '@/types/user';export interface UserListResponse{items:User[];total:number;page:number;page_size:number;pages:number;}export interface UserFilters{search?:string;role?:UserRole;is_active?:boolean;company_id?:string;page?:number;page_size?:number;}export interface Company{id:string;name:string;account_number:string;account_type:string;is_active:boolean;created_at:string;updated_at:string;}export interface UserPayload{email:string;full_name:string;password?:string;role:UserRole;is_active:boolean;company_id?:string|null;}export interface UserPreferences{theme?:'light'|'dark'|'system';dashboard_widgets?:string[];notifications_enabled?:boolean;language?:string;timezone?:string;}export class UserService extends ApiService{async getUsers(filters?:UserFilters):Promise<UserListResponse>{return api.get<UserListResponse>('/users',{params:filters});}async getUser(id:string):Promise<User>{return api.get<User>(`/users/${id}`);}async createUser(userData:UserPayload):Promise<User>{return api.post<User>('/users',userData);}async updateUser(id:string,userData:Partial<UserPayload>):Promise<User>{return api.put<User>(`/users/${id}`,userData);}async deleteUser(id:string):Promise<{message:string}>{return api.delete<{message:string}>(`/users/${id}`);}async getCompanies():Promise<Company[]>{return api.get<Company[]>('/companies');}async getCompany(id:string):Promise<Company>{return api.get<Company>(`/companies/${id}`);}async updateUserPreferences(id:string,preferences:UserPreferences):Promise<UserPreferences>{return api.put<UserPreferences>(`/users/${id}/preferences`,preferences);}async getUserPreferences(id:string):Promise<UserPreferences>{return api.get<UserPreferences>(`/users/${id}/preferences`);}async changePassword(id:string,currentPassword:string,newPassword:string):Promise<{message:string}>{return api.post<{message:string}>(`/users/${id}/change-password`,{current_password:currentPassword,new_password:newPassword});}async sendPasswordReset(email:string):Promise<{message:string}>{return api.post<{message:string}>('/users/reset-password',{email});}async resetPassword(token:string,newPassword:string):Promise<{message:string}>{return api.post<{message:string}>('/users/reset-password/confirm',{token,new_password:newPassword});}async getUserActivityLogs(id:string,page:number=1,pageSize:number=10):Promise<any>{return api.get(`/users/${id}/activity`,{params:{page,page_size:pageSize}});}}export const userService=new UserService();export default userService;