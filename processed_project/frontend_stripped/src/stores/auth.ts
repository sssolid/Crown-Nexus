import{defineStore}from 'pinia';import api from '@/services/api';import router from '@/router';import{User,UserRole}from '@/types/user';interface AuthState{user:User|null;token:string|null;isAuthenticated:boolean;loading:boolean;error:string|null;tokenExpiration:number|null;}interface LoginCredentials{username:string;password:string;rememberMe?:boolean;}interface LoginResponse{access_token:string;token_type:string;}interface TokenPayload{sub:string;exp:number;role:UserRole;}export const useAuthStore=defineStore('auth',{state:():AuthState=>({user:null,token:localStorage.getItem('access_token'),isAuthenticated:!!localStorage.getItem('access_token'),loading:false,error:null,tokenExpiration:getTokenExpiration(localStorage.getItem('access_token')),}),getters:{getUser:(state)=>state.user,isLoggedIn:(state)=>state.isAuthenticated,hasRole:(state)=>(role:UserRole)=>{return state.user?.role===role;},isAdmin:(state)=>{return state.user?.role===UserRole.ADMIN;},isTokenValid:(state)=>{if(!state.token||!state.tokenExpiration)return false;return state.tokenExpiration>Math.floor(Date.now()/1000)+10;},},actions:{async login(credentials:LoginCredentials){this.loading=true;this.error=null;try{const response=await api.post<LoginResponse>('/auth/login',new URLSearchParams({username:credentials.username,password:credentials.password,}),{headers:{'Content-Type':'application/x-www-form-urlencoded'}});this.token=response.access_token;this.isAuthenticated=true;this.tokenExpiration=getTokenExpiration(response.access_token);if(credentials.rememberMe){localStorage.setItem('access_token',response.access_token);}else{sessionStorage.setItem('access_token',response.access_token);localStorage.removeItem('access_token');}await this.fetchUserProfile();const redirectPath=localStorage.getItem('redirectPath')||'/';localStorage.removeItem('redirectPath');await router.push(redirectPath);return response;}catch(error:any){this.error=error.response?.data?.detail||'Login failed';throw error;}finally{this.loading=false;}},logout(){this.user=null;this.token=null;this.isAuthenticated=false;this.tokenExpiration=null;localStorage.removeItem('access_token');sessionStorage.removeItem('access_token');router.push('/login');},async fetchUserProfile(){if(!this.isAuthenticated||!this.isTokenValid){this.logout();return null;}this.loading=true;try{const user=await api.get<User>('/auth/me');this.user=user;return user;}catch(error:any){this.error=error.response?.data?.detail||'Failed to fetch user profile';if(error.response?.status===401){this.logout();}throw error;}finally{this.loading=false;}},async initializeAuth(){const token=localStorage.getItem('access_token')||sessionStorage.getItem('access_token');if(token){this.token=token;this.tokenExpiration=getTokenExpiration(token);this.isAuthenticated=true;if(this.isTokenValid){try{await this.fetchUserProfile();}catch(error){console.error('Failed to initialize auth:',error);this.logout();}}else{this.logout();}}},},});function getTokenExpiration(token:string|null):number|null{if(!token)return null;try{const parts=token.split('.');if(parts.length!==3)return null;const payload=JSON.parse(atob(parts[1]));return payload.exp||null;}catch(error){console.error('Error parsing token:',error);return null;}}