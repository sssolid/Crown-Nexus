import{AxiosError}from 'axios';export enum ErrorSeverity{INFO='info',WARNING='warning',ERROR='error',CRITICAL='critical'}export interface ErrorInfo{message:string;code?:string;severity:ErrorSeverity;details?:string|Record<string,any>;field?:string;}export function getErrorMessage(error:any):string{if(!error)return 'An unknown error occurred';if(isAxiosError(error)){const response=error.response;if(response?.data){if(typeof response.data==='string'){return response.data;}if(response.data.detail){return response.data.detail;}if(response.data.message){return response.data.message;}if(response.data.error){return response.data.error;}}if(response?.statusText){return `Error: ${response.statusText}`;}return `Error ${response?.status || __STRING_7__}: Request failed`;}if(error.message){return error.message;}if(typeof error==='string'){return error;}return 'An unexpected error occurred';}export function isAxiosError(error:any):error is AxiosError{return error&&error.isAxiosError===true;}export function parseValidationErrors(error:any):Record<string,string>{const validationErrors:Record<string,string>={};if(isAxiosError(error)&&error.response?.data){const data=error.response.data;if(data.detail&&Array.isArray(data.detail)){data.detail.forEach((err:any)=>{if(err.loc&&err.loc.length>1){const fieldName=err.loc[1];validationErrors[fieldName]=err.msg;}});return validationErrors;}if(typeof data==='object'&&!Array.isArray(data)){Object.keys(data).forEach(key=>{if(typeof data[key]==='string'){validationErrors[key]=data[key];}else if(Array.isArray(data[key])){validationErrors[key]=data[key].join(', ');}});}}return validationErrors;}export function createErrorInfo(error:any,defaultMessage:string='An error occurred'):ErrorInfo{const errorInfo:ErrorInfo={message:defaultMessage,severity:ErrorSeverity.ERROR};if(!error)return errorInfo;if(isAxiosError(error)){const status=error.response?.status||500;if(status>=500){errorInfo.severity=ErrorSeverity.CRITICAL;}else if(status>=400){errorInfo.severity=ErrorSeverity.ERROR;}else if(status>=300){errorInfo.severity=ErrorSeverity.WARNING;}errorInfo.message=getErrorMessage(error);errorInfo.code=`HTTP_${status}`;const validationErrors=parseValidationErrors(error);if(Object.keys(validationErrors).length>0){errorInfo.details=validationErrors;}return errorInfo;}if(error instanceof Error){errorInfo.message=error.message;errorInfo.details=error.stack;return errorInfo;}if(typeof error==='string'){errorInfo.message=error;return errorInfo;}if(typeof error==='object'&&error!==null){if(error.message){errorInfo.message=String(error.message);}if(error.code){errorInfo.code=String(error.code);}if(error.details){errorInfo.details=error.details;}return errorInfo;}return errorInfo;}