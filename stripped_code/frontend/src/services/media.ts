import api from '@/services/api';import{Media}from '@/types/media';export interface MediaListResponse{items:Media[];total:number;page:number;page_size:number;pages:number;}export interface MediaFilters{product_id?:string;file_type?:string;search?:string;page?:number;page_size?:number;}export interface MediaMetadata{width?:number;height?:number;size:number;mime_type:string;extension:string;created_at:string;modified_at:string;additional_info?:Record<string,any>;}const mediaService={async getMediaList(filters?:MediaFilters):Promise<MediaListResponse>{return api.get<MediaListResponse>('/media',{params:filters});},async getMedia(id:string):Promise<Media>{return api.get<Media>(`/media/${id}`);},async uploadMedia(file:File,productId?:string):Promise<Media>{const formData=new FormData();formData.append('file',file);if(productId){formData.append('product_id',productId);}return api.uploadFile<Media>('/media/upload',formData);},async uploadMultipleMedia(files:File[],productId?:string):Promise<Media[]>{const formData=new FormData();files.forEach((file,index)=>{formData.append(`files[${index}]`,file);});if(productId){formData.append('product_id',productId);}return api.uploadFile<Media[]>('/media/upload-multiple',formData);},async updateMedia(id:string,metadata:Partial<Media>):Promise<Media>{return api.put<Media>(`/media/${id}`,metadata);},async deleteMedia(id:string):Promise<{message:string}>{return api.delete<{message:string}>(`/media/${id}`);},async associateMediaWithProduct(mediaId:string,productId:string):Promise<Media>{return api.post<Media>(`/media/${mediaId}/associate`,{product_id:productId});},async removeProductAssociation(mediaId:string):Promise<Media>{return api.post<Media>(`/media/${mediaId}/disassociate`,{});},async getProductMedia(productId:string):Promise<Media[]>{return api.get<Media[]>(`/products/${productId}/media`);},async setPrimaryMedia(productId:string,mediaId:string):Promise<{message:string}>{return api.post<{message:string}>(`/products/${productId}/media/primary`,{media_id:mediaId});},async reorderProductMedia(productId:string,mediaIds:string[]):Promise<{message:string}>{return api.post<{message:string}>(`/products/${productId}/media/reorder`,{media_ids:mediaIds});},async getMediaMetadata(id:string):Promise<MediaMetadata>{return api.get<MediaMetadata>(`/media/${id}/metadata`);},async getResizedImage(id:string,width:number,height:number):Promise<{url:string}>{return api.get<{url:string}>(`/media/${id}/resize`,{params:{width,height}});}};export default mediaService;