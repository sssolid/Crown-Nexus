[tox]
# Prevent building the main project
skipsdist = True
# Use isolated build to avoid interference between environments
isolated_build = True
# Extend environment list to include audit
envlist = py312, lint, typecheck, format-check, security, audit
# Skip missing interpreters to allow running on systems without all Python versions
skip_missing_interpreters = True

[testenv]
# Minimum Python version
minversion = 3.12
# Install required dependencies before tests
commands_pre =
    pip install --upgrade pip
    pip install -r requirements.txt
# Run tests with coverage reporting
commands =
    pytest {posargs:tests} --cov=backend --cov-report=xml --cov-report=term
# Set environment variables for tests
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONWARNINGS = ignore
    TEST_ENVIRONMENT = True

[testenv:py312]
deps =
    pytest>=7.4.0
commands =
    pytest

[testenv:lint]
description = Run linting checks
deps =
    ruff>=0.1.5
    flake8>=6.1.0
    pylint>=3.0.2
commands =
    ruff check backend tests migrations
    flake8 backend tests migrations
    # Run pylint with standard checks
    pylint backend

[testenv:audit]
description = Run audit system checks
skip_install = True
deps =
    pylint>=3.0.2
commands =
    # Add this to see what's actually in the PYTHONPATH
    python -c "import sys; print(sys.path)"
    # Install the plugin directly in development mode
    pip install -e {toxinidir}/tools/crown_nexus_pylint
    # Run pylint with only the audit checker enabled
    pylint --load-plugins=crown_nexus_pylint.audit_checker --disable=all --enable=C9001 backend

[testenv:typecheck]
description = Run static type checking
deps =
    mypy>=1.7.0
    types-python-dateutil>=2.8.19.14
    types-pytz>=2023.3.1.1
    types-pyyaml>=6.0.12.12
    types-requests>=2.31.0.2
commands =
    mypy --install-types --non-interactive backend tests migrations

[testenv:format]
description = Format code with Black and isort
deps =
    black>=23.11.0
    isort>=5.12.0
commands =
    black backend tests migrations
    isort backend tests migrations

[testenv:format-check]
description = Check code formatting with Black and isort
deps =
    black>=23.11.0
    isort>=5.12.0
commands =
    black --check backend tests migrations
    isort --check-only backend tests migrations

[testenv:security]
description = Run security checks
deps =
    bandit>=1.7.5
    pip-audit>=2.6.1
    safety>=2.3.5
    owasp-dependency-check>=0.3.3
commands =
    bandit -r backend
    pip-audit
    safety check
    # Only run dependency-check on CI servers to avoid long local runs
    python -c "import os; exit(0 if os.environ.get('CI', False) else 1)" && dependency-check --project "Crown Nexus" --scan . --out reports || true

[testenv:docs]
description = Build documentation
deps =
    sphinx>=7.2.6
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
    httpx>=0.26.0,<0.29.0
commands =
    sphinx-build -b html docs/source docs/build

[testenv:dev]
description = Development environment with all dependencies
commands =
    pip install -r requirements.txt
    pip install -r requirements-dev.txt

[testenv:ci]
description = Environment for CI runners
deps =
    {[testenv:lint]deps}
    {[testenv:typecheck]deps}
    {[testenv:format-check]deps}
    {[testenv:security]deps}
    {[testenv:audit]deps}
    pytest>=7.4.0
    pytest-cov>=4.1.0
commands =
    {[testenv:lint]commands}
    {[testenv:typecheck]commands}
    {[testenv:format-check]commands}
    {[testenv:security]commands}
    {[testenv:audit]commands}
    pytest tests --cov=backend --cov-report=xml --cov-report=term

[pytest]
testpaths = tests
norecursedirs = .tox venv docs nexus_for_sharing nexus_for_sharing_tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests
    api: API tests
    audit: Audit system tests
addopts = -v --strict-markers

[coverage:run]
source = backend
omit =
    */__init__.py
    */tests/*
    */ui/*
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if TYPE_CHECKING:
    pass
    raise ImportError
    except ImportError
    if __name__ == .__main__.:
fail_under = 80
show_missing = True

[flake8]
max-line-length = 88
exclude = .tox,*.egg,build,data,nexus_for_sharing,nexus_for_sharing_tests
select = E,W,F
ignore = E203, W503
extend-ignore = E501

[isort]
profile = black
line_length = 88
known_first_party = backend
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

[mypy]
python_version = 3.12
exclude = ^(nexus_for_sharing/|nexus_for_sharing_tests/)
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[mypy-tests.*]
disallow_untyped_defs = false
disallow_incomplete_defs = false
